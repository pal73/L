
2_serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002058  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08002164  08002164  00012164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021e4  080021e4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080021e4  080021e4  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080021e4  080021e4  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021e4  080021e4  000121e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080021e8  080021e8  000121e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080021ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  2000005c  08002248  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  08002248  00020210  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006520  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000130d  00000000  00000000  000265e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000610  00000000  00000000  000278f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000049b  00000000  00000000  00027f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000160a5  00000000  00000000  000283a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000078df  00000000  00000000  0003e448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000801bd  00000000  00000000  00045d27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001c64  00000000  00000000  000c5ee4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000c7b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800214c 	.word	0x0800214c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	0800214c 	.word	0x0800214c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b08a      	sub	sp, #40	; 0x28
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t message[35] = {'\0'};
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	f107 0308 	add.w	r3, r7, #8
 800015a:	221f      	movs	r2, #31
 800015c:	2100      	movs	r1, #0
 800015e:	4618      	mov	r0, r3
 8000160:	f001 fb62 	bl	8001828 <memset>
	uint8_t num = 0;
 8000164:	2300      	movs	r3, #0
 8000166:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800016a:	f000 fa05 	bl	8000578 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800016e:	f000 f827 	bl	80001c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000172:	f000 f89b 	bl	80002ac <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000176:	f000 f86f 	bl	8000258 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  sprintf(message, "Welcome to lab! Counting = %d\r\n", num);
 800017a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800017e:	1d3b      	adds	r3, r7, #4
 8000180:	490c      	ldr	r1, [pc, #48]	; (80001b4 <main+0x68>)
 8000182:	4618      	mov	r0, r3
 8000184:	f001 fb30 	bl	80017e8 <siprintf>
	  HAL_UART_Transmit(&huart1, message, sizeof(message), 100);
 8000188:	1d39      	adds	r1, r7, #4
 800018a:	2364      	movs	r3, #100	; 0x64
 800018c:	2223      	movs	r2, #35	; 0x23
 800018e:	480a      	ldr	r0, [pc, #40]	; (80001b8 <main+0x6c>)
 8000190:	f001 f9aa 	bl	80014e8 <HAL_UART_Transmit>
	  HAL_Delay(500);
 8000194:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000198:	f000 fa50 	bl	800063c <HAL_Delay>
	  num++;
 800019c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80001a0:	3301      	adds	r3, #1
 80001a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 80001a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001aa:	4804      	ldr	r0, [pc, #16]	; (80001bc <main+0x70>)
 80001ac:	f000 fcea 	bl	8000b84 <HAL_GPIO_TogglePin>
  {
 80001b0:	e7e3      	b.n	800017a <main+0x2e>
 80001b2:	bf00      	nop
 80001b4:	08002164 	.word	0x08002164
 80001b8:	20000078 	.word	0x20000078
 80001bc:	40011000 	.word	0x40011000

080001c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b090      	sub	sp, #64	; 0x40
 80001c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001c6:	f107 0318 	add.w	r3, r7, #24
 80001ca:	2228      	movs	r2, #40	; 0x28
 80001cc:	2100      	movs	r1, #0
 80001ce:	4618      	mov	r0, r3
 80001d0:	f001 fb2a 	bl	8001828 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d4:	1d3b      	adds	r3, r7, #4
 80001d6:	2200      	movs	r2, #0
 80001d8:	601a      	str	r2, [r3, #0]
 80001da:	605a      	str	r2, [r3, #4]
 80001dc:	609a      	str	r2, [r3, #8]
 80001de:	60da      	str	r2, [r3, #12]
 80001e0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001e2:	2301      	movs	r3, #1
 80001e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001ec:	2300      	movs	r3, #0
 80001ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001f0:	2301      	movs	r3, #1
 80001f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001f4:	2302      	movs	r3, #2
 80001f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001fe:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000202:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000204:	f107 0318 	add.w	r3, r7, #24
 8000208:	4618      	mov	r0, r3
 800020a:	f000 fcd5 	bl	8000bb8 <HAL_RCC_OscConfig>
 800020e:	4603      	mov	r3, r0
 8000210:	2b00      	cmp	r3, #0
 8000212:	d001      	beq.n	8000218 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000214:	f000 f8b2 	bl	800037c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000218:	230f      	movs	r3, #15
 800021a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800021c:	2302      	movs	r3, #2
 800021e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000220:	2300      	movs	r3, #0
 8000222:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000224:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000228:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800022a:	2300      	movs	r3, #0
 800022c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800022e:	1d3b      	adds	r3, r7, #4
 8000230:	2102      	movs	r1, #2
 8000232:	4618      	mov	r0, r3
 8000234:	f000 ff42 	bl	80010bc <HAL_RCC_ClockConfig>
 8000238:	4603      	mov	r3, r0
 800023a:	2b00      	cmp	r3, #0
 800023c:	d001      	beq.n	8000242 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800023e:	f000 f89d 	bl	800037c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_1);
 8000242:	2200      	movs	r2, #0
 8000244:	f04f 61e0 	mov.w	r1, #117440512	; 0x7000000
 8000248:	2000      	movs	r0, #0
 800024a:	f001 f821 	bl	8001290 <HAL_RCC_MCOConfig>
}
 800024e:	bf00      	nop
 8000250:	3740      	adds	r7, #64	; 0x40
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}
	...

08000258 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800025c:	4b11      	ldr	r3, [pc, #68]	; (80002a4 <MX_USART1_UART_Init+0x4c>)
 800025e:	4a12      	ldr	r2, [pc, #72]	; (80002a8 <MX_USART1_UART_Init+0x50>)
 8000260:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000262:	4b10      	ldr	r3, [pc, #64]	; (80002a4 <MX_USART1_UART_Init+0x4c>)
 8000264:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000268:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800026a:	4b0e      	ldr	r3, [pc, #56]	; (80002a4 <MX_USART1_UART_Init+0x4c>)
 800026c:	2200      	movs	r2, #0
 800026e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000270:	4b0c      	ldr	r3, [pc, #48]	; (80002a4 <MX_USART1_UART_Init+0x4c>)
 8000272:	2200      	movs	r2, #0
 8000274:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000276:	4b0b      	ldr	r3, [pc, #44]	; (80002a4 <MX_USART1_UART_Init+0x4c>)
 8000278:	2200      	movs	r2, #0
 800027a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800027c:	4b09      	ldr	r3, [pc, #36]	; (80002a4 <MX_USART1_UART_Init+0x4c>)
 800027e:	220c      	movs	r2, #12
 8000280:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000282:	4b08      	ldr	r3, [pc, #32]	; (80002a4 <MX_USART1_UART_Init+0x4c>)
 8000284:	2200      	movs	r2, #0
 8000286:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000288:	4b06      	ldr	r3, [pc, #24]	; (80002a4 <MX_USART1_UART_Init+0x4c>)
 800028a:	2200      	movs	r2, #0
 800028c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800028e:	4805      	ldr	r0, [pc, #20]	; (80002a4 <MX_USART1_UART_Init+0x4c>)
 8000290:	f001 f8da 	bl	8001448 <HAL_UART_Init>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800029a:	f000 f86f 	bl	800037c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800029e:	bf00      	nop
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	20000078 	.word	0x20000078
 80002a8:	40013800 	.word	0x40013800

080002ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b088      	sub	sp, #32
 80002b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002b2:	f107 0310 	add.w	r3, r7, #16
 80002b6:	2200      	movs	r2, #0
 80002b8:	601a      	str	r2, [r3, #0]
 80002ba:	605a      	str	r2, [r3, #4]
 80002bc:	609a      	str	r2, [r3, #8]
 80002be:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002c0:	4b2b      	ldr	r3, [pc, #172]	; (8000370 <MX_GPIO_Init+0xc4>)
 80002c2:	699b      	ldr	r3, [r3, #24]
 80002c4:	4a2a      	ldr	r2, [pc, #168]	; (8000370 <MX_GPIO_Init+0xc4>)
 80002c6:	f043 0310 	orr.w	r3, r3, #16
 80002ca:	6193      	str	r3, [r2, #24]
 80002cc:	4b28      	ldr	r3, [pc, #160]	; (8000370 <MX_GPIO_Init+0xc4>)
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	f003 0310 	and.w	r3, r3, #16
 80002d4:	60fb      	str	r3, [r7, #12]
 80002d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002d8:	4b25      	ldr	r3, [pc, #148]	; (8000370 <MX_GPIO_Init+0xc4>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	4a24      	ldr	r2, [pc, #144]	; (8000370 <MX_GPIO_Init+0xc4>)
 80002de:	f043 0320 	orr.w	r3, r3, #32
 80002e2:	6193      	str	r3, [r2, #24]
 80002e4:	4b22      	ldr	r3, [pc, #136]	; (8000370 <MX_GPIO_Init+0xc4>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	f003 0320 	and.w	r3, r3, #32
 80002ec:	60bb      	str	r3, [r7, #8]
 80002ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002f0:	4b1f      	ldr	r3, [pc, #124]	; (8000370 <MX_GPIO_Init+0xc4>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	4a1e      	ldr	r2, [pc, #120]	; (8000370 <MX_GPIO_Init+0xc4>)
 80002f6:	f043 0304 	orr.w	r3, r3, #4
 80002fa:	6193      	str	r3, [r2, #24]
 80002fc:	4b1c      	ldr	r3, [pc, #112]	; (8000370 <MX_GPIO_Init+0xc4>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	f003 0304 	and.w	r3, r3, #4
 8000304:	607b      	str	r3, [r7, #4]
 8000306:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8000308:	2200      	movs	r2, #0
 800030a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800030e:	4819      	ldr	r0, [pc, #100]	; (8000374 <MX_GPIO_Init+0xc8>)
 8000310:	f000 fc20 	bl	8000b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000314:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000318:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800031a:	2301      	movs	r3, #1
 800031c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800031e:	2300      	movs	r3, #0
 8000320:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000322:	2302      	movs	r3, #2
 8000324:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000326:	f107 0310 	add.w	r3, r7, #16
 800032a:	4619      	mov	r1, r3
 800032c:	4811      	ldr	r0, [pc, #68]	; (8000374 <MX_GPIO_Init+0xc8>)
 800032e:	f000 fa8d 	bl	800084c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000332:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000336:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000338:	2302      	movs	r3, #2
 800033a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800033c:	2302      	movs	r3, #2
 800033e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000340:	f107 0310 	add.w	r3, r7, #16
 8000344:	4619      	mov	r1, r3
 8000346:	480c      	ldr	r0, [pc, #48]	; (8000378 <MX_GPIO_Init+0xcc>)
 8000348:	f000 fa80 	bl	800084c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800034c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000350:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000352:	2302      	movs	r3, #2
 8000354:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000356:	2302      	movs	r3, #2
 8000358:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800035a:	f107 0310 	add.w	r3, r7, #16
 800035e:	4619      	mov	r1, r3
 8000360:	4805      	ldr	r0, [pc, #20]	; (8000378 <MX_GPIO_Init+0xcc>)
 8000362:	f000 fa73 	bl	800084c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000366:	bf00      	nop
 8000368:	3720      	adds	r7, #32
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	40021000 	.word	0x40021000
 8000374:	40011000 	.word	0x40011000
 8000378:	40010800 	.word	0x40010800

0800037c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000380:	b672      	cpsid	i
}
 8000382:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000384:	e7fe      	b.n	8000384 <Error_Handler+0x8>
	...

08000388 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000388:	b480      	push	{r7}
 800038a:	b083      	sub	sp, #12
 800038c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800038e:	4b0e      	ldr	r3, [pc, #56]	; (80003c8 <HAL_MspInit+0x40>)
 8000390:	699b      	ldr	r3, [r3, #24]
 8000392:	4a0d      	ldr	r2, [pc, #52]	; (80003c8 <HAL_MspInit+0x40>)
 8000394:	f043 0301 	orr.w	r3, r3, #1
 8000398:	6193      	str	r3, [r2, #24]
 800039a:	4b0b      	ldr	r3, [pc, #44]	; (80003c8 <HAL_MspInit+0x40>)
 800039c:	699b      	ldr	r3, [r3, #24]
 800039e:	f003 0301 	and.w	r3, r3, #1
 80003a2:	607b      	str	r3, [r7, #4]
 80003a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003a6:	4b08      	ldr	r3, [pc, #32]	; (80003c8 <HAL_MspInit+0x40>)
 80003a8:	69db      	ldr	r3, [r3, #28]
 80003aa:	4a07      	ldr	r2, [pc, #28]	; (80003c8 <HAL_MspInit+0x40>)
 80003ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003b0:	61d3      	str	r3, [r2, #28]
 80003b2:	4b05      	ldr	r3, [pc, #20]	; (80003c8 <HAL_MspInit+0x40>)
 80003b4:	69db      	ldr	r3, [r3, #28]
 80003b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003ba:	603b      	str	r3, [r7, #0]
 80003bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003be:	bf00      	nop
 80003c0:	370c      	adds	r7, #12
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bc80      	pop	{r7}
 80003c6:	4770      	bx	lr
 80003c8:	40021000 	.word	0x40021000

080003cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b088      	sub	sp, #32
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d4:	f107 0310 	add.w	r3, r7, #16
 80003d8:	2200      	movs	r2, #0
 80003da:	601a      	str	r2, [r3, #0]
 80003dc:	605a      	str	r2, [r3, #4]
 80003de:	609a      	str	r2, [r3, #8]
 80003e0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	4a1c      	ldr	r2, [pc, #112]	; (8000458 <HAL_UART_MspInit+0x8c>)
 80003e8:	4293      	cmp	r3, r2
 80003ea:	d131      	bne.n	8000450 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80003ec:	4b1b      	ldr	r3, [pc, #108]	; (800045c <HAL_UART_MspInit+0x90>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	4a1a      	ldr	r2, [pc, #104]	; (800045c <HAL_UART_MspInit+0x90>)
 80003f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003f6:	6193      	str	r3, [r2, #24]
 80003f8:	4b18      	ldr	r3, [pc, #96]	; (800045c <HAL_UART_MspInit+0x90>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000400:	60fb      	str	r3, [r7, #12]
 8000402:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000404:	4b15      	ldr	r3, [pc, #84]	; (800045c <HAL_UART_MspInit+0x90>)
 8000406:	699b      	ldr	r3, [r3, #24]
 8000408:	4a14      	ldr	r2, [pc, #80]	; (800045c <HAL_UART_MspInit+0x90>)
 800040a:	f043 0304 	orr.w	r3, r3, #4
 800040e:	6193      	str	r3, [r2, #24]
 8000410:	4b12      	ldr	r3, [pc, #72]	; (800045c <HAL_UART_MspInit+0x90>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	f003 0304 	and.w	r3, r3, #4
 8000418:	60bb      	str	r3, [r7, #8]
 800041a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800041c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000420:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000422:	2302      	movs	r3, #2
 8000424:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000426:	2303      	movs	r3, #3
 8000428:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800042a:	f107 0310 	add.w	r3, r7, #16
 800042e:	4619      	mov	r1, r3
 8000430:	480b      	ldr	r0, [pc, #44]	; (8000460 <HAL_UART_MspInit+0x94>)
 8000432:	f000 fa0b 	bl	800084c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000436:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800043a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800043c:	2300      	movs	r3, #0
 800043e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000440:	2300      	movs	r3, #0
 8000442:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000444:	f107 0310 	add.w	r3, r7, #16
 8000448:	4619      	mov	r1, r3
 800044a:	4805      	ldr	r0, [pc, #20]	; (8000460 <HAL_UART_MspInit+0x94>)
 800044c:	f000 f9fe 	bl	800084c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000450:	bf00      	nop
 8000452:	3720      	adds	r7, #32
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}
 8000458:	40013800 	.word	0x40013800
 800045c:	40021000 	.word	0x40021000
 8000460:	40010800 	.word	0x40010800

08000464 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000468:	e7fe      	b.n	8000468 <NMI_Handler+0x4>

0800046a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800046a:	b480      	push	{r7}
 800046c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800046e:	e7fe      	b.n	800046e <HardFault_Handler+0x4>

08000470 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000474:	e7fe      	b.n	8000474 <MemManage_Handler+0x4>

08000476 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000476:	b480      	push	{r7}
 8000478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800047a:	e7fe      	b.n	800047a <BusFault_Handler+0x4>

0800047c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000480:	e7fe      	b.n	8000480 <UsageFault_Handler+0x4>

08000482 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000482:	b480      	push	{r7}
 8000484:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000486:	bf00      	nop
 8000488:	46bd      	mov	sp, r7
 800048a:	bc80      	pop	{r7}
 800048c:	4770      	bx	lr

0800048e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800048e:	b480      	push	{r7}
 8000490:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000492:	bf00      	nop
 8000494:	46bd      	mov	sp, r7
 8000496:	bc80      	pop	{r7}
 8000498:	4770      	bx	lr

0800049a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800049a:	b480      	push	{r7}
 800049c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800049e:	bf00      	nop
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bc80      	pop	{r7}
 80004a4:	4770      	bx	lr

080004a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004a6:	b580      	push	{r7, lr}
 80004a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004aa:	f000 f8ab 	bl	8000604 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004ae:	bf00      	nop
 80004b0:	bd80      	pop	{r7, pc}
	...

080004b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b086      	sub	sp, #24
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004bc:	4a14      	ldr	r2, [pc, #80]	; (8000510 <_sbrk+0x5c>)
 80004be:	4b15      	ldr	r3, [pc, #84]	; (8000514 <_sbrk+0x60>)
 80004c0:	1ad3      	subs	r3, r2, r3
 80004c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004c4:	697b      	ldr	r3, [r7, #20]
 80004c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004c8:	4b13      	ldr	r3, [pc, #76]	; (8000518 <_sbrk+0x64>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d102      	bne.n	80004d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004d0:	4b11      	ldr	r3, [pc, #68]	; (8000518 <_sbrk+0x64>)
 80004d2:	4a12      	ldr	r2, [pc, #72]	; (800051c <_sbrk+0x68>)
 80004d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004d6:	4b10      	ldr	r3, [pc, #64]	; (8000518 <_sbrk+0x64>)
 80004d8:	681a      	ldr	r2, [r3, #0]
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	4413      	add	r3, r2
 80004de:	693a      	ldr	r2, [r7, #16]
 80004e0:	429a      	cmp	r2, r3
 80004e2:	d207      	bcs.n	80004f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004e4:	f001 f9a8 	bl	8001838 <__errno>
 80004e8:	4603      	mov	r3, r0
 80004ea:	220c      	movs	r2, #12
 80004ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004ee:	f04f 33ff 	mov.w	r3, #4294967295
 80004f2:	e009      	b.n	8000508 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004f4:	4b08      	ldr	r3, [pc, #32]	; (8000518 <_sbrk+0x64>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004fa:	4b07      	ldr	r3, [pc, #28]	; (8000518 <_sbrk+0x64>)
 80004fc:	681a      	ldr	r2, [r3, #0]
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	4413      	add	r3, r2
 8000502:	4a05      	ldr	r2, [pc, #20]	; (8000518 <_sbrk+0x64>)
 8000504:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000506:	68fb      	ldr	r3, [r7, #12]
}
 8000508:	4618      	mov	r0, r3
 800050a:	3718      	adds	r7, #24
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	20005000 	.word	0x20005000
 8000514:	00000400 	.word	0x00000400
 8000518:	200000c0 	.word	0x200000c0
 800051c:	20000210 	.word	0x20000210

08000520 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000524:	bf00      	nop
 8000526:	46bd      	mov	sp, r7
 8000528:	bc80      	pop	{r7}
 800052a:	4770      	bx	lr

0800052c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800052c:	f7ff fff8 	bl	8000520 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000530:	480b      	ldr	r0, [pc, #44]	; (8000560 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000532:	490c      	ldr	r1, [pc, #48]	; (8000564 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000534:	4a0c      	ldr	r2, [pc, #48]	; (8000568 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000536:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000538:	e002      	b.n	8000540 <LoopCopyDataInit>

0800053a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800053a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800053c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800053e:	3304      	adds	r3, #4

08000540 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000540:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000542:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000544:	d3f9      	bcc.n	800053a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000546:	4a09      	ldr	r2, [pc, #36]	; (800056c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000548:	4c09      	ldr	r4, [pc, #36]	; (8000570 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800054a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800054c:	e001      	b.n	8000552 <LoopFillZerobss>

0800054e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800054e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000550:	3204      	adds	r2, #4

08000552 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000552:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000554:	d3fb      	bcc.n	800054e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000556:	f001 f975 	bl	8001844 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800055a:	f7ff fdf7 	bl	800014c <main>
  bx lr
 800055e:	4770      	bx	lr
  ldr r0, =_sdata
 8000560:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000564:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000568:	080021ec 	.word	0x080021ec
  ldr r2, =_sbss
 800056c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000570:	20000210 	.word	0x20000210

08000574 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000574:	e7fe      	b.n	8000574 <ADC1_2_IRQHandler>
	...

08000578 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800057c:	4b08      	ldr	r3, [pc, #32]	; (80005a0 <HAL_Init+0x28>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a07      	ldr	r2, [pc, #28]	; (80005a0 <HAL_Init+0x28>)
 8000582:	f043 0310 	orr.w	r3, r3, #16
 8000586:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000588:	2003      	movs	r0, #3
 800058a:	f000 f92b 	bl	80007e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800058e:	200f      	movs	r0, #15
 8000590:	f000 f808 	bl	80005a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000594:	f7ff fef8 	bl	8000388 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000598:	2300      	movs	r3, #0
}
 800059a:	4618      	mov	r0, r3
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	40022000 	.word	0x40022000

080005a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005ac:	4b12      	ldr	r3, [pc, #72]	; (80005f8 <HAL_InitTick+0x54>)
 80005ae:	681a      	ldr	r2, [r3, #0]
 80005b0:	4b12      	ldr	r3, [pc, #72]	; (80005fc <HAL_InitTick+0x58>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	4619      	mov	r1, r3
 80005b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80005be:	fbb2 f3f3 	udiv	r3, r2, r3
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 f935 	bl	8000832 <HAL_SYSTICK_Config>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005ce:	2301      	movs	r3, #1
 80005d0:	e00e      	b.n	80005f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	2b0f      	cmp	r3, #15
 80005d6:	d80a      	bhi.n	80005ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005d8:	2200      	movs	r2, #0
 80005da:	6879      	ldr	r1, [r7, #4]
 80005dc:	f04f 30ff 	mov.w	r0, #4294967295
 80005e0:	f000 f90b 	bl	80007fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005e4:	4a06      	ldr	r2, [pc, #24]	; (8000600 <HAL_InitTick+0x5c>)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005ea:	2300      	movs	r3, #0
 80005ec:	e000      	b.n	80005f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005ee:	2301      	movs	r3, #1
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	20000000 	.word	0x20000000
 80005fc:	20000008 	.word	0x20000008
 8000600:	20000004 	.word	0x20000004

08000604 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000608:	4b05      	ldr	r3, [pc, #20]	; (8000620 <HAL_IncTick+0x1c>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	461a      	mov	r2, r3
 800060e:	4b05      	ldr	r3, [pc, #20]	; (8000624 <HAL_IncTick+0x20>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4413      	add	r3, r2
 8000614:	4a03      	ldr	r2, [pc, #12]	; (8000624 <HAL_IncTick+0x20>)
 8000616:	6013      	str	r3, [r2, #0]
}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	bc80      	pop	{r7}
 800061e:	4770      	bx	lr
 8000620:	20000008 	.word	0x20000008
 8000624:	200000c4 	.word	0x200000c4

08000628 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  return uwTick;
 800062c:	4b02      	ldr	r3, [pc, #8]	; (8000638 <HAL_GetTick+0x10>)
 800062e:	681b      	ldr	r3, [r3, #0]
}
 8000630:	4618      	mov	r0, r3
 8000632:	46bd      	mov	sp, r7
 8000634:	bc80      	pop	{r7}
 8000636:	4770      	bx	lr
 8000638:	200000c4 	.word	0x200000c4

0800063c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000644:	f7ff fff0 	bl	8000628 <HAL_GetTick>
 8000648:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000654:	d005      	beq.n	8000662 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000656:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <HAL_Delay+0x44>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	461a      	mov	r2, r3
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	4413      	add	r3, r2
 8000660:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000662:	bf00      	nop
 8000664:	f7ff ffe0 	bl	8000628 <HAL_GetTick>
 8000668:	4602      	mov	r2, r0
 800066a:	68bb      	ldr	r3, [r7, #8]
 800066c:	1ad3      	subs	r3, r2, r3
 800066e:	68fa      	ldr	r2, [r7, #12]
 8000670:	429a      	cmp	r2, r3
 8000672:	d8f7      	bhi.n	8000664 <HAL_Delay+0x28>
  {
  }
}
 8000674:	bf00      	nop
 8000676:	bf00      	nop
 8000678:	3710      	adds	r7, #16
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	20000008 	.word	0x20000008

08000684 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000684:	b480      	push	{r7}
 8000686:	b085      	sub	sp, #20
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	f003 0307 	and.w	r3, r3, #7
 8000692:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000694:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <__NVIC_SetPriorityGrouping+0x44>)
 8000696:	68db      	ldr	r3, [r3, #12]
 8000698:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800069a:	68ba      	ldr	r2, [r7, #8]
 800069c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006a0:	4013      	ands	r3, r2
 80006a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006b6:	4a04      	ldr	r2, [pc, #16]	; (80006c8 <__NVIC_SetPriorityGrouping+0x44>)
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	60d3      	str	r3, [r2, #12]
}
 80006bc:	bf00      	nop
 80006be:	3714      	adds	r7, #20
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bc80      	pop	{r7}
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	e000ed00 	.word	0xe000ed00

080006cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006d0:	4b04      	ldr	r3, [pc, #16]	; (80006e4 <__NVIC_GetPriorityGrouping+0x18>)
 80006d2:	68db      	ldr	r3, [r3, #12]
 80006d4:	0a1b      	lsrs	r3, r3, #8
 80006d6:	f003 0307 	and.w	r3, r3, #7
}
 80006da:	4618      	mov	r0, r3
 80006dc:	46bd      	mov	sp, r7
 80006de:	bc80      	pop	{r7}
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	e000ed00 	.word	0xe000ed00

080006e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	6039      	str	r1, [r7, #0]
 80006f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	db0a      	blt.n	8000712 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	b2da      	uxtb	r2, r3
 8000700:	490c      	ldr	r1, [pc, #48]	; (8000734 <__NVIC_SetPriority+0x4c>)
 8000702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000706:	0112      	lsls	r2, r2, #4
 8000708:	b2d2      	uxtb	r2, r2
 800070a:	440b      	add	r3, r1
 800070c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000710:	e00a      	b.n	8000728 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	b2da      	uxtb	r2, r3
 8000716:	4908      	ldr	r1, [pc, #32]	; (8000738 <__NVIC_SetPriority+0x50>)
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	f003 030f 	and.w	r3, r3, #15
 800071e:	3b04      	subs	r3, #4
 8000720:	0112      	lsls	r2, r2, #4
 8000722:	b2d2      	uxtb	r2, r2
 8000724:	440b      	add	r3, r1
 8000726:	761a      	strb	r2, [r3, #24]
}
 8000728:	bf00      	nop
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	bc80      	pop	{r7}
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	e000e100 	.word	0xe000e100
 8000738:	e000ed00 	.word	0xe000ed00

0800073c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800073c:	b480      	push	{r7}
 800073e:	b089      	sub	sp, #36	; 0x24
 8000740:	af00      	add	r7, sp, #0
 8000742:	60f8      	str	r0, [r7, #12]
 8000744:	60b9      	str	r1, [r7, #8]
 8000746:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	f003 0307 	and.w	r3, r3, #7
 800074e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000750:	69fb      	ldr	r3, [r7, #28]
 8000752:	f1c3 0307 	rsb	r3, r3, #7
 8000756:	2b04      	cmp	r3, #4
 8000758:	bf28      	it	cs
 800075a:	2304      	movcs	r3, #4
 800075c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800075e:	69fb      	ldr	r3, [r7, #28]
 8000760:	3304      	adds	r3, #4
 8000762:	2b06      	cmp	r3, #6
 8000764:	d902      	bls.n	800076c <NVIC_EncodePriority+0x30>
 8000766:	69fb      	ldr	r3, [r7, #28]
 8000768:	3b03      	subs	r3, #3
 800076a:	e000      	b.n	800076e <NVIC_EncodePriority+0x32>
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000770:	f04f 32ff 	mov.w	r2, #4294967295
 8000774:	69bb      	ldr	r3, [r7, #24]
 8000776:	fa02 f303 	lsl.w	r3, r2, r3
 800077a:	43da      	mvns	r2, r3
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	401a      	ands	r2, r3
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000784:	f04f 31ff 	mov.w	r1, #4294967295
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	fa01 f303 	lsl.w	r3, r1, r3
 800078e:	43d9      	mvns	r1, r3
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000794:	4313      	orrs	r3, r2
         );
}
 8000796:	4618      	mov	r0, r3
 8000798:	3724      	adds	r7, #36	; 0x24
 800079a:	46bd      	mov	sp, r7
 800079c:	bc80      	pop	{r7}
 800079e:	4770      	bx	lr

080007a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	3b01      	subs	r3, #1
 80007ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007b0:	d301      	bcc.n	80007b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007b2:	2301      	movs	r3, #1
 80007b4:	e00f      	b.n	80007d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007b6:	4a0a      	ldr	r2, [pc, #40]	; (80007e0 <SysTick_Config+0x40>)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	3b01      	subs	r3, #1
 80007bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007be:	210f      	movs	r1, #15
 80007c0:	f04f 30ff 	mov.w	r0, #4294967295
 80007c4:	f7ff ff90 	bl	80006e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007c8:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <SysTick_Config+0x40>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007ce:	4b04      	ldr	r3, [pc, #16]	; (80007e0 <SysTick_Config+0x40>)
 80007d0:	2207      	movs	r2, #7
 80007d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007d4:	2300      	movs	r3, #0
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	e000e010 	.word	0xe000e010

080007e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007ec:	6878      	ldr	r0, [r7, #4]
 80007ee:	f7ff ff49 	bl	8000684 <__NVIC_SetPriorityGrouping>
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b086      	sub	sp, #24
 80007fe:	af00      	add	r7, sp, #0
 8000800:	4603      	mov	r3, r0
 8000802:	60b9      	str	r1, [r7, #8]
 8000804:	607a      	str	r2, [r7, #4]
 8000806:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800080c:	f7ff ff5e 	bl	80006cc <__NVIC_GetPriorityGrouping>
 8000810:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000812:	687a      	ldr	r2, [r7, #4]
 8000814:	68b9      	ldr	r1, [r7, #8]
 8000816:	6978      	ldr	r0, [r7, #20]
 8000818:	f7ff ff90 	bl	800073c <NVIC_EncodePriority>
 800081c:	4602      	mov	r2, r0
 800081e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000822:	4611      	mov	r1, r2
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff ff5f 	bl	80006e8 <__NVIC_SetPriority>
}
 800082a:	bf00      	nop
 800082c:	3718      	adds	r7, #24
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000832:	b580      	push	{r7, lr}
 8000834:	b082      	sub	sp, #8
 8000836:	af00      	add	r7, sp, #0
 8000838:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800083a:	6878      	ldr	r0, [r7, #4]
 800083c:	f7ff ffb0 	bl	80007a0 <SysTick_Config>
 8000840:	4603      	mov	r3, r0
}
 8000842:	4618      	mov	r0, r3
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
	...

0800084c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800084c:	b480      	push	{r7}
 800084e:	b08b      	sub	sp, #44	; 0x2c
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000856:	2300      	movs	r3, #0
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800085a:	2300      	movs	r3, #0
 800085c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800085e:	e169      	b.n	8000b34 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000860:	2201      	movs	r2, #1
 8000862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000864:	fa02 f303 	lsl.w	r3, r2, r3
 8000868:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	69fa      	ldr	r2, [r7, #28]
 8000870:	4013      	ands	r3, r2
 8000872:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000874:	69ba      	ldr	r2, [r7, #24]
 8000876:	69fb      	ldr	r3, [r7, #28]
 8000878:	429a      	cmp	r2, r3
 800087a:	f040 8158 	bne.w	8000b2e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	685b      	ldr	r3, [r3, #4]
 8000882:	4a9a      	ldr	r2, [pc, #616]	; (8000aec <HAL_GPIO_Init+0x2a0>)
 8000884:	4293      	cmp	r3, r2
 8000886:	d05e      	beq.n	8000946 <HAL_GPIO_Init+0xfa>
 8000888:	4a98      	ldr	r2, [pc, #608]	; (8000aec <HAL_GPIO_Init+0x2a0>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d875      	bhi.n	800097a <HAL_GPIO_Init+0x12e>
 800088e:	4a98      	ldr	r2, [pc, #608]	; (8000af0 <HAL_GPIO_Init+0x2a4>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d058      	beq.n	8000946 <HAL_GPIO_Init+0xfa>
 8000894:	4a96      	ldr	r2, [pc, #600]	; (8000af0 <HAL_GPIO_Init+0x2a4>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d86f      	bhi.n	800097a <HAL_GPIO_Init+0x12e>
 800089a:	4a96      	ldr	r2, [pc, #600]	; (8000af4 <HAL_GPIO_Init+0x2a8>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d052      	beq.n	8000946 <HAL_GPIO_Init+0xfa>
 80008a0:	4a94      	ldr	r2, [pc, #592]	; (8000af4 <HAL_GPIO_Init+0x2a8>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d869      	bhi.n	800097a <HAL_GPIO_Init+0x12e>
 80008a6:	4a94      	ldr	r2, [pc, #592]	; (8000af8 <HAL_GPIO_Init+0x2ac>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d04c      	beq.n	8000946 <HAL_GPIO_Init+0xfa>
 80008ac:	4a92      	ldr	r2, [pc, #584]	; (8000af8 <HAL_GPIO_Init+0x2ac>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d863      	bhi.n	800097a <HAL_GPIO_Init+0x12e>
 80008b2:	4a92      	ldr	r2, [pc, #584]	; (8000afc <HAL_GPIO_Init+0x2b0>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d046      	beq.n	8000946 <HAL_GPIO_Init+0xfa>
 80008b8:	4a90      	ldr	r2, [pc, #576]	; (8000afc <HAL_GPIO_Init+0x2b0>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d85d      	bhi.n	800097a <HAL_GPIO_Init+0x12e>
 80008be:	2b12      	cmp	r3, #18
 80008c0:	d82a      	bhi.n	8000918 <HAL_GPIO_Init+0xcc>
 80008c2:	2b12      	cmp	r3, #18
 80008c4:	d859      	bhi.n	800097a <HAL_GPIO_Init+0x12e>
 80008c6:	a201      	add	r2, pc, #4	; (adr r2, 80008cc <HAL_GPIO_Init+0x80>)
 80008c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008cc:	08000947 	.word	0x08000947
 80008d0:	08000921 	.word	0x08000921
 80008d4:	08000933 	.word	0x08000933
 80008d8:	08000975 	.word	0x08000975
 80008dc:	0800097b 	.word	0x0800097b
 80008e0:	0800097b 	.word	0x0800097b
 80008e4:	0800097b 	.word	0x0800097b
 80008e8:	0800097b 	.word	0x0800097b
 80008ec:	0800097b 	.word	0x0800097b
 80008f0:	0800097b 	.word	0x0800097b
 80008f4:	0800097b 	.word	0x0800097b
 80008f8:	0800097b 	.word	0x0800097b
 80008fc:	0800097b 	.word	0x0800097b
 8000900:	0800097b 	.word	0x0800097b
 8000904:	0800097b 	.word	0x0800097b
 8000908:	0800097b 	.word	0x0800097b
 800090c:	0800097b 	.word	0x0800097b
 8000910:	08000929 	.word	0x08000929
 8000914:	0800093d 	.word	0x0800093d
 8000918:	4a79      	ldr	r2, [pc, #484]	; (8000b00 <HAL_GPIO_Init+0x2b4>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d013      	beq.n	8000946 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800091e:	e02c      	b.n	800097a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	68db      	ldr	r3, [r3, #12]
 8000924:	623b      	str	r3, [r7, #32]
          break;
 8000926:	e029      	b.n	800097c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	68db      	ldr	r3, [r3, #12]
 800092c:	3304      	adds	r3, #4
 800092e:	623b      	str	r3, [r7, #32]
          break;
 8000930:	e024      	b.n	800097c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	68db      	ldr	r3, [r3, #12]
 8000936:	3308      	adds	r3, #8
 8000938:	623b      	str	r3, [r7, #32]
          break;
 800093a:	e01f      	b.n	800097c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	330c      	adds	r3, #12
 8000942:	623b      	str	r3, [r7, #32]
          break;
 8000944:	e01a      	b.n	800097c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	689b      	ldr	r3, [r3, #8]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d102      	bne.n	8000954 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800094e:	2304      	movs	r3, #4
 8000950:	623b      	str	r3, [r7, #32]
          break;
 8000952:	e013      	b.n	800097c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	689b      	ldr	r3, [r3, #8]
 8000958:	2b01      	cmp	r3, #1
 800095a:	d105      	bne.n	8000968 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800095c:	2308      	movs	r3, #8
 800095e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	69fa      	ldr	r2, [r7, #28]
 8000964:	611a      	str	r2, [r3, #16]
          break;
 8000966:	e009      	b.n	800097c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000968:	2308      	movs	r3, #8
 800096a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	69fa      	ldr	r2, [r7, #28]
 8000970:	615a      	str	r2, [r3, #20]
          break;
 8000972:	e003      	b.n	800097c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000974:	2300      	movs	r3, #0
 8000976:	623b      	str	r3, [r7, #32]
          break;
 8000978:	e000      	b.n	800097c <HAL_GPIO_Init+0x130>
          break;
 800097a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800097c:	69bb      	ldr	r3, [r7, #24]
 800097e:	2bff      	cmp	r3, #255	; 0xff
 8000980:	d801      	bhi.n	8000986 <HAL_GPIO_Init+0x13a>
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	e001      	b.n	800098a <HAL_GPIO_Init+0x13e>
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	3304      	adds	r3, #4
 800098a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800098c:	69bb      	ldr	r3, [r7, #24]
 800098e:	2bff      	cmp	r3, #255	; 0xff
 8000990:	d802      	bhi.n	8000998 <HAL_GPIO_Init+0x14c>
 8000992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	e002      	b.n	800099e <HAL_GPIO_Init+0x152>
 8000998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099a:	3b08      	subs	r3, #8
 800099c:	009b      	lsls	r3, r3, #2
 800099e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	210f      	movs	r1, #15
 80009a6:	693b      	ldr	r3, [r7, #16]
 80009a8:	fa01 f303 	lsl.w	r3, r1, r3
 80009ac:	43db      	mvns	r3, r3
 80009ae:	401a      	ands	r2, r3
 80009b0:	6a39      	ldr	r1, [r7, #32]
 80009b2:	693b      	ldr	r3, [r7, #16]
 80009b4:	fa01 f303 	lsl.w	r3, r1, r3
 80009b8:	431a      	orrs	r2, r3
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	f000 80b1 	beq.w	8000b2e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009cc:	4b4d      	ldr	r3, [pc, #308]	; (8000b04 <HAL_GPIO_Init+0x2b8>)
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	4a4c      	ldr	r2, [pc, #304]	; (8000b04 <HAL_GPIO_Init+0x2b8>)
 80009d2:	f043 0301 	orr.w	r3, r3, #1
 80009d6:	6193      	str	r3, [r2, #24]
 80009d8:	4b4a      	ldr	r3, [pc, #296]	; (8000b04 <HAL_GPIO_Init+0x2b8>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	f003 0301 	and.w	r3, r3, #1
 80009e0:	60bb      	str	r3, [r7, #8]
 80009e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80009e4:	4a48      	ldr	r2, [pc, #288]	; (8000b08 <HAL_GPIO_Init+0x2bc>)
 80009e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e8:	089b      	lsrs	r3, r3, #2
 80009ea:	3302      	adds	r3, #2
 80009ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f4:	f003 0303 	and.w	r3, r3, #3
 80009f8:	009b      	lsls	r3, r3, #2
 80009fa:	220f      	movs	r2, #15
 80009fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000a00:	43db      	mvns	r3, r3
 8000a02:	68fa      	ldr	r2, [r7, #12]
 8000a04:	4013      	ands	r3, r2
 8000a06:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	4a40      	ldr	r2, [pc, #256]	; (8000b0c <HAL_GPIO_Init+0x2c0>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d013      	beq.n	8000a38 <HAL_GPIO_Init+0x1ec>
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	4a3f      	ldr	r2, [pc, #252]	; (8000b10 <HAL_GPIO_Init+0x2c4>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d00d      	beq.n	8000a34 <HAL_GPIO_Init+0x1e8>
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4a3e      	ldr	r2, [pc, #248]	; (8000b14 <HAL_GPIO_Init+0x2c8>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d007      	beq.n	8000a30 <HAL_GPIO_Init+0x1e4>
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4a3d      	ldr	r2, [pc, #244]	; (8000b18 <HAL_GPIO_Init+0x2cc>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d101      	bne.n	8000a2c <HAL_GPIO_Init+0x1e0>
 8000a28:	2303      	movs	r3, #3
 8000a2a:	e006      	b.n	8000a3a <HAL_GPIO_Init+0x1ee>
 8000a2c:	2304      	movs	r3, #4
 8000a2e:	e004      	b.n	8000a3a <HAL_GPIO_Init+0x1ee>
 8000a30:	2302      	movs	r3, #2
 8000a32:	e002      	b.n	8000a3a <HAL_GPIO_Init+0x1ee>
 8000a34:	2301      	movs	r3, #1
 8000a36:	e000      	b.n	8000a3a <HAL_GPIO_Init+0x1ee>
 8000a38:	2300      	movs	r3, #0
 8000a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a3c:	f002 0203 	and.w	r2, r2, #3
 8000a40:	0092      	lsls	r2, r2, #2
 8000a42:	4093      	lsls	r3, r2
 8000a44:	68fa      	ldr	r2, [r7, #12]
 8000a46:	4313      	orrs	r3, r2
 8000a48:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a4a:	492f      	ldr	r1, [pc, #188]	; (8000b08 <HAL_GPIO_Init+0x2bc>)
 8000a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a4e:	089b      	lsrs	r3, r3, #2
 8000a50:	3302      	adds	r3, #2
 8000a52:	68fa      	ldr	r2, [r7, #12]
 8000a54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d006      	beq.n	8000a72 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a64:	4b2d      	ldr	r3, [pc, #180]	; (8000b1c <HAL_GPIO_Init+0x2d0>)
 8000a66:	689a      	ldr	r2, [r3, #8]
 8000a68:	492c      	ldr	r1, [pc, #176]	; (8000b1c <HAL_GPIO_Init+0x2d0>)
 8000a6a:	69bb      	ldr	r3, [r7, #24]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	608b      	str	r3, [r1, #8]
 8000a70:	e006      	b.n	8000a80 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a72:	4b2a      	ldr	r3, [pc, #168]	; (8000b1c <HAL_GPIO_Init+0x2d0>)
 8000a74:	689a      	ldr	r2, [r3, #8]
 8000a76:	69bb      	ldr	r3, [r7, #24]
 8000a78:	43db      	mvns	r3, r3
 8000a7a:	4928      	ldr	r1, [pc, #160]	; (8000b1c <HAL_GPIO_Init+0x2d0>)
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d006      	beq.n	8000a9a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a8c:	4b23      	ldr	r3, [pc, #140]	; (8000b1c <HAL_GPIO_Init+0x2d0>)
 8000a8e:	68da      	ldr	r2, [r3, #12]
 8000a90:	4922      	ldr	r1, [pc, #136]	; (8000b1c <HAL_GPIO_Init+0x2d0>)
 8000a92:	69bb      	ldr	r3, [r7, #24]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	60cb      	str	r3, [r1, #12]
 8000a98:	e006      	b.n	8000aa8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a9a:	4b20      	ldr	r3, [pc, #128]	; (8000b1c <HAL_GPIO_Init+0x2d0>)
 8000a9c:	68da      	ldr	r2, [r3, #12]
 8000a9e:	69bb      	ldr	r3, [r7, #24]
 8000aa0:	43db      	mvns	r3, r3
 8000aa2:	491e      	ldr	r1, [pc, #120]	; (8000b1c <HAL_GPIO_Init+0x2d0>)
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d006      	beq.n	8000ac2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ab4:	4b19      	ldr	r3, [pc, #100]	; (8000b1c <HAL_GPIO_Init+0x2d0>)
 8000ab6:	685a      	ldr	r2, [r3, #4]
 8000ab8:	4918      	ldr	r1, [pc, #96]	; (8000b1c <HAL_GPIO_Init+0x2d0>)
 8000aba:	69bb      	ldr	r3, [r7, #24]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	604b      	str	r3, [r1, #4]
 8000ac0:	e006      	b.n	8000ad0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ac2:	4b16      	ldr	r3, [pc, #88]	; (8000b1c <HAL_GPIO_Init+0x2d0>)
 8000ac4:	685a      	ldr	r2, [r3, #4]
 8000ac6:	69bb      	ldr	r3, [r7, #24]
 8000ac8:	43db      	mvns	r3, r3
 8000aca:	4914      	ldr	r1, [pc, #80]	; (8000b1c <HAL_GPIO_Init+0x2d0>)
 8000acc:	4013      	ands	r3, r2
 8000ace:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d021      	beq.n	8000b20 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000adc:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <HAL_GPIO_Init+0x2d0>)
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	490e      	ldr	r1, [pc, #56]	; (8000b1c <HAL_GPIO_Init+0x2d0>)
 8000ae2:	69bb      	ldr	r3, [r7, #24]
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	600b      	str	r3, [r1, #0]
 8000ae8:	e021      	b.n	8000b2e <HAL_GPIO_Init+0x2e2>
 8000aea:	bf00      	nop
 8000aec:	10320000 	.word	0x10320000
 8000af0:	10310000 	.word	0x10310000
 8000af4:	10220000 	.word	0x10220000
 8000af8:	10210000 	.word	0x10210000
 8000afc:	10120000 	.word	0x10120000
 8000b00:	10110000 	.word	0x10110000
 8000b04:	40021000 	.word	0x40021000
 8000b08:	40010000 	.word	0x40010000
 8000b0c:	40010800 	.word	0x40010800
 8000b10:	40010c00 	.word	0x40010c00
 8000b14:	40011000 	.word	0x40011000
 8000b18:	40011400 	.word	0x40011400
 8000b1c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b20:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <HAL_GPIO_Init+0x304>)
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	69bb      	ldr	r3, [r7, #24]
 8000b26:	43db      	mvns	r3, r3
 8000b28:	4909      	ldr	r1, [pc, #36]	; (8000b50 <HAL_GPIO_Init+0x304>)
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b30:	3301      	adds	r3, #1
 8000b32:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	f47f ae8e 	bne.w	8000860 <HAL_GPIO_Init+0x14>
  }
}
 8000b44:	bf00      	nop
 8000b46:	bf00      	nop
 8000b48:	372c      	adds	r7, #44	; 0x2c
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bc80      	pop	{r7}
 8000b4e:	4770      	bx	lr
 8000b50:	40010400 	.word	0x40010400

08000b54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	807b      	strh	r3, [r7, #2]
 8000b60:	4613      	mov	r3, r2
 8000b62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b64:	787b      	ldrb	r3, [r7, #1]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d003      	beq.n	8000b72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b6a:	887a      	ldrh	r2, [r7, #2]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b70:	e003      	b.n	8000b7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b72:	887b      	ldrh	r3, [r7, #2]
 8000b74:	041a      	lsls	r2, r3, #16
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	611a      	str	r2, [r3, #16]
}
 8000b7a:	bf00      	nop
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bc80      	pop	{r7}
 8000b82:	4770      	bx	lr

08000b84 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	460b      	mov	r3, r1
 8000b8e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b96:	887a      	ldrh	r2, [r7, #2]
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	041a      	lsls	r2, r3, #16
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	43d9      	mvns	r1, r3
 8000ba2:	887b      	ldrh	r3, [r7, #2]
 8000ba4:	400b      	ands	r3, r1
 8000ba6:	431a      	orrs	r2, r3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	611a      	str	r2, [r3, #16]
}
 8000bac:	bf00      	nop
 8000bae:	3714      	adds	r7, #20
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bc80      	pop	{r7}
 8000bb4:	4770      	bx	lr
	...

08000bb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d101      	bne.n	8000bca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e272      	b.n	80010b0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	f000 8087 	beq.w	8000ce6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000bd8:	4b92      	ldr	r3, [pc, #584]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	f003 030c 	and.w	r3, r3, #12
 8000be0:	2b04      	cmp	r3, #4
 8000be2:	d00c      	beq.n	8000bfe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000be4:	4b8f      	ldr	r3, [pc, #572]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f003 030c 	and.w	r3, r3, #12
 8000bec:	2b08      	cmp	r3, #8
 8000bee:	d112      	bne.n	8000c16 <HAL_RCC_OscConfig+0x5e>
 8000bf0:	4b8c      	ldr	r3, [pc, #560]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bfc:	d10b      	bne.n	8000c16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bfe:	4b89      	ldr	r3, [pc, #548]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d06c      	beq.n	8000ce4 <HAL_RCC_OscConfig+0x12c>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d168      	bne.n	8000ce4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	e24c      	b.n	80010b0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c1e:	d106      	bne.n	8000c2e <HAL_RCC_OscConfig+0x76>
 8000c20:	4b80      	ldr	r3, [pc, #512]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a7f      	ldr	r2, [pc, #508]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000c26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c2a:	6013      	str	r3, [r2, #0]
 8000c2c:	e02e      	b.n	8000c8c <HAL_RCC_OscConfig+0xd4>
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d10c      	bne.n	8000c50 <HAL_RCC_OscConfig+0x98>
 8000c36:	4b7b      	ldr	r3, [pc, #492]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a7a      	ldr	r2, [pc, #488]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000c3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c40:	6013      	str	r3, [r2, #0]
 8000c42:	4b78      	ldr	r3, [pc, #480]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a77      	ldr	r2, [pc, #476]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000c48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c4c:	6013      	str	r3, [r2, #0]
 8000c4e:	e01d      	b.n	8000c8c <HAL_RCC_OscConfig+0xd4>
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c58:	d10c      	bne.n	8000c74 <HAL_RCC_OscConfig+0xbc>
 8000c5a:	4b72      	ldr	r3, [pc, #456]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a71      	ldr	r2, [pc, #452]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000c60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c64:	6013      	str	r3, [r2, #0]
 8000c66:	4b6f      	ldr	r3, [pc, #444]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a6e      	ldr	r2, [pc, #440]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c70:	6013      	str	r3, [r2, #0]
 8000c72:	e00b      	b.n	8000c8c <HAL_RCC_OscConfig+0xd4>
 8000c74:	4b6b      	ldr	r3, [pc, #428]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a6a      	ldr	r2, [pc, #424]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000c7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c7e:	6013      	str	r3, [r2, #0]
 8000c80:	4b68      	ldr	r3, [pc, #416]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a67      	ldr	r2, [pc, #412]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000c86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d013      	beq.n	8000cbc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c94:	f7ff fcc8 	bl	8000628 <HAL_GetTick>
 8000c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c9a:	e008      	b.n	8000cae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c9c:	f7ff fcc4 	bl	8000628 <HAL_GetTick>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	2b64      	cmp	r3, #100	; 0x64
 8000ca8:	d901      	bls.n	8000cae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000caa:	2303      	movs	r3, #3
 8000cac:	e200      	b.n	80010b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cae:	4b5d      	ldr	r3, [pc, #372]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d0f0      	beq.n	8000c9c <HAL_RCC_OscConfig+0xe4>
 8000cba:	e014      	b.n	8000ce6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cbc:	f7ff fcb4 	bl	8000628 <HAL_GetTick>
 8000cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cc2:	e008      	b.n	8000cd6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cc4:	f7ff fcb0 	bl	8000628 <HAL_GetTick>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	2b64      	cmp	r3, #100	; 0x64
 8000cd0:	d901      	bls.n	8000cd6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	e1ec      	b.n	80010b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cd6:	4b53      	ldr	r3, [pc, #332]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d1f0      	bne.n	8000cc4 <HAL_RCC_OscConfig+0x10c>
 8000ce2:	e000      	b.n	8000ce6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ce4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f003 0302 	and.w	r3, r3, #2
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d063      	beq.n	8000dba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cf2:	4b4c      	ldr	r3, [pc, #304]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f003 030c 	and.w	r3, r3, #12
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d00b      	beq.n	8000d16 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000cfe:	4b49      	ldr	r3, [pc, #292]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f003 030c 	and.w	r3, r3, #12
 8000d06:	2b08      	cmp	r3, #8
 8000d08:	d11c      	bne.n	8000d44 <HAL_RCC_OscConfig+0x18c>
 8000d0a:	4b46      	ldr	r3, [pc, #280]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d116      	bne.n	8000d44 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d16:	4b43      	ldr	r3, [pc, #268]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f003 0302 	and.w	r3, r3, #2
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d005      	beq.n	8000d2e <HAL_RCC_OscConfig+0x176>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	691b      	ldr	r3, [r3, #16]
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d001      	beq.n	8000d2e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e1c0      	b.n	80010b0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d2e:	4b3d      	ldr	r3, [pc, #244]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	695b      	ldr	r3, [r3, #20]
 8000d3a:	00db      	lsls	r3, r3, #3
 8000d3c:	4939      	ldr	r1, [pc, #228]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d42:	e03a      	b.n	8000dba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	691b      	ldr	r3, [r3, #16]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d020      	beq.n	8000d8e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d4c:	4b36      	ldr	r3, [pc, #216]	; (8000e28 <HAL_RCC_OscConfig+0x270>)
 8000d4e:	2201      	movs	r2, #1
 8000d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d52:	f7ff fc69 	bl	8000628 <HAL_GetTick>
 8000d56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d58:	e008      	b.n	8000d6c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d5a:	f7ff fc65 	bl	8000628 <HAL_GetTick>
 8000d5e:	4602      	mov	r2, r0
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	1ad3      	subs	r3, r2, r3
 8000d64:	2b02      	cmp	r3, #2
 8000d66:	d901      	bls.n	8000d6c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d68:	2303      	movs	r3, #3
 8000d6a:	e1a1      	b.n	80010b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d6c:	4b2d      	ldr	r3, [pc, #180]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f003 0302 	and.w	r3, r3, #2
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d0f0      	beq.n	8000d5a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d78:	4b2a      	ldr	r3, [pc, #168]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	695b      	ldr	r3, [r3, #20]
 8000d84:	00db      	lsls	r3, r3, #3
 8000d86:	4927      	ldr	r1, [pc, #156]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	600b      	str	r3, [r1, #0]
 8000d8c:	e015      	b.n	8000dba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d8e:	4b26      	ldr	r3, [pc, #152]	; (8000e28 <HAL_RCC_OscConfig+0x270>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d94:	f7ff fc48 	bl	8000628 <HAL_GetTick>
 8000d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d9a:	e008      	b.n	8000dae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d9c:	f7ff fc44 	bl	8000628 <HAL_GetTick>
 8000da0:	4602      	mov	r2, r0
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	2b02      	cmp	r3, #2
 8000da8:	d901      	bls.n	8000dae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000daa:	2303      	movs	r3, #3
 8000dac:	e180      	b.n	80010b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dae:	4b1d      	ldr	r3, [pc, #116]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f003 0302 	and.w	r3, r3, #2
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d1f0      	bne.n	8000d9c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f003 0308 	and.w	r3, r3, #8
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d03a      	beq.n	8000e3c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	699b      	ldr	r3, [r3, #24]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d019      	beq.n	8000e02 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dce:	4b17      	ldr	r3, [pc, #92]	; (8000e2c <HAL_RCC_OscConfig+0x274>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dd4:	f7ff fc28 	bl	8000628 <HAL_GetTick>
 8000dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dda:	e008      	b.n	8000dee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ddc:	f7ff fc24 	bl	8000628 <HAL_GetTick>
 8000de0:	4602      	mov	r2, r0
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	2b02      	cmp	r3, #2
 8000de8:	d901      	bls.n	8000dee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000dea:	2303      	movs	r3, #3
 8000dec:	e160      	b.n	80010b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dee:	4b0d      	ldr	r3, [pc, #52]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df2:	f003 0302 	and.w	r3, r3, #2
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d0f0      	beq.n	8000ddc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000dfa:	2001      	movs	r0, #1
 8000dfc:	f000 fb06 	bl	800140c <RCC_Delay>
 8000e00:	e01c      	b.n	8000e3c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e02:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <HAL_RCC_OscConfig+0x274>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e08:	f7ff fc0e 	bl	8000628 <HAL_GetTick>
 8000e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e0e:	e00f      	b.n	8000e30 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e10:	f7ff fc0a 	bl	8000628 <HAL_GetTick>
 8000e14:	4602      	mov	r2, r0
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	d908      	bls.n	8000e30 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	e146      	b.n	80010b0 <HAL_RCC_OscConfig+0x4f8>
 8000e22:	bf00      	nop
 8000e24:	40021000 	.word	0x40021000
 8000e28:	42420000 	.word	0x42420000
 8000e2c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e30:	4b92      	ldr	r3, [pc, #584]	; (800107c <HAL_RCC_OscConfig+0x4c4>)
 8000e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e34:	f003 0302 	and.w	r3, r3, #2
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d1e9      	bne.n	8000e10 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f003 0304 	and.w	r3, r3, #4
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	f000 80a6 	beq.w	8000f96 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e4e:	4b8b      	ldr	r3, [pc, #556]	; (800107c <HAL_RCC_OscConfig+0x4c4>)
 8000e50:	69db      	ldr	r3, [r3, #28]
 8000e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d10d      	bne.n	8000e76 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e5a:	4b88      	ldr	r3, [pc, #544]	; (800107c <HAL_RCC_OscConfig+0x4c4>)
 8000e5c:	69db      	ldr	r3, [r3, #28]
 8000e5e:	4a87      	ldr	r2, [pc, #540]	; (800107c <HAL_RCC_OscConfig+0x4c4>)
 8000e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e64:	61d3      	str	r3, [r2, #28]
 8000e66:	4b85      	ldr	r3, [pc, #532]	; (800107c <HAL_RCC_OscConfig+0x4c4>)
 8000e68:	69db      	ldr	r3, [r3, #28]
 8000e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e6e:	60bb      	str	r3, [r7, #8]
 8000e70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e72:	2301      	movs	r3, #1
 8000e74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e76:	4b82      	ldr	r3, [pc, #520]	; (8001080 <HAL_RCC_OscConfig+0x4c8>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d118      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e82:	4b7f      	ldr	r3, [pc, #508]	; (8001080 <HAL_RCC_OscConfig+0x4c8>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a7e      	ldr	r2, [pc, #504]	; (8001080 <HAL_RCC_OscConfig+0x4c8>)
 8000e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e8e:	f7ff fbcb 	bl	8000628 <HAL_GetTick>
 8000e92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e94:	e008      	b.n	8000ea8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e96:	f7ff fbc7 	bl	8000628 <HAL_GetTick>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	1ad3      	subs	r3, r2, r3
 8000ea0:	2b64      	cmp	r3, #100	; 0x64
 8000ea2:	d901      	bls.n	8000ea8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	e103      	b.n	80010b0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ea8:	4b75      	ldr	r3, [pc, #468]	; (8001080 <HAL_RCC_OscConfig+0x4c8>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d0f0      	beq.n	8000e96 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d106      	bne.n	8000eca <HAL_RCC_OscConfig+0x312>
 8000ebc:	4b6f      	ldr	r3, [pc, #444]	; (800107c <HAL_RCC_OscConfig+0x4c4>)
 8000ebe:	6a1b      	ldr	r3, [r3, #32]
 8000ec0:	4a6e      	ldr	r2, [pc, #440]	; (800107c <HAL_RCC_OscConfig+0x4c4>)
 8000ec2:	f043 0301 	orr.w	r3, r3, #1
 8000ec6:	6213      	str	r3, [r2, #32]
 8000ec8:	e02d      	b.n	8000f26 <HAL_RCC_OscConfig+0x36e>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	68db      	ldr	r3, [r3, #12]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d10c      	bne.n	8000eec <HAL_RCC_OscConfig+0x334>
 8000ed2:	4b6a      	ldr	r3, [pc, #424]	; (800107c <HAL_RCC_OscConfig+0x4c4>)
 8000ed4:	6a1b      	ldr	r3, [r3, #32]
 8000ed6:	4a69      	ldr	r2, [pc, #420]	; (800107c <HAL_RCC_OscConfig+0x4c4>)
 8000ed8:	f023 0301 	bic.w	r3, r3, #1
 8000edc:	6213      	str	r3, [r2, #32]
 8000ede:	4b67      	ldr	r3, [pc, #412]	; (800107c <HAL_RCC_OscConfig+0x4c4>)
 8000ee0:	6a1b      	ldr	r3, [r3, #32]
 8000ee2:	4a66      	ldr	r2, [pc, #408]	; (800107c <HAL_RCC_OscConfig+0x4c4>)
 8000ee4:	f023 0304 	bic.w	r3, r3, #4
 8000ee8:	6213      	str	r3, [r2, #32]
 8000eea:	e01c      	b.n	8000f26 <HAL_RCC_OscConfig+0x36e>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	2b05      	cmp	r3, #5
 8000ef2:	d10c      	bne.n	8000f0e <HAL_RCC_OscConfig+0x356>
 8000ef4:	4b61      	ldr	r3, [pc, #388]	; (800107c <HAL_RCC_OscConfig+0x4c4>)
 8000ef6:	6a1b      	ldr	r3, [r3, #32]
 8000ef8:	4a60      	ldr	r2, [pc, #384]	; (800107c <HAL_RCC_OscConfig+0x4c4>)
 8000efa:	f043 0304 	orr.w	r3, r3, #4
 8000efe:	6213      	str	r3, [r2, #32]
 8000f00:	4b5e      	ldr	r3, [pc, #376]	; (800107c <HAL_RCC_OscConfig+0x4c4>)
 8000f02:	6a1b      	ldr	r3, [r3, #32]
 8000f04:	4a5d      	ldr	r2, [pc, #372]	; (800107c <HAL_RCC_OscConfig+0x4c4>)
 8000f06:	f043 0301 	orr.w	r3, r3, #1
 8000f0a:	6213      	str	r3, [r2, #32]
 8000f0c:	e00b      	b.n	8000f26 <HAL_RCC_OscConfig+0x36e>
 8000f0e:	4b5b      	ldr	r3, [pc, #364]	; (800107c <HAL_RCC_OscConfig+0x4c4>)
 8000f10:	6a1b      	ldr	r3, [r3, #32]
 8000f12:	4a5a      	ldr	r2, [pc, #360]	; (800107c <HAL_RCC_OscConfig+0x4c4>)
 8000f14:	f023 0301 	bic.w	r3, r3, #1
 8000f18:	6213      	str	r3, [r2, #32]
 8000f1a:	4b58      	ldr	r3, [pc, #352]	; (800107c <HAL_RCC_OscConfig+0x4c4>)
 8000f1c:	6a1b      	ldr	r3, [r3, #32]
 8000f1e:	4a57      	ldr	r2, [pc, #348]	; (800107c <HAL_RCC_OscConfig+0x4c4>)
 8000f20:	f023 0304 	bic.w	r3, r3, #4
 8000f24:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	68db      	ldr	r3, [r3, #12]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d015      	beq.n	8000f5a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f2e:	f7ff fb7b 	bl	8000628 <HAL_GetTick>
 8000f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f34:	e00a      	b.n	8000f4c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f36:	f7ff fb77 	bl	8000628 <HAL_GetTick>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d901      	bls.n	8000f4c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	e0b1      	b.n	80010b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f4c:	4b4b      	ldr	r3, [pc, #300]	; (800107c <HAL_RCC_OscConfig+0x4c4>)
 8000f4e:	6a1b      	ldr	r3, [r3, #32]
 8000f50:	f003 0302 	and.w	r3, r3, #2
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d0ee      	beq.n	8000f36 <HAL_RCC_OscConfig+0x37e>
 8000f58:	e014      	b.n	8000f84 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f5a:	f7ff fb65 	bl	8000628 <HAL_GetTick>
 8000f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f60:	e00a      	b.n	8000f78 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f62:	f7ff fb61 	bl	8000628 <HAL_GetTick>
 8000f66:	4602      	mov	r2, r0
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	1ad3      	subs	r3, r2, r3
 8000f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d901      	bls.n	8000f78 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f74:	2303      	movs	r3, #3
 8000f76:	e09b      	b.n	80010b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f78:	4b40      	ldr	r3, [pc, #256]	; (800107c <HAL_RCC_OscConfig+0x4c4>)
 8000f7a:	6a1b      	ldr	r3, [r3, #32]
 8000f7c:	f003 0302 	and.w	r3, r3, #2
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d1ee      	bne.n	8000f62 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f84:	7dfb      	ldrb	r3, [r7, #23]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d105      	bne.n	8000f96 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f8a:	4b3c      	ldr	r3, [pc, #240]	; (800107c <HAL_RCC_OscConfig+0x4c4>)
 8000f8c:	69db      	ldr	r3, [r3, #28]
 8000f8e:	4a3b      	ldr	r2, [pc, #236]	; (800107c <HAL_RCC_OscConfig+0x4c4>)
 8000f90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f94:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	f000 8087 	beq.w	80010ae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fa0:	4b36      	ldr	r3, [pc, #216]	; (800107c <HAL_RCC_OscConfig+0x4c4>)
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f003 030c 	and.w	r3, r3, #12
 8000fa8:	2b08      	cmp	r3, #8
 8000faa:	d061      	beq.n	8001070 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	69db      	ldr	r3, [r3, #28]
 8000fb0:	2b02      	cmp	r3, #2
 8000fb2:	d146      	bne.n	8001042 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fb4:	4b33      	ldr	r3, [pc, #204]	; (8001084 <HAL_RCC_OscConfig+0x4cc>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fba:	f7ff fb35 	bl	8000628 <HAL_GetTick>
 8000fbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fc0:	e008      	b.n	8000fd4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fc2:	f7ff fb31 	bl	8000628 <HAL_GetTick>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d901      	bls.n	8000fd4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	e06d      	b.n	80010b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fd4:	4b29      	ldr	r3, [pc, #164]	; (800107c <HAL_RCC_OscConfig+0x4c4>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d1f0      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6a1b      	ldr	r3, [r3, #32]
 8000fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fe8:	d108      	bne.n	8000ffc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000fea:	4b24      	ldr	r3, [pc, #144]	; (800107c <HAL_RCC_OscConfig+0x4c4>)
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	4921      	ldr	r1, [pc, #132]	; (800107c <HAL_RCC_OscConfig+0x4c4>)
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ffc:	4b1f      	ldr	r3, [pc, #124]	; (800107c <HAL_RCC_OscConfig+0x4c4>)
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6a19      	ldr	r1, [r3, #32]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800100c:	430b      	orrs	r3, r1
 800100e:	491b      	ldr	r1, [pc, #108]	; (800107c <HAL_RCC_OscConfig+0x4c4>)
 8001010:	4313      	orrs	r3, r2
 8001012:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001014:	4b1b      	ldr	r3, [pc, #108]	; (8001084 <HAL_RCC_OscConfig+0x4cc>)
 8001016:	2201      	movs	r2, #1
 8001018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800101a:	f7ff fb05 	bl	8000628 <HAL_GetTick>
 800101e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001020:	e008      	b.n	8001034 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001022:	f7ff fb01 	bl	8000628 <HAL_GetTick>
 8001026:	4602      	mov	r2, r0
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	2b02      	cmp	r3, #2
 800102e:	d901      	bls.n	8001034 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001030:	2303      	movs	r3, #3
 8001032:	e03d      	b.n	80010b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001034:	4b11      	ldr	r3, [pc, #68]	; (800107c <HAL_RCC_OscConfig+0x4c4>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d0f0      	beq.n	8001022 <HAL_RCC_OscConfig+0x46a>
 8001040:	e035      	b.n	80010ae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001042:	4b10      	ldr	r3, [pc, #64]	; (8001084 <HAL_RCC_OscConfig+0x4cc>)
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001048:	f7ff faee 	bl	8000628 <HAL_GetTick>
 800104c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800104e:	e008      	b.n	8001062 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001050:	f7ff faea 	bl	8000628 <HAL_GetTick>
 8001054:	4602      	mov	r2, r0
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	2b02      	cmp	r3, #2
 800105c:	d901      	bls.n	8001062 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800105e:	2303      	movs	r3, #3
 8001060:	e026      	b.n	80010b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001062:	4b06      	ldr	r3, [pc, #24]	; (800107c <HAL_RCC_OscConfig+0x4c4>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d1f0      	bne.n	8001050 <HAL_RCC_OscConfig+0x498>
 800106e:	e01e      	b.n	80010ae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	69db      	ldr	r3, [r3, #28]
 8001074:	2b01      	cmp	r3, #1
 8001076:	d107      	bne.n	8001088 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	e019      	b.n	80010b0 <HAL_RCC_OscConfig+0x4f8>
 800107c:	40021000 	.word	0x40021000
 8001080:	40007000 	.word	0x40007000
 8001084:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001088:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <HAL_RCC_OscConfig+0x500>)
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6a1b      	ldr	r3, [r3, #32]
 8001098:	429a      	cmp	r2, r3
 800109a:	d106      	bne.n	80010aa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d001      	beq.n	80010ae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e000      	b.n	80010b0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80010ae:	2300      	movs	r3, #0
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3718      	adds	r7, #24
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40021000 	.word	0x40021000

080010bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d101      	bne.n	80010d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010cc:	2301      	movs	r3, #1
 80010ce:	e0d0      	b.n	8001272 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010d0:	4b6a      	ldr	r3, [pc, #424]	; (800127c <HAL_RCC_ClockConfig+0x1c0>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 0307 	and.w	r3, r3, #7
 80010d8:	683a      	ldr	r2, [r7, #0]
 80010da:	429a      	cmp	r2, r3
 80010dc:	d910      	bls.n	8001100 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010de:	4b67      	ldr	r3, [pc, #412]	; (800127c <HAL_RCC_ClockConfig+0x1c0>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f023 0207 	bic.w	r2, r3, #7
 80010e6:	4965      	ldr	r1, [pc, #404]	; (800127c <HAL_RCC_ClockConfig+0x1c0>)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010ee:	4b63      	ldr	r3, [pc, #396]	; (800127c <HAL_RCC_ClockConfig+0x1c0>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	683a      	ldr	r2, [r7, #0]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d001      	beq.n	8001100 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80010fc:	2301      	movs	r3, #1
 80010fe:	e0b8      	b.n	8001272 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f003 0302 	and.w	r3, r3, #2
 8001108:	2b00      	cmp	r3, #0
 800110a:	d020      	beq.n	800114e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 0304 	and.w	r3, r3, #4
 8001114:	2b00      	cmp	r3, #0
 8001116:	d005      	beq.n	8001124 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001118:	4b59      	ldr	r3, [pc, #356]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	4a58      	ldr	r2, [pc, #352]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 800111e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001122:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 0308 	and.w	r3, r3, #8
 800112c:	2b00      	cmp	r3, #0
 800112e:	d005      	beq.n	800113c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001130:	4b53      	ldr	r3, [pc, #332]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	4a52      	ldr	r2, [pc, #328]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 8001136:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800113a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800113c:	4b50      	ldr	r3, [pc, #320]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	494d      	ldr	r1, [pc, #308]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 800114a:	4313      	orrs	r3, r2
 800114c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	2b00      	cmp	r3, #0
 8001158:	d040      	beq.n	80011dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d107      	bne.n	8001172 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001162:	4b47      	ldr	r3, [pc, #284]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d115      	bne.n	800119a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e07f      	b.n	8001272 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	2b02      	cmp	r3, #2
 8001178:	d107      	bne.n	800118a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800117a:	4b41      	ldr	r3, [pc, #260]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d109      	bne.n	800119a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e073      	b.n	8001272 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800118a:	4b3d      	ldr	r3, [pc, #244]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 0302 	and.w	r3, r3, #2
 8001192:	2b00      	cmp	r3, #0
 8001194:	d101      	bne.n	800119a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e06b      	b.n	8001272 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800119a:	4b39      	ldr	r3, [pc, #228]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f023 0203 	bic.w	r2, r3, #3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	4936      	ldr	r1, [pc, #216]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 80011a8:	4313      	orrs	r3, r2
 80011aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011ac:	f7ff fa3c 	bl	8000628 <HAL_GetTick>
 80011b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011b2:	e00a      	b.n	80011ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011b4:	f7ff fa38 	bl	8000628 <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	f241 3288 	movw	r2, #5000	; 0x1388
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d901      	bls.n	80011ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e053      	b.n	8001272 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011ca:	4b2d      	ldr	r3, [pc, #180]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f003 020c 	and.w	r2, r3, #12
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	429a      	cmp	r2, r3
 80011da:	d1eb      	bne.n	80011b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011dc:	4b27      	ldr	r3, [pc, #156]	; (800127c <HAL_RCC_ClockConfig+0x1c0>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 0307 	and.w	r3, r3, #7
 80011e4:	683a      	ldr	r2, [r7, #0]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d210      	bcs.n	800120c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ea:	4b24      	ldr	r3, [pc, #144]	; (800127c <HAL_RCC_ClockConfig+0x1c0>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f023 0207 	bic.w	r2, r3, #7
 80011f2:	4922      	ldr	r1, [pc, #136]	; (800127c <HAL_RCC_ClockConfig+0x1c0>)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011fa:	4b20      	ldr	r3, [pc, #128]	; (800127c <HAL_RCC_ClockConfig+0x1c0>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0307 	and.w	r3, r3, #7
 8001202:	683a      	ldr	r2, [r7, #0]
 8001204:	429a      	cmp	r2, r3
 8001206:	d001      	beq.n	800120c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e032      	b.n	8001272 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0304 	and.w	r3, r3, #4
 8001214:	2b00      	cmp	r3, #0
 8001216:	d008      	beq.n	800122a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001218:	4b19      	ldr	r3, [pc, #100]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	4916      	ldr	r1, [pc, #88]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 8001226:	4313      	orrs	r3, r2
 8001228:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0308 	and.w	r3, r3, #8
 8001232:	2b00      	cmp	r3, #0
 8001234:	d009      	beq.n	800124a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001236:	4b12      	ldr	r3, [pc, #72]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	691b      	ldr	r3, [r3, #16]
 8001242:	00db      	lsls	r3, r3, #3
 8001244:	490e      	ldr	r1, [pc, #56]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 8001246:	4313      	orrs	r3, r2
 8001248:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800124a:	f000 f859 	bl	8001300 <HAL_RCC_GetSysClockFreq>
 800124e:	4602      	mov	r2, r0
 8001250:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	091b      	lsrs	r3, r3, #4
 8001256:	f003 030f 	and.w	r3, r3, #15
 800125a:	490a      	ldr	r1, [pc, #40]	; (8001284 <HAL_RCC_ClockConfig+0x1c8>)
 800125c:	5ccb      	ldrb	r3, [r1, r3]
 800125e:	fa22 f303 	lsr.w	r3, r2, r3
 8001262:	4a09      	ldr	r2, [pc, #36]	; (8001288 <HAL_RCC_ClockConfig+0x1cc>)
 8001264:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001266:	4b09      	ldr	r3, [pc, #36]	; (800128c <HAL_RCC_ClockConfig+0x1d0>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff f99a 	bl	80005a4 <HAL_InitTick>

  return HAL_OK;
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40022000 	.word	0x40022000
 8001280:	40021000 	.word	0x40021000
 8001284:	08002184 	.word	0x08002184
 8001288:	20000000 	.word	0x20000000
 800128c:	20000004 	.word	0x20000004

08001290 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08a      	sub	sp, #40	; 0x28
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 800129c:	f107 0318 	add.w	r3, r7, #24
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 80012aa:	2302      	movs	r3, #2
 80012ac:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 80012ae:	2303      	movs	r3, #3
 80012b0:	627b      	str	r3, [r7, #36]	; 0x24
  gpio.Pull      = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 80012b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012ba:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 80012bc:	4b0e      	ldr	r3, [pc, #56]	; (80012f8 <HAL_RCC_MCOConfig+0x68>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	4a0d      	ldr	r2, [pc, #52]	; (80012f8 <HAL_RCC_MCOConfig+0x68>)
 80012c2:	f043 0304 	orr.w	r3, r3, #4
 80012c6:	6193      	str	r3, [r2, #24]
 80012c8:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <HAL_RCC_MCOConfig+0x68>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	f003 0304 	and.w	r3, r3, #4
 80012d0:	617b      	str	r3, [r7, #20]
 80012d2:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 80012d4:	f107 0318 	add.w	r3, r7, #24
 80012d8:	4619      	mov	r1, r3
 80012da:	4808      	ldr	r0, [pc, #32]	; (80012fc <HAL_RCC_MCOConfig+0x6c>)
 80012dc:	f7ff fab6 	bl	800084c <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 80012e0:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <HAL_RCC_MCOConfig+0x68>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80012e8:	4903      	ldr	r1, [pc, #12]	; (80012f8 <HAL_RCC_MCOConfig+0x68>)
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	604b      	str	r3, [r1, #4]
}
 80012f0:	bf00      	nop
 80012f2:	3728      	adds	r7, #40	; 0x28
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40021000 	.word	0x40021000
 80012fc:	40010800 	.word	0x40010800

08001300 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001300:	b480      	push	{r7}
 8001302:	b087      	sub	sp, #28
 8001304:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	2300      	movs	r3, #0
 800130c:	60bb      	str	r3, [r7, #8]
 800130e:	2300      	movs	r3, #0
 8001310:	617b      	str	r3, [r7, #20]
 8001312:	2300      	movs	r3, #0
 8001314:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001316:	2300      	movs	r3, #0
 8001318:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800131a:	4b1e      	ldr	r3, [pc, #120]	; (8001394 <HAL_RCC_GetSysClockFreq+0x94>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f003 030c 	and.w	r3, r3, #12
 8001326:	2b04      	cmp	r3, #4
 8001328:	d002      	beq.n	8001330 <HAL_RCC_GetSysClockFreq+0x30>
 800132a:	2b08      	cmp	r3, #8
 800132c:	d003      	beq.n	8001336 <HAL_RCC_GetSysClockFreq+0x36>
 800132e:	e027      	b.n	8001380 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001330:	4b19      	ldr	r3, [pc, #100]	; (8001398 <HAL_RCC_GetSysClockFreq+0x98>)
 8001332:	613b      	str	r3, [r7, #16]
      break;
 8001334:	e027      	b.n	8001386 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	0c9b      	lsrs	r3, r3, #18
 800133a:	f003 030f 	and.w	r3, r3, #15
 800133e:	4a17      	ldr	r2, [pc, #92]	; (800139c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001340:	5cd3      	ldrb	r3, [r2, r3]
 8001342:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d010      	beq.n	8001370 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800134e:	4b11      	ldr	r3, [pc, #68]	; (8001394 <HAL_RCC_GetSysClockFreq+0x94>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	0c5b      	lsrs	r3, r3, #17
 8001354:	f003 0301 	and.w	r3, r3, #1
 8001358:	4a11      	ldr	r2, [pc, #68]	; (80013a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800135a:	5cd3      	ldrb	r3, [r2, r3]
 800135c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a0d      	ldr	r2, [pc, #52]	; (8001398 <HAL_RCC_GetSysClockFreq+0x98>)
 8001362:	fb03 f202 	mul.w	r2, r3, r2
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	fbb2 f3f3 	udiv	r3, r2, r3
 800136c:	617b      	str	r3, [r7, #20]
 800136e:	e004      	b.n	800137a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	4a0c      	ldr	r2, [pc, #48]	; (80013a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001374:	fb02 f303 	mul.w	r3, r2, r3
 8001378:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	613b      	str	r3, [r7, #16]
      break;
 800137e:	e002      	b.n	8001386 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001380:	4b05      	ldr	r3, [pc, #20]	; (8001398 <HAL_RCC_GetSysClockFreq+0x98>)
 8001382:	613b      	str	r3, [r7, #16]
      break;
 8001384:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001386:	693b      	ldr	r3, [r7, #16]
}
 8001388:	4618      	mov	r0, r3
 800138a:	371c      	adds	r7, #28
 800138c:	46bd      	mov	sp, r7
 800138e:	bc80      	pop	{r7}
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	40021000 	.word	0x40021000
 8001398:	007a1200 	.word	0x007a1200
 800139c:	0800219c 	.word	0x0800219c
 80013a0:	080021ac 	.word	0x080021ac
 80013a4:	003d0900 	.word	0x003d0900

080013a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013ac:	4b02      	ldr	r3, [pc, #8]	; (80013b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80013ae:	681b      	ldr	r3, [r3, #0]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc80      	pop	{r7}
 80013b6:	4770      	bx	lr
 80013b8:	20000000 	.word	0x20000000

080013bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80013c0:	f7ff fff2 	bl	80013a8 <HAL_RCC_GetHCLKFreq>
 80013c4:	4602      	mov	r2, r0
 80013c6:	4b05      	ldr	r3, [pc, #20]	; (80013dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	0a1b      	lsrs	r3, r3, #8
 80013cc:	f003 0307 	and.w	r3, r3, #7
 80013d0:	4903      	ldr	r1, [pc, #12]	; (80013e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80013d2:	5ccb      	ldrb	r3, [r1, r3]
 80013d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013d8:	4618      	mov	r0, r3
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40021000 	.word	0x40021000
 80013e0:	08002194 	.word	0x08002194

080013e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80013e8:	f7ff ffde 	bl	80013a8 <HAL_RCC_GetHCLKFreq>
 80013ec:	4602      	mov	r2, r0
 80013ee:	4b05      	ldr	r3, [pc, #20]	; (8001404 <HAL_RCC_GetPCLK2Freq+0x20>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	0adb      	lsrs	r3, r3, #11
 80013f4:	f003 0307 	and.w	r3, r3, #7
 80013f8:	4903      	ldr	r1, [pc, #12]	; (8001408 <HAL_RCC_GetPCLK2Freq+0x24>)
 80013fa:	5ccb      	ldrb	r3, [r1, r3]
 80013fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001400:	4618      	mov	r0, r3
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40021000 	.word	0x40021000
 8001408:	08002194 	.word	0x08002194

0800140c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001414:	4b0a      	ldr	r3, [pc, #40]	; (8001440 <RCC_Delay+0x34>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a0a      	ldr	r2, [pc, #40]	; (8001444 <RCC_Delay+0x38>)
 800141a:	fba2 2303 	umull	r2, r3, r2, r3
 800141e:	0a5b      	lsrs	r3, r3, #9
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	fb02 f303 	mul.w	r3, r2, r3
 8001426:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001428:	bf00      	nop
  }
  while (Delay --);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	1e5a      	subs	r2, r3, #1
 800142e:	60fa      	str	r2, [r7, #12]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d1f9      	bne.n	8001428 <RCC_Delay+0x1c>
}
 8001434:	bf00      	nop
 8001436:	bf00      	nop
 8001438:	3714      	adds	r7, #20
 800143a:	46bd      	mov	sp, r7
 800143c:	bc80      	pop	{r7}
 800143e:	4770      	bx	lr
 8001440:	20000000 	.word	0x20000000
 8001444:	10624dd3 	.word	0x10624dd3

08001448 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d101      	bne.n	800145a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e042      	b.n	80014e0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001460:	b2db      	uxtb	r3, r3
 8001462:	2b00      	cmp	r3, #0
 8001464:	d106      	bne.n	8001474 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2200      	movs	r2, #0
 800146a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7fe ffac 	bl	80003cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2224      	movs	r2, #36	; 0x24
 8001478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	68da      	ldr	r2, [r3, #12]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800148a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f000 f91d 	bl	80016cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	691a      	ldr	r2, [r3, #16]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80014a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	695a      	ldr	r2, [r3, #20]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80014b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	68da      	ldr	r2, [r3, #12]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80014c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2220      	movs	r2, #32
 80014cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2220      	movs	r2, #32
 80014d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2200      	movs	r2, #0
 80014dc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80014de:	2300      	movs	r3, #0
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08a      	sub	sp, #40	; 0x28
 80014ec:	af02      	add	r7, sp, #8
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	603b      	str	r3, [r7, #0]
 80014f4:	4613      	mov	r3, r2
 80014f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80014f8:	2300      	movs	r3, #0
 80014fa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001502:	b2db      	uxtb	r3, r3
 8001504:	2b20      	cmp	r3, #32
 8001506:	d16d      	bne.n	80015e4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d002      	beq.n	8001514 <HAL_UART_Transmit+0x2c>
 800150e:	88fb      	ldrh	r3, [r7, #6]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d101      	bne.n	8001518 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e066      	b.n	80015e6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2200      	movs	r2, #0
 800151c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2221      	movs	r2, #33	; 0x21
 8001522:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001526:	f7ff f87f 	bl	8000628 <HAL_GetTick>
 800152a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	88fa      	ldrh	r2, [r7, #6]
 8001530:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	88fa      	ldrh	r2, [r7, #6]
 8001536:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001540:	d108      	bne.n	8001554 <HAL_UART_Transmit+0x6c>
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	691b      	ldr	r3, [r3, #16]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d104      	bne.n	8001554 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800154a:	2300      	movs	r3, #0
 800154c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	61bb      	str	r3, [r7, #24]
 8001552:	e003      	b.n	800155c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001558:	2300      	movs	r3, #0
 800155a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800155c:	e02a      	b.n	80015b4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	9300      	str	r3, [sp, #0]
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	2200      	movs	r2, #0
 8001566:	2180      	movs	r1, #128	; 0x80
 8001568:	68f8      	ldr	r0, [r7, #12]
 800156a:	f000 f840 	bl	80015ee <UART_WaitOnFlagUntilTimeout>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e036      	b.n	80015e6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d10b      	bne.n	8001596 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	881b      	ldrh	r3, [r3, #0]
 8001582:	461a      	mov	r2, r3
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800158c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	3302      	adds	r3, #2
 8001592:	61bb      	str	r3, [r7, #24]
 8001594:	e007      	b.n	80015a6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	781a      	ldrb	r2, [r3, #0]
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	3301      	adds	r3, #1
 80015a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	3b01      	subs	r3, #1
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1cf      	bne.n	800155e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	9300      	str	r3, [sp, #0]
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	2200      	movs	r2, #0
 80015c6:	2140      	movs	r1, #64	; 0x40
 80015c8:	68f8      	ldr	r0, [r7, #12]
 80015ca:	f000 f810 	bl	80015ee <UART_WaitOnFlagUntilTimeout>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e006      	b.n	80015e6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	2220      	movs	r2, #32
 80015dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80015e0:	2300      	movs	r3, #0
 80015e2:	e000      	b.n	80015e6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80015e4:	2302      	movs	r3, #2
  }
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3720      	adds	r7, #32
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b090      	sub	sp, #64	; 0x40
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	60f8      	str	r0, [r7, #12]
 80015f6:	60b9      	str	r1, [r7, #8]
 80015f8:	603b      	str	r3, [r7, #0]
 80015fa:	4613      	mov	r3, r2
 80015fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80015fe:	e050      	b.n	80016a2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001600:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001606:	d04c      	beq.n	80016a2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001608:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800160a:	2b00      	cmp	r3, #0
 800160c:	d007      	beq.n	800161e <UART_WaitOnFlagUntilTimeout+0x30>
 800160e:	f7ff f80b 	bl	8000628 <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800161a:	429a      	cmp	r2, r3
 800161c:	d241      	bcs.n	80016a2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	330c      	adds	r3, #12
 8001624:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001628:	e853 3f00 	ldrex	r3, [r3]
 800162c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800162e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001630:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001634:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	330c      	adds	r3, #12
 800163c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800163e:	637a      	str	r2, [r7, #52]	; 0x34
 8001640:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001642:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001644:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001646:	e841 2300 	strex	r3, r2, [r1]
 800164a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800164c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1e5      	bne.n	800161e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	3314      	adds	r3, #20
 8001658:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	e853 3f00 	ldrex	r3, [r3]
 8001660:	613b      	str	r3, [r7, #16]
   return(result);
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	f023 0301 	bic.w	r3, r3, #1
 8001668:	63bb      	str	r3, [r7, #56]	; 0x38
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	3314      	adds	r3, #20
 8001670:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001672:	623a      	str	r2, [r7, #32]
 8001674:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001676:	69f9      	ldr	r1, [r7, #28]
 8001678:	6a3a      	ldr	r2, [r7, #32]
 800167a:	e841 2300 	strex	r3, r2, [r1]
 800167e:	61bb      	str	r3, [r7, #24]
   return(result);
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d1e5      	bne.n	8001652 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2220      	movs	r2, #32
 800168a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	2220      	movs	r2, #32
 8001692:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2200      	movs	r2, #0
 800169a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e00f      	b.n	80016c2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	4013      	ands	r3, r2
 80016ac:	68ba      	ldr	r2, [r7, #8]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	bf0c      	ite	eq
 80016b2:	2301      	moveq	r3, #1
 80016b4:	2300      	movne	r3, #0
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	461a      	mov	r2, r3
 80016ba:	79fb      	ldrb	r3, [r7, #7]
 80016bc:	429a      	cmp	r2, r3
 80016be:	d09f      	beq.n	8001600 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3740      	adds	r7, #64	; 0x40
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
	...

080016cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	691b      	ldr	r3, [r3, #16]
 80016da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	68da      	ldr	r2, [r3, #12]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	430a      	orrs	r2, r1
 80016e8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	689a      	ldr	r2, [r3, #8]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	691b      	ldr	r3, [r3, #16]
 80016f2:	431a      	orrs	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	695b      	ldr	r3, [r3, #20]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001706:	f023 030c 	bic.w	r3, r3, #12
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	6812      	ldr	r2, [r2, #0]
 800170e:	68b9      	ldr	r1, [r7, #8]
 8001710:	430b      	orrs	r3, r1
 8001712:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	695b      	ldr	r3, [r3, #20]
 800171a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	699a      	ldr	r2, [r3, #24]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	430a      	orrs	r2, r1
 8001728:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a2c      	ldr	r2, [pc, #176]	; (80017e0 <UART_SetConfig+0x114>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d103      	bne.n	800173c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001734:	f7ff fe56 	bl	80013e4 <HAL_RCC_GetPCLK2Freq>
 8001738:	60f8      	str	r0, [r7, #12]
 800173a:	e002      	b.n	8001742 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800173c:	f7ff fe3e 	bl	80013bc <HAL_RCC_GetPCLK1Freq>
 8001740:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001742:	68fa      	ldr	r2, [r7, #12]
 8001744:	4613      	mov	r3, r2
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	4413      	add	r3, r2
 800174a:	009a      	lsls	r2, r3, #2
 800174c:	441a      	add	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	fbb2 f3f3 	udiv	r3, r2, r3
 8001758:	4a22      	ldr	r2, [pc, #136]	; (80017e4 <UART_SetConfig+0x118>)
 800175a:	fba2 2303 	umull	r2, r3, r2, r3
 800175e:	095b      	lsrs	r3, r3, #5
 8001760:	0119      	lsls	r1, r3, #4
 8001762:	68fa      	ldr	r2, [r7, #12]
 8001764:	4613      	mov	r3, r2
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	4413      	add	r3, r2
 800176a:	009a      	lsls	r2, r3, #2
 800176c:	441a      	add	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	fbb2 f2f3 	udiv	r2, r2, r3
 8001778:	4b1a      	ldr	r3, [pc, #104]	; (80017e4 <UART_SetConfig+0x118>)
 800177a:	fba3 0302 	umull	r0, r3, r3, r2
 800177e:	095b      	lsrs	r3, r3, #5
 8001780:	2064      	movs	r0, #100	; 0x64
 8001782:	fb00 f303 	mul.w	r3, r0, r3
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	011b      	lsls	r3, r3, #4
 800178a:	3332      	adds	r3, #50	; 0x32
 800178c:	4a15      	ldr	r2, [pc, #84]	; (80017e4 <UART_SetConfig+0x118>)
 800178e:	fba2 2303 	umull	r2, r3, r2, r3
 8001792:	095b      	lsrs	r3, r3, #5
 8001794:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001798:	4419      	add	r1, r3
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	4613      	mov	r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	4413      	add	r3, r2
 80017a2:	009a      	lsls	r2, r3, #2
 80017a4:	441a      	add	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80017b0:	4b0c      	ldr	r3, [pc, #48]	; (80017e4 <UART_SetConfig+0x118>)
 80017b2:	fba3 0302 	umull	r0, r3, r3, r2
 80017b6:	095b      	lsrs	r3, r3, #5
 80017b8:	2064      	movs	r0, #100	; 0x64
 80017ba:	fb00 f303 	mul.w	r3, r0, r3
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	011b      	lsls	r3, r3, #4
 80017c2:	3332      	adds	r3, #50	; 0x32
 80017c4:	4a07      	ldr	r2, [pc, #28]	; (80017e4 <UART_SetConfig+0x118>)
 80017c6:	fba2 2303 	umull	r2, r3, r2, r3
 80017ca:	095b      	lsrs	r3, r3, #5
 80017cc:	f003 020f 	and.w	r2, r3, #15
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	440a      	add	r2, r1
 80017d6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80017d8:	bf00      	nop
 80017da:	3710      	adds	r7, #16
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40013800 	.word	0x40013800
 80017e4:	51eb851f 	.word	0x51eb851f

080017e8 <siprintf>:
 80017e8:	b40e      	push	{r1, r2, r3}
 80017ea:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80017ee:	b500      	push	{lr}
 80017f0:	b09c      	sub	sp, #112	; 0x70
 80017f2:	ab1d      	add	r3, sp, #116	; 0x74
 80017f4:	9002      	str	r0, [sp, #8]
 80017f6:	9006      	str	r0, [sp, #24]
 80017f8:	9107      	str	r1, [sp, #28]
 80017fa:	9104      	str	r1, [sp, #16]
 80017fc:	4808      	ldr	r0, [pc, #32]	; (8001820 <siprintf+0x38>)
 80017fe:	4909      	ldr	r1, [pc, #36]	; (8001824 <siprintf+0x3c>)
 8001800:	f853 2b04 	ldr.w	r2, [r3], #4
 8001804:	9105      	str	r1, [sp, #20]
 8001806:	6800      	ldr	r0, [r0, #0]
 8001808:	a902      	add	r1, sp, #8
 800180a:	9301      	str	r3, [sp, #4]
 800180c:	f000 f98e 	bl	8001b2c <_svfiprintf_r>
 8001810:	2200      	movs	r2, #0
 8001812:	9b02      	ldr	r3, [sp, #8]
 8001814:	701a      	strb	r2, [r3, #0]
 8001816:	b01c      	add	sp, #112	; 0x70
 8001818:	f85d eb04 	ldr.w	lr, [sp], #4
 800181c:	b003      	add	sp, #12
 800181e:	4770      	bx	lr
 8001820:	20000058 	.word	0x20000058
 8001824:	ffff0208 	.word	0xffff0208

08001828 <memset>:
 8001828:	4603      	mov	r3, r0
 800182a:	4402      	add	r2, r0
 800182c:	4293      	cmp	r3, r2
 800182e:	d100      	bne.n	8001832 <memset+0xa>
 8001830:	4770      	bx	lr
 8001832:	f803 1b01 	strb.w	r1, [r3], #1
 8001836:	e7f9      	b.n	800182c <memset+0x4>

08001838 <__errno>:
 8001838:	4b01      	ldr	r3, [pc, #4]	; (8001840 <__errno+0x8>)
 800183a:	6818      	ldr	r0, [r3, #0]
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	20000058 	.word	0x20000058

08001844 <__libc_init_array>:
 8001844:	b570      	push	{r4, r5, r6, lr}
 8001846:	2600      	movs	r6, #0
 8001848:	4d0c      	ldr	r5, [pc, #48]	; (800187c <__libc_init_array+0x38>)
 800184a:	4c0d      	ldr	r4, [pc, #52]	; (8001880 <__libc_init_array+0x3c>)
 800184c:	1b64      	subs	r4, r4, r5
 800184e:	10a4      	asrs	r4, r4, #2
 8001850:	42a6      	cmp	r6, r4
 8001852:	d109      	bne.n	8001868 <__libc_init_array+0x24>
 8001854:	f000 fc7a 	bl	800214c <_init>
 8001858:	2600      	movs	r6, #0
 800185a:	4d0a      	ldr	r5, [pc, #40]	; (8001884 <__libc_init_array+0x40>)
 800185c:	4c0a      	ldr	r4, [pc, #40]	; (8001888 <__libc_init_array+0x44>)
 800185e:	1b64      	subs	r4, r4, r5
 8001860:	10a4      	asrs	r4, r4, #2
 8001862:	42a6      	cmp	r6, r4
 8001864:	d105      	bne.n	8001872 <__libc_init_array+0x2e>
 8001866:	bd70      	pop	{r4, r5, r6, pc}
 8001868:	f855 3b04 	ldr.w	r3, [r5], #4
 800186c:	4798      	blx	r3
 800186e:	3601      	adds	r6, #1
 8001870:	e7ee      	b.n	8001850 <__libc_init_array+0xc>
 8001872:	f855 3b04 	ldr.w	r3, [r5], #4
 8001876:	4798      	blx	r3
 8001878:	3601      	adds	r6, #1
 800187a:	e7f2      	b.n	8001862 <__libc_init_array+0x1e>
 800187c:	080021e4 	.word	0x080021e4
 8001880:	080021e4 	.word	0x080021e4
 8001884:	080021e4 	.word	0x080021e4
 8001888:	080021e8 	.word	0x080021e8

0800188c <__retarget_lock_acquire_recursive>:
 800188c:	4770      	bx	lr

0800188e <__retarget_lock_release_recursive>:
 800188e:	4770      	bx	lr

08001890 <_free_r>:
 8001890:	b538      	push	{r3, r4, r5, lr}
 8001892:	4605      	mov	r5, r0
 8001894:	2900      	cmp	r1, #0
 8001896:	d040      	beq.n	800191a <_free_r+0x8a>
 8001898:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800189c:	1f0c      	subs	r4, r1, #4
 800189e:	2b00      	cmp	r3, #0
 80018a0:	bfb8      	it	lt
 80018a2:	18e4      	addlt	r4, r4, r3
 80018a4:	f000 f8dc 	bl	8001a60 <__malloc_lock>
 80018a8:	4a1c      	ldr	r2, [pc, #112]	; (800191c <_free_r+0x8c>)
 80018aa:	6813      	ldr	r3, [r2, #0]
 80018ac:	b933      	cbnz	r3, 80018bc <_free_r+0x2c>
 80018ae:	6063      	str	r3, [r4, #4]
 80018b0:	6014      	str	r4, [r2, #0]
 80018b2:	4628      	mov	r0, r5
 80018b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80018b8:	f000 b8d8 	b.w	8001a6c <__malloc_unlock>
 80018bc:	42a3      	cmp	r3, r4
 80018be:	d908      	bls.n	80018d2 <_free_r+0x42>
 80018c0:	6820      	ldr	r0, [r4, #0]
 80018c2:	1821      	adds	r1, r4, r0
 80018c4:	428b      	cmp	r3, r1
 80018c6:	bf01      	itttt	eq
 80018c8:	6819      	ldreq	r1, [r3, #0]
 80018ca:	685b      	ldreq	r3, [r3, #4]
 80018cc:	1809      	addeq	r1, r1, r0
 80018ce:	6021      	streq	r1, [r4, #0]
 80018d0:	e7ed      	b.n	80018ae <_free_r+0x1e>
 80018d2:	461a      	mov	r2, r3
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	b10b      	cbz	r3, 80018dc <_free_r+0x4c>
 80018d8:	42a3      	cmp	r3, r4
 80018da:	d9fa      	bls.n	80018d2 <_free_r+0x42>
 80018dc:	6811      	ldr	r1, [r2, #0]
 80018de:	1850      	adds	r0, r2, r1
 80018e0:	42a0      	cmp	r0, r4
 80018e2:	d10b      	bne.n	80018fc <_free_r+0x6c>
 80018e4:	6820      	ldr	r0, [r4, #0]
 80018e6:	4401      	add	r1, r0
 80018e8:	1850      	adds	r0, r2, r1
 80018ea:	4283      	cmp	r3, r0
 80018ec:	6011      	str	r1, [r2, #0]
 80018ee:	d1e0      	bne.n	80018b2 <_free_r+0x22>
 80018f0:	6818      	ldr	r0, [r3, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	4408      	add	r0, r1
 80018f6:	6010      	str	r0, [r2, #0]
 80018f8:	6053      	str	r3, [r2, #4]
 80018fa:	e7da      	b.n	80018b2 <_free_r+0x22>
 80018fc:	d902      	bls.n	8001904 <_free_r+0x74>
 80018fe:	230c      	movs	r3, #12
 8001900:	602b      	str	r3, [r5, #0]
 8001902:	e7d6      	b.n	80018b2 <_free_r+0x22>
 8001904:	6820      	ldr	r0, [r4, #0]
 8001906:	1821      	adds	r1, r4, r0
 8001908:	428b      	cmp	r3, r1
 800190a:	bf01      	itttt	eq
 800190c:	6819      	ldreq	r1, [r3, #0]
 800190e:	685b      	ldreq	r3, [r3, #4]
 8001910:	1809      	addeq	r1, r1, r0
 8001912:	6021      	streq	r1, [r4, #0]
 8001914:	6063      	str	r3, [r4, #4]
 8001916:	6054      	str	r4, [r2, #4]
 8001918:	e7cb      	b.n	80018b2 <_free_r+0x22>
 800191a:	bd38      	pop	{r3, r4, r5, pc}
 800191c:	20000208 	.word	0x20000208

08001920 <sbrk_aligned>:
 8001920:	b570      	push	{r4, r5, r6, lr}
 8001922:	4e0e      	ldr	r6, [pc, #56]	; (800195c <sbrk_aligned+0x3c>)
 8001924:	460c      	mov	r4, r1
 8001926:	6831      	ldr	r1, [r6, #0]
 8001928:	4605      	mov	r5, r0
 800192a:	b911      	cbnz	r1, 8001932 <sbrk_aligned+0x12>
 800192c:	f000 fbaa 	bl	8002084 <_sbrk_r>
 8001930:	6030      	str	r0, [r6, #0]
 8001932:	4621      	mov	r1, r4
 8001934:	4628      	mov	r0, r5
 8001936:	f000 fba5 	bl	8002084 <_sbrk_r>
 800193a:	1c43      	adds	r3, r0, #1
 800193c:	d00a      	beq.n	8001954 <sbrk_aligned+0x34>
 800193e:	1cc4      	adds	r4, r0, #3
 8001940:	f024 0403 	bic.w	r4, r4, #3
 8001944:	42a0      	cmp	r0, r4
 8001946:	d007      	beq.n	8001958 <sbrk_aligned+0x38>
 8001948:	1a21      	subs	r1, r4, r0
 800194a:	4628      	mov	r0, r5
 800194c:	f000 fb9a 	bl	8002084 <_sbrk_r>
 8001950:	3001      	adds	r0, #1
 8001952:	d101      	bne.n	8001958 <sbrk_aligned+0x38>
 8001954:	f04f 34ff 	mov.w	r4, #4294967295
 8001958:	4620      	mov	r0, r4
 800195a:	bd70      	pop	{r4, r5, r6, pc}
 800195c:	2000020c 	.word	0x2000020c

08001960 <_malloc_r>:
 8001960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001964:	1ccd      	adds	r5, r1, #3
 8001966:	f025 0503 	bic.w	r5, r5, #3
 800196a:	3508      	adds	r5, #8
 800196c:	2d0c      	cmp	r5, #12
 800196e:	bf38      	it	cc
 8001970:	250c      	movcc	r5, #12
 8001972:	2d00      	cmp	r5, #0
 8001974:	4607      	mov	r7, r0
 8001976:	db01      	blt.n	800197c <_malloc_r+0x1c>
 8001978:	42a9      	cmp	r1, r5
 800197a:	d905      	bls.n	8001988 <_malloc_r+0x28>
 800197c:	230c      	movs	r3, #12
 800197e:	2600      	movs	r6, #0
 8001980:	603b      	str	r3, [r7, #0]
 8001982:	4630      	mov	r0, r6
 8001984:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001988:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001a5c <_malloc_r+0xfc>
 800198c:	f000 f868 	bl	8001a60 <__malloc_lock>
 8001990:	f8d8 3000 	ldr.w	r3, [r8]
 8001994:	461c      	mov	r4, r3
 8001996:	bb5c      	cbnz	r4, 80019f0 <_malloc_r+0x90>
 8001998:	4629      	mov	r1, r5
 800199a:	4638      	mov	r0, r7
 800199c:	f7ff ffc0 	bl	8001920 <sbrk_aligned>
 80019a0:	1c43      	adds	r3, r0, #1
 80019a2:	4604      	mov	r4, r0
 80019a4:	d155      	bne.n	8001a52 <_malloc_r+0xf2>
 80019a6:	f8d8 4000 	ldr.w	r4, [r8]
 80019aa:	4626      	mov	r6, r4
 80019ac:	2e00      	cmp	r6, #0
 80019ae:	d145      	bne.n	8001a3c <_malloc_r+0xdc>
 80019b0:	2c00      	cmp	r4, #0
 80019b2:	d048      	beq.n	8001a46 <_malloc_r+0xe6>
 80019b4:	6823      	ldr	r3, [r4, #0]
 80019b6:	4631      	mov	r1, r6
 80019b8:	4638      	mov	r0, r7
 80019ba:	eb04 0903 	add.w	r9, r4, r3
 80019be:	f000 fb61 	bl	8002084 <_sbrk_r>
 80019c2:	4581      	cmp	r9, r0
 80019c4:	d13f      	bne.n	8001a46 <_malloc_r+0xe6>
 80019c6:	6821      	ldr	r1, [r4, #0]
 80019c8:	4638      	mov	r0, r7
 80019ca:	1a6d      	subs	r5, r5, r1
 80019cc:	4629      	mov	r1, r5
 80019ce:	f7ff ffa7 	bl	8001920 <sbrk_aligned>
 80019d2:	3001      	adds	r0, #1
 80019d4:	d037      	beq.n	8001a46 <_malloc_r+0xe6>
 80019d6:	6823      	ldr	r3, [r4, #0]
 80019d8:	442b      	add	r3, r5
 80019da:	6023      	str	r3, [r4, #0]
 80019dc:	f8d8 3000 	ldr.w	r3, [r8]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d038      	beq.n	8001a56 <_malloc_r+0xf6>
 80019e4:	685a      	ldr	r2, [r3, #4]
 80019e6:	42a2      	cmp	r2, r4
 80019e8:	d12b      	bne.n	8001a42 <_malloc_r+0xe2>
 80019ea:	2200      	movs	r2, #0
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	e00f      	b.n	8001a10 <_malloc_r+0xb0>
 80019f0:	6822      	ldr	r2, [r4, #0]
 80019f2:	1b52      	subs	r2, r2, r5
 80019f4:	d41f      	bmi.n	8001a36 <_malloc_r+0xd6>
 80019f6:	2a0b      	cmp	r2, #11
 80019f8:	d917      	bls.n	8001a2a <_malloc_r+0xca>
 80019fa:	1961      	adds	r1, r4, r5
 80019fc:	42a3      	cmp	r3, r4
 80019fe:	6025      	str	r5, [r4, #0]
 8001a00:	bf18      	it	ne
 8001a02:	6059      	strne	r1, [r3, #4]
 8001a04:	6863      	ldr	r3, [r4, #4]
 8001a06:	bf08      	it	eq
 8001a08:	f8c8 1000 	streq.w	r1, [r8]
 8001a0c:	5162      	str	r2, [r4, r5]
 8001a0e:	604b      	str	r3, [r1, #4]
 8001a10:	4638      	mov	r0, r7
 8001a12:	f104 060b 	add.w	r6, r4, #11
 8001a16:	f000 f829 	bl	8001a6c <__malloc_unlock>
 8001a1a:	f026 0607 	bic.w	r6, r6, #7
 8001a1e:	1d23      	adds	r3, r4, #4
 8001a20:	1af2      	subs	r2, r6, r3
 8001a22:	d0ae      	beq.n	8001982 <_malloc_r+0x22>
 8001a24:	1b9b      	subs	r3, r3, r6
 8001a26:	50a3      	str	r3, [r4, r2]
 8001a28:	e7ab      	b.n	8001982 <_malloc_r+0x22>
 8001a2a:	42a3      	cmp	r3, r4
 8001a2c:	6862      	ldr	r2, [r4, #4]
 8001a2e:	d1dd      	bne.n	80019ec <_malloc_r+0x8c>
 8001a30:	f8c8 2000 	str.w	r2, [r8]
 8001a34:	e7ec      	b.n	8001a10 <_malloc_r+0xb0>
 8001a36:	4623      	mov	r3, r4
 8001a38:	6864      	ldr	r4, [r4, #4]
 8001a3a:	e7ac      	b.n	8001996 <_malloc_r+0x36>
 8001a3c:	4634      	mov	r4, r6
 8001a3e:	6876      	ldr	r6, [r6, #4]
 8001a40:	e7b4      	b.n	80019ac <_malloc_r+0x4c>
 8001a42:	4613      	mov	r3, r2
 8001a44:	e7cc      	b.n	80019e0 <_malloc_r+0x80>
 8001a46:	230c      	movs	r3, #12
 8001a48:	4638      	mov	r0, r7
 8001a4a:	603b      	str	r3, [r7, #0]
 8001a4c:	f000 f80e 	bl	8001a6c <__malloc_unlock>
 8001a50:	e797      	b.n	8001982 <_malloc_r+0x22>
 8001a52:	6025      	str	r5, [r4, #0]
 8001a54:	e7dc      	b.n	8001a10 <_malloc_r+0xb0>
 8001a56:	605b      	str	r3, [r3, #4]
 8001a58:	deff      	udf	#255	; 0xff
 8001a5a:	bf00      	nop
 8001a5c:	20000208 	.word	0x20000208

08001a60 <__malloc_lock>:
 8001a60:	4801      	ldr	r0, [pc, #4]	; (8001a68 <__malloc_lock+0x8>)
 8001a62:	f7ff bf13 	b.w	800188c <__retarget_lock_acquire_recursive>
 8001a66:	bf00      	nop
 8001a68:	20000204 	.word	0x20000204

08001a6c <__malloc_unlock>:
 8001a6c:	4801      	ldr	r0, [pc, #4]	; (8001a74 <__malloc_unlock+0x8>)
 8001a6e:	f7ff bf0e 	b.w	800188e <__retarget_lock_release_recursive>
 8001a72:	bf00      	nop
 8001a74:	20000204 	.word	0x20000204

08001a78 <__ssputs_r>:
 8001a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a7c:	461f      	mov	r7, r3
 8001a7e:	688e      	ldr	r6, [r1, #8]
 8001a80:	4682      	mov	sl, r0
 8001a82:	42be      	cmp	r6, r7
 8001a84:	460c      	mov	r4, r1
 8001a86:	4690      	mov	r8, r2
 8001a88:	680b      	ldr	r3, [r1, #0]
 8001a8a:	d82c      	bhi.n	8001ae6 <__ssputs_r+0x6e>
 8001a8c:	898a      	ldrh	r2, [r1, #12]
 8001a8e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001a92:	d026      	beq.n	8001ae2 <__ssputs_r+0x6a>
 8001a94:	6965      	ldr	r5, [r4, #20]
 8001a96:	6909      	ldr	r1, [r1, #16]
 8001a98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001a9c:	eba3 0901 	sub.w	r9, r3, r1
 8001aa0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001aa4:	1c7b      	adds	r3, r7, #1
 8001aa6:	444b      	add	r3, r9
 8001aa8:	106d      	asrs	r5, r5, #1
 8001aaa:	429d      	cmp	r5, r3
 8001aac:	bf38      	it	cc
 8001aae:	461d      	movcc	r5, r3
 8001ab0:	0553      	lsls	r3, r2, #21
 8001ab2:	d527      	bpl.n	8001b04 <__ssputs_r+0x8c>
 8001ab4:	4629      	mov	r1, r5
 8001ab6:	f7ff ff53 	bl	8001960 <_malloc_r>
 8001aba:	4606      	mov	r6, r0
 8001abc:	b360      	cbz	r0, 8001b18 <__ssputs_r+0xa0>
 8001abe:	464a      	mov	r2, r9
 8001ac0:	6921      	ldr	r1, [r4, #16]
 8001ac2:	f000 fafd 	bl	80020c0 <memcpy>
 8001ac6:	89a3      	ldrh	r3, [r4, #12]
 8001ac8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001acc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ad0:	81a3      	strh	r3, [r4, #12]
 8001ad2:	6126      	str	r6, [r4, #16]
 8001ad4:	444e      	add	r6, r9
 8001ad6:	6026      	str	r6, [r4, #0]
 8001ad8:	463e      	mov	r6, r7
 8001ada:	6165      	str	r5, [r4, #20]
 8001adc:	eba5 0509 	sub.w	r5, r5, r9
 8001ae0:	60a5      	str	r5, [r4, #8]
 8001ae2:	42be      	cmp	r6, r7
 8001ae4:	d900      	bls.n	8001ae8 <__ssputs_r+0x70>
 8001ae6:	463e      	mov	r6, r7
 8001ae8:	4632      	mov	r2, r6
 8001aea:	4641      	mov	r1, r8
 8001aec:	6820      	ldr	r0, [r4, #0]
 8001aee:	f000 faaf 	bl	8002050 <memmove>
 8001af2:	2000      	movs	r0, #0
 8001af4:	68a3      	ldr	r3, [r4, #8]
 8001af6:	1b9b      	subs	r3, r3, r6
 8001af8:	60a3      	str	r3, [r4, #8]
 8001afa:	6823      	ldr	r3, [r4, #0]
 8001afc:	4433      	add	r3, r6
 8001afe:	6023      	str	r3, [r4, #0]
 8001b00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b04:	462a      	mov	r2, r5
 8001b06:	f000 fae9 	bl	80020dc <_realloc_r>
 8001b0a:	4606      	mov	r6, r0
 8001b0c:	2800      	cmp	r0, #0
 8001b0e:	d1e0      	bne.n	8001ad2 <__ssputs_r+0x5a>
 8001b10:	4650      	mov	r0, sl
 8001b12:	6921      	ldr	r1, [r4, #16]
 8001b14:	f7ff febc 	bl	8001890 <_free_r>
 8001b18:	230c      	movs	r3, #12
 8001b1a:	f8ca 3000 	str.w	r3, [sl]
 8001b1e:	89a3      	ldrh	r3, [r4, #12]
 8001b20:	f04f 30ff 	mov.w	r0, #4294967295
 8001b24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b28:	81a3      	strh	r3, [r4, #12]
 8001b2a:	e7e9      	b.n	8001b00 <__ssputs_r+0x88>

08001b2c <_svfiprintf_r>:
 8001b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b30:	4698      	mov	r8, r3
 8001b32:	898b      	ldrh	r3, [r1, #12]
 8001b34:	4607      	mov	r7, r0
 8001b36:	061b      	lsls	r3, r3, #24
 8001b38:	460d      	mov	r5, r1
 8001b3a:	4614      	mov	r4, r2
 8001b3c:	b09d      	sub	sp, #116	; 0x74
 8001b3e:	d50e      	bpl.n	8001b5e <_svfiprintf_r+0x32>
 8001b40:	690b      	ldr	r3, [r1, #16]
 8001b42:	b963      	cbnz	r3, 8001b5e <_svfiprintf_r+0x32>
 8001b44:	2140      	movs	r1, #64	; 0x40
 8001b46:	f7ff ff0b 	bl	8001960 <_malloc_r>
 8001b4a:	6028      	str	r0, [r5, #0]
 8001b4c:	6128      	str	r0, [r5, #16]
 8001b4e:	b920      	cbnz	r0, 8001b5a <_svfiprintf_r+0x2e>
 8001b50:	230c      	movs	r3, #12
 8001b52:	603b      	str	r3, [r7, #0]
 8001b54:	f04f 30ff 	mov.w	r0, #4294967295
 8001b58:	e0d0      	b.n	8001cfc <_svfiprintf_r+0x1d0>
 8001b5a:	2340      	movs	r3, #64	; 0x40
 8001b5c:	616b      	str	r3, [r5, #20]
 8001b5e:	2300      	movs	r3, #0
 8001b60:	9309      	str	r3, [sp, #36]	; 0x24
 8001b62:	2320      	movs	r3, #32
 8001b64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001b68:	2330      	movs	r3, #48	; 0x30
 8001b6a:	f04f 0901 	mov.w	r9, #1
 8001b6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001b72:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8001d14 <_svfiprintf_r+0x1e8>
 8001b76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001b7a:	4623      	mov	r3, r4
 8001b7c:	469a      	mov	sl, r3
 8001b7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001b82:	b10a      	cbz	r2, 8001b88 <_svfiprintf_r+0x5c>
 8001b84:	2a25      	cmp	r2, #37	; 0x25
 8001b86:	d1f9      	bne.n	8001b7c <_svfiprintf_r+0x50>
 8001b88:	ebba 0b04 	subs.w	fp, sl, r4
 8001b8c:	d00b      	beq.n	8001ba6 <_svfiprintf_r+0x7a>
 8001b8e:	465b      	mov	r3, fp
 8001b90:	4622      	mov	r2, r4
 8001b92:	4629      	mov	r1, r5
 8001b94:	4638      	mov	r0, r7
 8001b96:	f7ff ff6f 	bl	8001a78 <__ssputs_r>
 8001b9a:	3001      	adds	r0, #1
 8001b9c:	f000 80a9 	beq.w	8001cf2 <_svfiprintf_r+0x1c6>
 8001ba0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001ba2:	445a      	add	r2, fp
 8001ba4:	9209      	str	r2, [sp, #36]	; 0x24
 8001ba6:	f89a 3000 	ldrb.w	r3, [sl]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f000 80a1 	beq.w	8001cf2 <_svfiprintf_r+0x1c6>
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	f04f 32ff 	mov.w	r2, #4294967295
 8001bb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001bba:	f10a 0a01 	add.w	sl, sl, #1
 8001bbe:	9304      	str	r3, [sp, #16]
 8001bc0:	9307      	str	r3, [sp, #28]
 8001bc2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001bc6:	931a      	str	r3, [sp, #104]	; 0x68
 8001bc8:	4654      	mov	r4, sl
 8001bca:	2205      	movs	r2, #5
 8001bcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001bd0:	4850      	ldr	r0, [pc, #320]	; (8001d14 <_svfiprintf_r+0x1e8>)
 8001bd2:	f000 fa67 	bl	80020a4 <memchr>
 8001bd6:	9a04      	ldr	r2, [sp, #16]
 8001bd8:	b9d8      	cbnz	r0, 8001c12 <_svfiprintf_r+0xe6>
 8001bda:	06d0      	lsls	r0, r2, #27
 8001bdc:	bf44      	itt	mi
 8001bde:	2320      	movmi	r3, #32
 8001be0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001be4:	0711      	lsls	r1, r2, #28
 8001be6:	bf44      	itt	mi
 8001be8:	232b      	movmi	r3, #43	; 0x2b
 8001bea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001bee:	f89a 3000 	ldrb.w	r3, [sl]
 8001bf2:	2b2a      	cmp	r3, #42	; 0x2a
 8001bf4:	d015      	beq.n	8001c22 <_svfiprintf_r+0xf6>
 8001bf6:	4654      	mov	r4, sl
 8001bf8:	2000      	movs	r0, #0
 8001bfa:	f04f 0c0a 	mov.w	ip, #10
 8001bfe:	9a07      	ldr	r2, [sp, #28]
 8001c00:	4621      	mov	r1, r4
 8001c02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001c06:	3b30      	subs	r3, #48	; 0x30
 8001c08:	2b09      	cmp	r3, #9
 8001c0a:	d94d      	bls.n	8001ca8 <_svfiprintf_r+0x17c>
 8001c0c:	b1b0      	cbz	r0, 8001c3c <_svfiprintf_r+0x110>
 8001c0e:	9207      	str	r2, [sp, #28]
 8001c10:	e014      	b.n	8001c3c <_svfiprintf_r+0x110>
 8001c12:	eba0 0308 	sub.w	r3, r0, r8
 8001c16:	fa09 f303 	lsl.w	r3, r9, r3
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	46a2      	mov	sl, r4
 8001c1e:	9304      	str	r3, [sp, #16]
 8001c20:	e7d2      	b.n	8001bc8 <_svfiprintf_r+0x9c>
 8001c22:	9b03      	ldr	r3, [sp, #12]
 8001c24:	1d19      	adds	r1, r3, #4
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	9103      	str	r1, [sp, #12]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	bfbb      	ittet	lt
 8001c2e:	425b      	neglt	r3, r3
 8001c30:	f042 0202 	orrlt.w	r2, r2, #2
 8001c34:	9307      	strge	r3, [sp, #28]
 8001c36:	9307      	strlt	r3, [sp, #28]
 8001c38:	bfb8      	it	lt
 8001c3a:	9204      	strlt	r2, [sp, #16]
 8001c3c:	7823      	ldrb	r3, [r4, #0]
 8001c3e:	2b2e      	cmp	r3, #46	; 0x2e
 8001c40:	d10c      	bne.n	8001c5c <_svfiprintf_r+0x130>
 8001c42:	7863      	ldrb	r3, [r4, #1]
 8001c44:	2b2a      	cmp	r3, #42	; 0x2a
 8001c46:	d134      	bne.n	8001cb2 <_svfiprintf_r+0x186>
 8001c48:	9b03      	ldr	r3, [sp, #12]
 8001c4a:	3402      	adds	r4, #2
 8001c4c:	1d1a      	adds	r2, r3, #4
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	9203      	str	r2, [sp, #12]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	bfb8      	it	lt
 8001c56:	f04f 33ff 	movlt.w	r3, #4294967295
 8001c5a:	9305      	str	r3, [sp, #20]
 8001c5c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8001d18 <_svfiprintf_r+0x1ec>
 8001c60:	2203      	movs	r2, #3
 8001c62:	4650      	mov	r0, sl
 8001c64:	7821      	ldrb	r1, [r4, #0]
 8001c66:	f000 fa1d 	bl	80020a4 <memchr>
 8001c6a:	b138      	cbz	r0, 8001c7c <_svfiprintf_r+0x150>
 8001c6c:	2240      	movs	r2, #64	; 0x40
 8001c6e:	9b04      	ldr	r3, [sp, #16]
 8001c70:	eba0 000a 	sub.w	r0, r0, sl
 8001c74:	4082      	lsls	r2, r0
 8001c76:	4313      	orrs	r3, r2
 8001c78:	3401      	adds	r4, #1
 8001c7a:	9304      	str	r3, [sp, #16]
 8001c7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c80:	2206      	movs	r2, #6
 8001c82:	4826      	ldr	r0, [pc, #152]	; (8001d1c <_svfiprintf_r+0x1f0>)
 8001c84:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001c88:	f000 fa0c 	bl	80020a4 <memchr>
 8001c8c:	2800      	cmp	r0, #0
 8001c8e:	d038      	beq.n	8001d02 <_svfiprintf_r+0x1d6>
 8001c90:	4b23      	ldr	r3, [pc, #140]	; (8001d20 <_svfiprintf_r+0x1f4>)
 8001c92:	bb1b      	cbnz	r3, 8001cdc <_svfiprintf_r+0x1b0>
 8001c94:	9b03      	ldr	r3, [sp, #12]
 8001c96:	3307      	adds	r3, #7
 8001c98:	f023 0307 	bic.w	r3, r3, #7
 8001c9c:	3308      	adds	r3, #8
 8001c9e:	9303      	str	r3, [sp, #12]
 8001ca0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001ca2:	4433      	add	r3, r6
 8001ca4:	9309      	str	r3, [sp, #36]	; 0x24
 8001ca6:	e768      	b.n	8001b7a <_svfiprintf_r+0x4e>
 8001ca8:	460c      	mov	r4, r1
 8001caa:	2001      	movs	r0, #1
 8001cac:	fb0c 3202 	mla	r2, ip, r2, r3
 8001cb0:	e7a6      	b.n	8001c00 <_svfiprintf_r+0xd4>
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	f04f 0c0a 	mov.w	ip, #10
 8001cb8:	4619      	mov	r1, r3
 8001cba:	3401      	adds	r4, #1
 8001cbc:	9305      	str	r3, [sp, #20]
 8001cbe:	4620      	mov	r0, r4
 8001cc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001cc4:	3a30      	subs	r2, #48	; 0x30
 8001cc6:	2a09      	cmp	r2, #9
 8001cc8:	d903      	bls.n	8001cd2 <_svfiprintf_r+0x1a6>
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d0c6      	beq.n	8001c5c <_svfiprintf_r+0x130>
 8001cce:	9105      	str	r1, [sp, #20]
 8001cd0:	e7c4      	b.n	8001c5c <_svfiprintf_r+0x130>
 8001cd2:	4604      	mov	r4, r0
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	fb0c 2101 	mla	r1, ip, r1, r2
 8001cda:	e7f0      	b.n	8001cbe <_svfiprintf_r+0x192>
 8001cdc:	ab03      	add	r3, sp, #12
 8001cde:	9300      	str	r3, [sp, #0]
 8001ce0:	462a      	mov	r2, r5
 8001ce2:	4638      	mov	r0, r7
 8001ce4:	4b0f      	ldr	r3, [pc, #60]	; (8001d24 <_svfiprintf_r+0x1f8>)
 8001ce6:	a904      	add	r1, sp, #16
 8001ce8:	f3af 8000 	nop.w
 8001cec:	1c42      	adds	r2, r0, #1
 8001cee:	4606      	mov	r6, r0
 8001cf0:	d1d6      	bne.n	8001ca0 <_svfiprintf_r+0x174>
 8001cf2:	89ab      	ldrh	r3, [r5, #12]
 8001cf4:	065b      	lsls	r3, r3, #25
 8001cf6:	f53f af2d 	bmi.w	8001b54 <_svfiprintf_r+0x28>
 8001cfa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001cfc:	b01d      	add	sp, #116	; 0x74
 8001cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d02:	ab03      	add	r3, sp, #12
 8001d04:	9300      	str	r3, [sp, #0]
 8001d06:	462a      	mov	r2, r5
 8001d08:	4638      	mov	r0, r7
 8001d0a:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <_svfiprintf_r+0x1f8>)
 8001d0c:	a904      	add	r1, sp, #16
 8001d0e:	f000 f87d 	bl	8001e0c <_printf_i>
 8001d12:	e7eb      	b.n	8001cec <_svfiprintf_r+0x1c0>
 8001d14:	080021ae 	.word	0x080021ae
 8001d18:	080021b4 	.word	0x080021b4
 8001d1c:	080021b8 	.word	0x080021b8
 8001d20:	00000000 	.word	0x00000000
 8001d24:	08001a79 	.word	0x08001a79

08001d28 <_printf_common>:
 8001d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d2c:	4616      	mov	r6, r2
 8001d2e:	4699      	mov	r9, r3
 8001d30:	688a      	ldr	r2, [r1, #8]
 8001d32:	690b      	ldr	r3, [r1, #16]
 8001d34:	4607      	mov	r7, r0
 8001d36:	4293      	cmp	r3, r2
 8001d38:	bfb8      	it	lt
 8001d3a:	4613      	movlt	r3, r2
 8001d3c:	6033      	str	r3, [r6, #0]
 8001d3e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001d42:	460c      	mov	r4, r1
 8001d44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001d48:	b10a      	cbz	r2, 8001d4e <_printf_common+0x26>
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	6033      	str	r3, [r6, #0]
 8001d4e:	6823      	ldr	r3, [r4, #0]
 8001d50:	0699      	lsls	r1, r3, #26
 8001d52:	bf42      	ittt	mi
 8001d54:	6833      	ldrmi	r3, [r6, #0]
 8001d56:	3302      	addmi	r3, #2
 8001d58:	6033      	strmi	r3, [r6, #0]
 8001d5a:	6825      	ldr	r5, [r4, #0]
 8001d5c:	f015 0506 	ands.w	r5, r5, #6
 8001d60:	d106      	bne.n	8001d70 <_printf_common+0x48>
 8001d62:	f104 0a19 	add.w	sl, r4, #25
 8001d66:	68e3      	ldr	r3, [r4, #12]
 8001d68:	6832      	ldr	r2, [r6, #0]
 8001d6a:	1a9b      	subs	r3, r3, r2
 8001d6c:	42ab      	cmp	r3, r5
 8001d6e:	dc2b      	bgt.n	8001dc8 <_printf_common+0xa0>
 8001d70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001d74:	1e13      	subs	r3, r2, #0
 8001d76:	6822      	ldr	r2, [r4, #0]
 8001d78:	bf18      	it	ne
 8001d7a:	2301      	movne	r3, #1
 8001d7c:	0692      	lsls	r2, r2, #26
 8001d7e:	d430      	bmi.n	8001de2 <_printf_common+0xba>
 8001d80:	4649      	mov	r1, r9
 8001d82:	4638      	mov	r0, r7
 8001d84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001d88:	47c0      	blx	r8
 8001d8a:	3001      	adds	r0, #1
 8001d8c:	d023      	beq.n	8001dd6 <_printf_common+0xae>
 8001d8e:	6823      	ldr	r3, [r4, #0]
 8001d90:	6922      	ldr	r2, [r4, #16]
 8001d92:	f003 0306 	and.w	r3, r3, #6
 8001d96:	2b04      	cmp	r3, #4
 8001d98:	bf14      	ite	ne
 8001d9a:	2500      	movne	r5, #0
 8001d9c:	6833      	ldreq	r3, [r6, #0]
 8001d9e:	f04f 0600 	mov.w	r6, #0
 8001da2:	bf08      	it	eq
 8001da4:	68e5      	ldreq	r5, [r4, #12]
 8001da6:	f104 041a 	add.w	r4, r4, #26
 8001daa:	bf08      	it	eq
 8001dac:	1aed      	subeq	r5, r5, r3
 8001dae:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8001db2:	bf08      	it	eq
 8001db4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001db8:	4293      	cmp	r3, r2
 8001dba:	bfc4      	itt	gt
 8001dbc:	1a9b      	subgt	r3, r3, r2
 8001dbe:	18ed      	addgt	r5, r5, r3
 8001dc0:	42b5      	cmp	r5, r6
 8001dc2:	d11a      	bne.n	8001dfa <_printf_common+0xd2>
 8001dc4:	2000      	movs	r0, #0
 8001dc6:	e008      	b.n	8001dda <_printf_common+0xb2>
 8001dc8:	2301      	movs	r3, #1
 8001dca:	4652      	mov	r2, sl
 8001dcc:	4649      	mov	r1, r9
 8001dce:	4638      	mov	r0, r7
 8001dd0:	47c0      	blx	r8
 8001dd2:	3001      	adds	r0, #1
 8001dd4:	d103      	bne.n	8001dde <_printf_common+0xb6>
 8001dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8001dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001dde:	3501      	adds	r5, #1
 8001de0:	e7c1      	b.n	8001d66 <_printf_common+0x3e>
 8001de2:	2030      	movs	r0, #48	; 0x30
 8001de4:	18e1      	adds	r1, r4, r3
 8001de6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001dea:	1c5a      	adds	r2, r3, #1
 8001dec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001df0:	4422      	add	r2, r4
 8001df2:	3302      	adds	r3, #2
 8001df4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001df8:	e7c2      	b.n	8001d80 <_printf_common+0x58>
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	4622      	mov	r2, r4
 8001dfe:	4649      	mov	r1, r9
 8001e00:	4638      	mov	r0, r7
 8001e02:	47c0      	blx	r8
 8001e04:	3001      	adds	r0, #1
 8001e06:	d0e6      	beq.n	8001dd6 <_printf_common+0xae>
 8001e08:	3601      	adds	r6, #1
 8001e0a:	e7d9      	b.n	8001dc0 <_printf_common+0x98>

08001e0c <_printf_i>:
 8001e0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001e10:	7e0f      	ldrb	r7, [r1, #24]
 8001e12:	4691      	mov	r9, r2
 8001e14:	2f78      	cmp	r7, #120	; 0x78
 8001e16:	4680      	mov	r8, r0
 8001e18:	460c      	mov	r4, r1
 8001e1a:	469a      	mov	sl, r3
 8001e1c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001e1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001e22:	d807      	bhi.n	8001e34 <_printf_i+0x28>
 8001e24:	2f62      	cmp	r7, #98	; 0x62
 8001e26:	d80a      	bhi.n	8001e3e <_printf_i+0x32>
 8001e28:	2f00      	cmp	r7, #0
 8001e2a:	f000 80d5 	beq.w	8001fd8 <_printf_i+0x1cc>
 8001e2e:	2f58      	cmp	r7, #88	; 0x58
 8001e30:	f000 80c1 	beq.w	8001fb6 <_printf_i+0x1aa>
 8001e34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001e38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001e3c:	e03a      	b.n	8001eb4 <_printf_i+0xa8>
 8001e3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001e42:	2b15      	cmp	r3, #21
 8001e44:	d8f6      	bhi.n	8001e34 <_printf_i+0x28>
 8001e46:	a101      	add	r1, pc, #4	; (adr r1, 8001e4c <_printf_i+0x40>)
 8001e48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001e4c:	08001ea5 	.word	0x08001ea5
 8001e50:	08001eb9 	.word	0x08001eb9
 8001e54:	08001e35 	.word	0x08001e35
 8001e58:	08001e35 	.word	0x08001e35
 8001e5c:	08001e35 	.word	0x08001e35
 8001e60:	08001e35 	.word	0x08001e35
 8001e64:	08001eb9 	.word	0x08001eb9
 8001e68:	08001e35 	.word	0x08001e35
 8001e6c:	08001e35 	.word	0x08001e35
 8001e70:	08001e35 	.word	0x08001e35
 8001e74:	08001e35 	.word	0x08001e35
 8001e78:	08001fbf 	.word	0x08001fbf
 8001e7c:	08001ee5 	.word	0x08001ee5
 8001e80:	08001f79 	.word	0x08001f79
 8001e84:	08001e35 	.word	0x08001e35
 8001e88:	08001e35 	.word	0x08001e35
 8001e8c:	08001fe1 	.word	0x08001fe1
 8001e90:	08001e35 	.word	0x08001e35
 8001e94:	08001ee5 	.word	0x08001ee5
 8001e98:	08001e35 	.word	0x08001e35
 8001e9c:	08001e35 	.word	0x08001e35
 8001ea0:	08001f81 	.word	0x08001f81
 8001ea4:	682b      	ldr	r3, [r5, #0]
 8001ea6:	1d1a      	adds	r2, r3, #4
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	602a      	str	r2, [r5, #0]
 8001eac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001eb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e0a0      	b.n	8001ffa <_printf_i+0x1ee>
 8001eb8:	6820      	ldr	r0, [r4, #0]
 8001eba:	682b      	ldr	r3, [r5, #0]
 8001ebc:	0607      	lsls	r7, r0, #24
 8001ebe:	f103 0104 	add.w	r1, r3, #4
 8001ec2:	6029      	str	r1, [r5, #0]
 8001ec4:	d501      	bpl.n	8001eca <_printf_i+0xbe>
 8001ec6:	681e      	ldr	r6, [r3, #0]
 8001ec8:	e003      	b.n	8001ed2 <_printf_i+0xc6>
 8001eca:	0646      	lsls	r6, r0, #25
 8001ecc:	d5fb      	bpl.n	8001ec6 <_printf_i+0xba>
 8001ece:	f9b3 6000 	ldrsh.w	r6, [r3]
 8001ed2:	2e00      	cmp	r6, #0
 8001ed4:	da03      	bge.n	8001ede <_printf_i+0xd2>
 8001ed6:	232d      	movs	r3, #45	; 0x2d
 8001ed8:	4276      	negs	r6, r6
 8001eda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001ede:	230a      	movs	r3, #10
 8001ee0:	4859      	ldr	r0, [pc, #356]	; (8002048 <_printf_i+0x23c>)
 8001ee2:	e012      	b.n	8001f0a <_printf_i+0xfe>
 8001ee4:	682b      	ldr	r3, [r5, #0]
 8001ee6:	6820      	ldr	r0, [r4, #0]
 8001ee8:	1d19      	adds	r1, r3, #4
 8001eea:	6029      	str	r1, [r5, #0]
 8001eec:	0605      	lsls	r5, r0, #24
 8001eee:	d501      	bpl.n	8001ef4 <_printf_i+0xe8>
 8001ef0:	681e      	ldr	r6, [r3, #0]
 8001ef2:	e002      	b.n	8001efa <_printf_i+0xee>
 8001ef4:	0641      	lsls	r1, r0, #25
 8001ef6:	d5fb      	bpl.n	8001ef0 <_printf_i+0xe4>
 8001ef8:	881e      	ldrh	r6, [r3, #0]
 8001efa:	2f6f      	cmp	r7, #111	; 0x6f
 8001efc:	bf0c      	ite	eq
 8001efe:	2308      	moveq	r3, #8
 8001f00:	230a      	movne	r3, #10
 8001f02:	4851      	ldr	r0, [pc, #324]	; (8002048 <_printf_i+0x23c>)
 8001f04:	2100      	movs	r1, #0
 8001f06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001f0a:	6865      	ldr	r5, [r4, #4]
 8001f0c:	2d00      	cmp	r5, #0
 8001f0e:	bfa8      	it	ge
 8001f10:	6821      	ldrge	r1, [r4, #0]
 8001f12:	60a5      	str	r5, [r4, #8]
 8001f14:	bfa4      	itt	ge
 8001f16:	f021 0104 	bicge.w	r1, r1, #4
 8001f1a:	6021      	strge	r1, [r4, #0]
 8001f1c:	b90e      	cbnz	r6, 8001f22 <_printf_i+0x116>
 8001f1e:	2d00      	cmp	r5, #0
 8001f20:	d04b      	beq.n	8001fba <_printf_i+0x1ae>
 8001f22:	4615      	mov	r5, r2
 8001f24:	fbb6 f1f3 	udiv	r1, r6, r3
 8001f28:	fb03 6711 	mls	r7, r3, r1, r6
 8001f2c:	5dc7      	ldrb	r7, [r0, r7]
 8001f2e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001f32:	4637      	mov	r7, r6
 8001f34:	42bb      	cmp	r3, r7
 8001f36:	460e      	mov	r6, r1
 8001f38:	d9f4      	bls.n	8001f24 <_printf_i+0x118>
 8001f3a:	2b08      	cmp	r3, #8
 8001f3c:	d10b      	bne.n	8001f56 <_printf_i+0x14a>
 8001f3e:	6823      	ldr	r3, [r4, #0]
 8001f40:	07de      	lsls	r6, r3, #31
 8001f42:	d508      	bpl.n	8001f56 <_printf_i+0x14a>
 8001f44:	6923      	ldr	r3, [r4, #16]
 8001f46:	6861      	ldr	r1, [r4, #4]
 8001f48:	4299      	cmp	r1, r3
 8001f4a:	bfde      	ittt	le
 8001f4c:	2330      	movle	r3, #48	; 0x30
 8001f4e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001f52:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001f56:	1b52      	subs	r2, r2, r5
 8001f58:	6122      	str	r2, [r4, #16]
 8001f5a:	464b      	mov	r3, r9
 8001f5c:	4621      	mov	r1, r4
 8001f5e:	4640      	mov	r0, r8
 8001f60:	f8cd a000 	str.w	sl, [sp]
 8001f64:	aa03      	add	r2, sp, #12
 8001f66:	f7ff fedf 	bl	8001d28 <_printf_common>
 8001f6a:	3001      	adds	r0, #1
 8001f6c:	d14a      	bne.n	8002004 <_printf_i+0x1f8>
 8001f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8001f72:	b004      	add	sp, #16
 8001f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f78:	6823      	ldr	r3, [r4, #0]
 8001f7a:	f043 0320 	orr.w	r3, r3, #32
 8001f7e:	6023      	str	r3, [r4, #0]
 8001f80:	2778      	movs	r7, #120	; 0x78
 8001f82:	4832      	ldr	r0, [pc, #200]	; (800204c <_printf_i+0x240>)
 8001f84:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001f88:	6823      	ldr	r3, [r4, #0]
 8001f8a:	6829      	ldr	r1, [r5, #0]
 8001f8c:	061f      	lsls	r7, r3, #24
 8001f8e:	f851 6b04 	ldr.w	r6, [r1], #4
 8001f92:	d402      	bmi.n	8001f9a <_printf_i+0x18e>
 8001f94:	065f      	lsls	r7, r3, #25
 8001f96:	bf48      	it	mi
 8001f98:	b2b6      	uxthmi	r6, r6
 8001f9a:	07df      	lsls	r7, r3, #31
 8001f9c:	bf48      	it	mi
 8001f9e:	f043 0320 	orrmi.w	r3, r3, #32
 8001fa2:	6029      	str	r1, [r5, #0]
 8001fa4:	bf48      	it	mi
 8001fa6:	6023      	strmi	r3, [r4, #0]
 8001fa8:	b91e      	cbnz	r6, 8001fb2 <_printf_i+0x1a6>
 8001faa:	6823      	ldr	r3, [r4, #0]
 8001fac:	f023 0320 	bic.w	r3, r3, #32
 8001fb0:	6023      	str	r3, [r4, #0]
 8001fb2:	2310      	movs	r3, #16
 8001fb4:	e7a6      	b.n	8001f04 <_printf_i+0xf8>
 8001fb6:	4824      	ldr	r0, [pc, #144]	; (8002048 <_printf_i+0x23c>)
 8001fb8:	e7e4      	b.n	8001f84 <_printf_i+0x178>
 8001fba:	4615      	mov	r5, r2
 8001fbc:	e7bd      	b.n	8001f3a <_printf_i+0x12e>
 8001fbe:	682b      	ldr	r3, [r5, #0]
 8001fc0:	6826      	ldr	r6, [r4, #0]
 8001fc2:	1d18      	adds	r0, r3, #4
 8001fc4:	6961      	ldr	r1, [r4, #20]
 8001fc6:	6028      	str	r0, [r5, #0]
 8001fc8:	0635      	lsls	r5, r6, #24
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	d501      	bpl.n	8001fd2 <_printf_i+0x1c6>
 8001fce:	6019      	str	r1, [r3, #0]
 8001fd0:	e002      	b.n	8001fd8 <_printf_i+0x1cc>
 8001fd2:	0670      	lsls	r0, r6, #25
 8001fd4:	d5fb      	bpl.n	8001fce <_printf_i+0x1c2>
 8001fd6:	8019      	strh	r1, [r3, #0]
 8001fd8:	2300      	movs	r3, #0
 8001fda:	4615      	mov	r5, r2
 8001fdc:	6123      	str	r3, [r4, #16]
 8001fde:	e7bc      	b.n	8001f5a <_printf_i+0x14e>
 8001fe0:	682b      	ldr	r3, [r5, #0]
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	1d1a      	adds	r2, r3, #4
 8001fe6:	602a      	str	r2, [r5, #0]
 8001fe8:	681d      	ldr	r5, [r3, #0]
 8001fea:	6862      	ldr	r2, [r4, #4]
 8001fec:	4628      	mov	r0, r5
 8001fee:	f000 f859 	bl	80020a4 <memchr>
 8001ff2:	b108      	cbz	r0, 8001ff8 <_printf_i+0x1ec>
 8001ff4:	1b40      	subs	r0, r0, r5
 8001ff6:	6060      	str	r0, [r4, #4]
 8001ff8:	6863      	ldr	r3, [r4, #4]
 8001ffa:	6123      	str	r3, [r4, #16]
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002002:	e7aa      	b.n	8001f5a <_printf_i+0x14e>
 8002004:	462a      	mov	r2, r5
 8002006:	4649      	mov	r1, r9
 8002008:	4640      	mov	r0, r8
 800200a:	6923      	ldr	r3, [r4, #16]
 800200c:	47d0      	blx	sl
 800200e:	3001      	adds	r0, #1
 8002010:	d0ad      	beq.n	8001f6e <_printf_i+0x162>
 8002012:	6823      	ldr	r3, [r4, #0]
 8002014:	079b      	lsls	r3, r3, #30
 8002016:	d413      	bmi.n	8002040 <_printf_i+0x234>
 8002018:	68e0      	ldr	r0, [r4, #12]
 800201a:	9b03      	ldr	r3, [sp, #12]
 800201c:	4298      	cmp	r0, r3
 800201e:	bfb8      	it	lt
 8002020:	4618      	movlt	r0, r3
 8002022:	e7a6      	b.n	8001f72 <_printf_i+0x166>
 8002024:	2301      	movs	r3, #1
 8002026:	4632      	mov	r2, r6
 8002028:	4649      	mov	r1, r9
 800202a:	4640      	mov	r0, r8
 800202c:	47d0      	blx	sl
 800202e:	3001      	adds	r0, #1
 8002030:	d09d      	beq.n	8001f6e <_printf_i+0x162>
 8002032:	3501      	adds	r5, #1
 8002034:	68e3      	ldr	r3, [r4, #12]
 8002036:	9903      	ldr	r1, [sp, #12]
 8002038:	1a5b      	subs	r3, r3, r1
 800203a:	42ab      	cmp	r3, r5
 800203c:	dcf2      	bgt.n	8002024 <_printf_i+0x218>
 800203e:	e7eb      	b.n	8002018 <_printf_i+0x20c>
 8002040:	2500      	movs	r5, #0
 8002042:	f104 0619 	add.w	r6, r4, #25
 8002046:	e7f5      	b.n	8002034 <_printf_i+0x228>
 8002048:	080021bf 	.word	0x080021bf
 800204c:	080021d0 	.word	0x080021d0

08002050 <memmove>:
 8002050:	4288      	cmp	r0, r1
 8002052:	b510      	push	{r4, lr}
 8002054:	eb01 0402 	add.w	r4, r1, r2
 8002058:	d902      	bls.n	8002060 <memmove+0x10>
 800205a:	4284      	cmp	r4, r0
 800205c:	4623      	mov	r3, r4
 800205e:	d807      	bhi.n	8002070 <memmove+0x20>
 8002060:	1e43      	subs	r3, r0, #1
 8002062:	42a1      	cmp	r1, r4
 8002064:	d008      	beq.n	8002078 <memmove+0x28>
 8002066:	f811 2b01 	ldrb.w	r2, [r1], #1
 800206a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800206e:	e7f8      	b.n	8002062 <memmove+0x12>
 8002070:	4601      	mov	r1, r0
 8002072:	4402      	add	r2, r0
 8002074:	428a      	cmp	r2, r1
 8002076:	d100      	bne.n	800207a <memmove+0x2a>
 8002078:	bd10      	pop	{r4, pc}
 800207a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800207e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002082:	e7f7      	b.n	8002074 <memmove+0x24>

08002084 <_sbrk_r>:
 8002084:	b538      	push	{r3, r4, r5, lr}
 8002086:	2300      	movs	r3, #0
 8002088:	4d05      	ldr	r5, [pc, #20]	; (80020a0 <_sbrk_r+0x1c>)
 800208a:	4604      	mov	r4, r0
 800208c:	4608      	mov	r0, r1
 800208e:	602b      	str	r3, [r5, #0]
 8002090:	f7fe fa10 	bl	80004b4 <_sbrk>
 8002094:	1c43      	adds	r3, r0, #1
 8002096:	d102      	bne.n	800209e <_sbrk_r+0x1a>
 8002098:	682b      	ldr	r3, [r5, #0]
 800209a:	b103      	cbz	r3, 800209e <_sbrk_r+0x1a>
 800209c:	6023      	str	r3, [r4, #0]
 800209e:	bd38      	pop	{r3, r4, r5, pc}
 80020a0:	20000200 	.word	0x20000200

080020a4 <memchr>:
 80020a4:	4603      	mov	r3, r0
 80020a6:	b510      	push	{r4, lr}
 80020a8:	b2c9      	uxtb	r1, r1
 80020aa:	4402      	add	r2, r0
 80020ac:	4293      	cmp	r3, r2
 80020ae:	4618      	mov	r0, r3
 80020b0:	d101      	bne.n	80020b6 <memchr+0x12>
 80020b2:	2000      	movs	r0, #0
 80020b4:	e003      	b.n	80020be <memchr+0x1a>
 80020b6:	7804      	ldrb	r4, [r0, #0]
 80020b8:	3301      	adds	r3, #1
 80020ba:	428c      	cmp	r4, r1
 80020bc:	d1f6      	bne.n	80020ac <memchr+0x8>
 80020be:	bd10      	pop	{r4, pc}

080020c0 <memcpy>:
 80020c0:	440a      	add	r2, r1
 80020c2:	4291      	cmp	r1, r2
 80020c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80020c8:	d100      	bne.n	80020cc <memcpy+0xc>
 80020ca:	4770      	bx	lr
 80020cc:	b510      	push	{r4, lr}
 80020ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80020d2:	4291      	cmp	r1, r2
 80020d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80020d8:	d1f9      	bne.n	80020ce <memcpy+0xe>
 80020da:	bd10      	pop	{r4, pc}

080020dc <_realloc_r>:
 80020dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020e0:	4680      	mov	r8, r0
 80020e2:	4614      	mov	r4, r2
 80020e4:	460e      	mov	r6, r1
 80020e6:	b921      	cbnz	r1, 80020f2 <_realloc_r+0x16>
 80020e8:	4611      	mov	r1, r2
 80020ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80020ee:	f7ff bc37 	b.w	8001960 <_malloc_r>
 80020f2:	b92a      	cbnz	r2, 8002100 <_realloc_r+0x24>
 80020f4:	f7ff fbcc 	bl	8001890 <_free_r>
 80020f8:	4625      	mov	r5, r4
 80020fa:	4628      	mov	r0, r5
 80020fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002100:	f000 f81b 	bl	800213a <_malloc_usable_size_r>
 8002104:	4284      	cmp	r4, r0
 8002106:	4607      	mov	r7, r0
 8002108:	d802      	bhi.n	8002110 <_realloc_r+0x34>
 800210a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800210e:	d812      	bhi.n	8002136 <_realloc_r+0x5a>
 8002110:	4621      	mov	r1, r4
 8002112:	4640      	mov	r0, r8
 8002114:	f7ff fc24 	bl	8001960 <_malloc_r>
 8002118:	4605      	mov	r5, r0
 800211a:	2800      	cmp	r0, #0
 800211c:	d0ed      	beq.n	80020fa <_realloc_r+0x1e>
 800211e:	42bc      	cmp	r4, r7
 8002120:	4622      	mov	r2, r4
 8002122:	4631      	mov	r1, r6
 8002124:	bf28      	it	cs
 8002126:	463a      	movcs	r2, r7
 8002128:	f7ff ffca 	bl	80020c0 <memcpy>
 800212c:	4631      	mov	r1, r6
 800212e:	4640      	mov	r0, r8
 8002130:	f7ff fbae 	bl	8001890 <_free_r>
 8002134:	e7e1      	b.n	80020fa <_realloc_r+0x1e>
 8002136:	4635      	mov	r5, r6
 8002138:	e7df      	b.n	80020fa <_realloc_r+0x1e>

0800213a <_malloc_usable_size_r>:
 800213a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800213e:	1f18      	subs	r0, r3, #4
 8002140:	2b00      	cmp	r3, #0
 8002142:	bfbc      	itt	lt
 8002144:	580b      	ldrlt	r3, [r1, r0]
 8002146:	18c0      	addlt	r0, r0, r3
 8002148:	4770      	bx	lr
	...

0800214c <_init>:
 800214c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800214e:	bf00      	nop
 8002150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002152:	bc08      	pop	{r3}
 8002154:	469e      	mov	lr, r3
 8002156:	4770      	bx	lr

08002158 <_fini>:
 8002158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800215a:	bf00      	nop
 800215c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800215e:	bc08      	pop	{r3}
 8002160:	469e      	mov	lr, r3
 8002162:	4770      	bx	lr
