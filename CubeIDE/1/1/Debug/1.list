
1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003784  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08003890  08003890  00013890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800392c  0800392c  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  0800392c  0800392c  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800392c  0800392c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800392c  0800392c  0001392c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003930  08003930  00013930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003934  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  20000068  0800399c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  0800399c  00020268  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b562  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b71  00000000  00000000  0002b636  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c38  00000000  00000000  0002d1a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000987  00000000  00000000  0002dde0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000184bb  00000000  00000000  0002e767  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d8d2  00000000  00000000  00046c22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008bd9d  00000000  00000000  000544f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003be4  00000000  00000000  000e0294  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000e3e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08003878 	.word	0x08003878

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08003878 	.word	0x08003878

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b08a      	sub	sp, #40	; 0x28
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t message[35] = {'\0'};
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	f107 0308 	add.w	r3, r7, #8
 800015a:	221f      	movs	r2, #31
 800015c:	2100      	movs	r1, #0
 800015e:	4618      	mov	r0, r3
 8000160:	f002 fbad 	bl	80028be <memset>
	uint8_t num = 0;
 8000164:	2300      	movs	r3, #0
 8000166:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800016a:	f000 fb75 	bl	8000858 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800016e:	f000 f837 	bl	80001e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000172:	f000 f91b 	bl	80003ac <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000176:	f000 f8ef 	bl	8000358 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800017a:	f000 f879 	bl	8000270 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800017e:	2100      	movs	r1, #0
 8000180:	4812      	ldr	r0, [pc, #72]	; (80001cc <main+0x80>)
 8000182:	f001 fb79 	bl	8001878 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  sprintf(message, "Welcome to lab33! Counting = %d\r\n", num);
 8000186:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800018a:	1d3b      	adds	r3, r7, #4
 800018c:	4910      	ldr	r1, [pc, #64]	; (80001d0 <main+0x84>)
 800018e:	4618      	mov	r0, r3
 8000190:	f002 fb32 	bl	80027f8 <siprintf>
	  	  HAL_UART_Transmit(&huart1, message, sizeof(message), 100);
 8000194:	1d39      	adds	r1, r7, #4
 8000196:	2364      	movs	r3, #100	; 0x64
 8000198:	2223      	movs	r2, #35	; 0x23
 800019a:	480e      	ldr	r0, [pc, #56]	; (80001d4 <main+0x88>)
 800019c:	f002 f8ea 	bl	8002374 <HAL_UART_Transmit>
	  	  HAL_Delay(100);
 80001a0:	2064      	movs	r0, #100	; 0x64
 80001a2:	f000 fbbb 	bl	800091c <HAL_Delay>
	  	  num++;
 80001a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80001aa:	3301      	adds	r3, #1
 80001ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  	printf("Hello %s  %d \r\n", "worlddd", num);
 80001b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80001b4:	461a      	mov	r2, r3
 80001b6:	4908      	ldr	r1, [pc, #32]	; (80001d8 <main+0x8c>)
 80001b8:	4808      	ldr	r0, [pc, #32]	; (80001dc <main+0x90>)
 80001ba:	f002 fb0b 	bl	80027d4 <iprintf>
	  	TIM2->CCR1 = 200;
 80001be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001c2:	22c8      	movs	r2, #200	; 0xc8
 80001c4:	635a      	str	r2, [r3, #52]	; 0x34
   main_loop();
 80001c6:	f000 f983 	bl	80004d0 <main_loop>
  {
 80001ca:	e7dc      	b.n	8000186 <main+0x3a>
 80001cc:	20000084 	.word	0x20000084
 80001d0:	08003890 	.word	0x08003890
 80001d4:	200000cc 	.word	0x200000cc
 80001d8:	080038b4 	.word	0x080038b4
 80001dc:	080038bc 	.word	0x080038bc

080001e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b090      	sub	sp, #64	; 0x40
 80001e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001e6:	f107 0318 	add.w	r3, r7, #24
 80001ea:	2228      	movs	r2, #40	; 0x28
 80001ec:	2100      	movs	r1, #0
 80001ee:	4618      	mov	r0, r3
 80001f0:	f002 fb65 	bl	80028be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f4:	1d3b      	adds	r3, r7, #4
 80001f6:	2200      	movs	r2, #0
 80001f8:	601a      	str	r2, [r3, #0]
 80001fa:	605a      	str	r2, [r3, #4]
 80001fc:	609a      	str	r2, [r3, #8]
 80001fe:	60da      	str	r2, [r3, #12]
 8000200:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000202:	2302      	movs	r3, #2
 8000204:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000206:	2301      	movs	r3, #1
 8000208:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800020a:	2310      	movs	r3, #16
 800020c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800020e:	2302      	movs	r3, #2
 8000210:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000212:	2300      	movs	r3, #0
 8000214:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000216:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800021a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800021c:	f107 0318 	add.w	r3, r7, #24
 8000220:	4618      	mov	r0, r3
 8000222:	f000 fe39 	bl	8000e98 <HAL_RCC_OscConfig>
 8000226:	4603      	mov	r3, r0
 8000228:	2b00      	cmp	r3, #0
 800022a:	d001      	beq.n	8000230 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800022c:	f000 f94a 	bl	80004c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000230:	230f      	movs	r3, #15
 8000232:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000234:	2302      	movs	r3, #2
 8000236:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000238:	2300      	movs	r3, #0
 800023a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800023c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000240:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000242:	2300      	movs	r3, #0
 8000244:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000246:	1d3b      	adds	r3, r7, #4
 8000248:	2102      	movs	r1, #2
 800024a:	4618      	mov	r0, r3
 800024c:	f001 f8a6 	bl	800139c <HAL_RCC_ClockConfig>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d001      	beq.n	800025a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000256:	f000 f935 	bl	80004c4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_1);
 800025a:	2200      	movs	r2, #0
 800025c:	f04f 61e0 	mov.w	r1, #117440512	; 0x7000000
 8000260:	2000      	movs	r0, #0
 8000262:	f001 f985 	bl	8001570 <HAL_RCC_MCOConfig>
}
 8000266:	bf00      	nop
 8000268:	3740      	adds	r7, #64	; 0x40
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
	...

08000270 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b08e      	sub	sp, #56	; 0x38
 8000274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000276:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800027a:	2200      	movs	r2, #0
 800027c:	601a      	str	r2, [r3, #0]
 800027e:	605a      	str	r2, [r3, #4]
 8000280:	609a      	str	r2, [r3, #8]
 8000282:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000284:	f107 0320 	add.w	r3, r7, #32
 8000288:	2200      	movs	r2, #0
 800028a:	601a      	str	r2, [r3, #0]
 800028c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800028e:	1d3b      	adds	r3, r7, #4
 8000290:	2200      	movs	r2, #0
 8000292:	601a      	str	r2, [r3, #0]
 8000294:	605a      	str	r2, [r3, #4]
 8000296:	609a      	str	r2, [r3, #8]
 8000298:	60da      	str	r2, [r3, #12]
 800029a:	611a      	str	r2, [r3, #16]
 800029c:	615a      	str	r2, [r3, #20]
 800029e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002a0:	4b2c      	ldr	r3, [pc, #176]	; (8000354 <MX_TIM2_Init+0xe4>)
 80002a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80002a8:	4b2a      	ldr	r3, [pc, #168]	; (8000354 <MX_TIM2_Init+0xe4>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002ae:	4b29      	ldr	r3, [pc, #164]	; (8000354 <MX_TIM2_Init+0xe4>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 80002b4:	4b27      	ldr	r3, [pc, #156]	; (8000354 <MX_TIM2_Init+0xe4>)
 80002b6:	22ff      	movs	r2, #255	; 0xff
 80002b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002ba:	4b26      	ldr	r3, [pc, #152]	; (8000354 <MX_TIM2_Init+0xe4>)
 80002bc:	2200      	movs	r2, #0
 80002be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80002c0:	4b24      	ldr	r3, [pc, #144]	; (8000354 <MX_TIM2_Init+0xe4>)
 80002c2:	2280      	movs	r2, #128	; 0x80
 80002c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002c6:	4823      	ldr	r0, [pc, #140]	; (8000354 <MX_TIM2_Init+0xe4>)
 80002c8:	f001 fa2e 	bl	8001728 <HAL_TIM_Base_Init>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80002d2:	f000 f8f7 	bl	80004c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002da:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80002dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002e0:	4619      	mov	r1, r3
 80002e2:	481c      	ldr	r0, [pc, #112]	; (8000354 <MX_TIM2_Init+0xe4>)
 80002e4:	f001 fc2c 	bl	8001b40 <HAL_TIM_ConfigClockSource>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80002ee:	f000 f8e9 	bl	80004c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80002f2:	4818      	ldr	r0, [pc, #96]	; (8000354 <MX_TIM2_Init+0xe4>)
 80002f4:	f001 fa67 	bl	80017c6 <HAL_TIM_PWM_Init>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80002fe:	f000 f8e1 	bl	80004c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000302:	2300      	movs	r3, #0
 8000304:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000306:	2300      	movs	r3, #0
 8000308:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800030a:	f107 0320 	add.w	r3, r7, #32
 800030e:	4619      	mov	r1, r3
 8000310:	4810      	ldr	r0, [pc, #64]	; (8000354 <MX_TIM2_Init+0xe4>)
 8000312:	f001 ff81 	bl	8002218 <HAL_TIMEx_MasterConfigSynchronization>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 800031c:	f000 f8d2 	bl	80004c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000320:	2360      	movs	r3, #96	; 0x60
 8000322:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000324:	2300      	movs	r3, #0
 8000326:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000328:	2300      	movs	r3, #0
 800032a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800032c:	2300      	movs	r3, #0
 800032e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000330:	1d3b      	adds	r3, r7, #4
 8000332:	2200      	movs	r2, #0
 8000334:	4619      	mov	r1, r3
 8000336:	4807      	ldr	r0, [pc, #28]	; (8000354 <MX_TIM2_Init+0xe4>)
 8000338:	f001 fb40 	bl	80019bc <HAL_TIM_PWM_ConfigChannel>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000342:	f000 f8bf 	bl	80004c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000346:	4803      	ldr	r0, [pc, #12]	; (8000354 <MX_TIM2_Init+0xe4>)
 8000348:	f000 f91e 	bl	8000588 <HAL_TIM_MspPostInit>

}
 800034c:	bf00      	nop
 800034e:	3738      	adds	r7, #56	; 0x38
 8000350:	46bd      	mov	sp, r7
 8000352:	bd80      	pop	{r7, pc}
 8000354:	20000084 	.word	0x20000084

08000358 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800035c:	4b11      	ldr	r3, [pc, #68]	; (80003a4 <MX_USART1_UART_Init+0x4c>)
 800035e:	4a12      	ldr	r2, [pc, #72]	; (80003a8 <MX_USART1_UART_Init+0x50>)
 8000360:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000362:	4b10      	ldr	r3, [pc, #64]	; (80003a4 <MX_USART1_UART_Init+0x4c>)
 8000364:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000368:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800036a:	4b0e      	ldr	r3, [pc, #56]	; (80003a4 <MX_USART1_UART_Init+0x4c>)
 800036c:	2200      	movs	r2, #0
 800036e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000370:	4b0c      	ldr	r3, [pc, #48]	; (80003a4 <MX_USART1_UART_Init+0x4c>)
 8000372:	2200      	movs	r2, #0
 8000374:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000376:	4b0b      	ldr	r3, [pc, #44]	; (80003a4 <MX_USART1_UART_Init+0x4c>)
 8000378:	2200      	movs	r2, #0
 800037a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800037c:	4b09      	ldr	r3, [pc, #36]	; (80003a4 <MX_USART1_UART_Init+0x4c>)
 800037e:	220c      	movs	r2, #12
 8000380:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000382:	4b08      	ldr	r3, [pc, #32]	; (80003a4 <MX_USART1_UART_Init+0x4c>)
 8000384:	2200      	movs	r2, #0
 8000386:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000388:	4b06      	ldr	r3, [pc, #24]	; (80003a4 <MX_USART1_UART_Init+0x4c>)
 800038a:	2200      	movs	r2, #0
 800038c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800038e:	4805      	ldr	r0, [pc, #20]	; (80003a4 <MX_USART1_UART_Init+0x4c>)
 8000390:	f001 ffa0 	bl	80022d4 <HAL_UART_Init>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800039a:	f000 f893 	bl	80004c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800039e:	bf00      	nop
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	200000cc 	.word	0x200000cc
 80003a8:	40013800 	.word	0x40013800

080003ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b088      	sub	sp, #32
 80003b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b2:	f107 0310 	add.w	r3, r7, #16
 80003b6:	2200      	movs	r2, #0
 80003b8:	601a      	str	r2, [r3, #0]
 80003ba:	605a      	str	r2, [r3, #4]
 80003bc:	609a      	str	r2, [r3, #8]
 80003be:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003c0:	4b31      	ldr	r3, [pc, #196]	; (8000488 <MX_GPIO_Init+0xdc>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	4a30      	ldr	r2, [pc, #192]	; (8000488 <MX_GPIO_Init+0xdc>)
 80003c6:	f043 0310 	orr.w	r3, r3, #16
 80003ca:	6193      	str	r3, [r2, #24]
 80003cc:	4b2e      	ldr	r3, [pc, #184]	; (8000488 <MX_GPIO_Init+0xdc>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	f003 0310 	and.w	r3, r3, #16
 80003d4:	60fb      	str	r3, [r7, #12]
 80003d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003d8:	4b2b      	ldr	r3, [pc, #172]	; (8000488 <MX_GPIO_Init+0xdc>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	4a2a      	ldr	r2, [pc, #168]	; (8000488 <MX_GPIO_Init+0xdc>)
 80003de:	f043 0320 	orr.w	r3, r3, #32
 80003e2:	6193      	str	r3, [r2, #24]
 80003e4:	4b28      	ldr	r3, [pc, #160]	; (8000488 <MX_GPIO_Init+0xdc>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	f003 0320 	and.w	r3, r3, #32
 80003ec:	60bb      	str	r3, [r7, #8]
 80003ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f0:	4b25      	ldr	r3, [pc, #148]	; (8000488 <MX_GPIO_Init+0xdc>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	4a24      	ldr	r2, [pc, #144]	; (8000488 <MX_GPIO_Init+0xdc>)
 80003f6:	f043 0304 	orr.w	r3, r3, #4
 80003fa:	6193      	str	r3, [r2, #24]
 80003fc:	4b22      	ldr	r3, [pc, #136]	; (8000488 <MX_GPIO_Init+0xdc>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	f003 0304 	and.w	r3, r3, #4
 8000404:	607b      	str	r3, [r7, #4]
 8000406:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000408:	4b1f      	ldr	r3, [pc, #124]	; (8000488 <MX_GPIO_Init+0xdc>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	4a1e      	ldr	r2, [pc, #120]	; (8000488 <MX_GPIO_Init+0xdc>)
 800040e:	f043 0308 	orr.w	r3, r3, #8
 8000412:	6193      	str	r3, [r2, #24]
 8000414:	4b1c      	ldr	r3, [pc, #112]	; (8000488 <MX_GPIO_Init+0xdc>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	f003 0308 	and.w	r3, r3, #8
 800041c:	603b      	str	r3, [r7, #0]
 800041e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000420:	2200      	movs	r2, #0
 8000422:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000426:	4819      	ldr	r0, [pc, #100]	; (800048c <MX_GPIO_Init+0xe0>)
 8000428:	f000 fd04 	bl	8000e34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800042c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000430:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000432:	2301      	movs	r3, #1
 8000434:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000436:	2300      	movs	r3, #0
 8000438:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800043a:	2302      	movs	r3, #2
 800043c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800043e:	f107 0310 	add.w	r3, r7, #16
 8000442:	4619      	mov	r1, r3
 8000444:	4811      	ldr	r0, [pc, #68]	; (800048c <MX_GPIO_Init+0xe0>)
 8000446:	f000 fb71 	bl	8000b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800044a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800044e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000450:	2300      	movs	r3, #0
 8000452:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000454:	2300      	movs	r3, #0
 8000456:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000458:	f107 0310 	add.w	r3, r7, #16
 800045c:	4619      	mov	r1, r3
 800045e:	480c      	ldr	r0, [pc, #48]	; (8000490 <MX_GPIO_Init+0xe4>)
 8000460:	f000 fb64 	bl	8000b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000464:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000468:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800046a:	2302      	movs	r3, #2
 800046c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800046e:	2302      	movs	r3, #2
 8000470:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000472:	f107 0310 	add.w	r3, r7, #16
 8000476:	4619      	mov	r1, r3
 8000478:	4806      	ldr	r0, [pc, #24]	; (8000494 <MX_GPIO_Init+0xe8>)
 800047a:	f000 fb57 	bl	8000b2c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800047e:	bf00      	nop
 8000480:	3720      	adds	r7, #32
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	40021000 	.word	0x40021000
 800048c:	40011000 	.word	0x40011000
 8000490:	40010c00 	.word	0x40010c00
 8000494:	40010800 	.word	0x40010800

08000498 <_write>:

/* USER CODE BEGIN 4 */
int _write(int fd, char* ptr, int len) {
 8000498:	b580      	push	{r7, lr}
 800049a:	b084      	sub	sp, #16
 800049c:	af00      	add	r7, sp, #0
 800049e:	60f8      	str	r0, [r7, #12]
 80004a0:	60b9      	str	r1, [r7, #8]
 80004a2:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	b29a      	uxth	r2, r3
 80004a8:	f04f 33ff 	mov.w	r3, #4294967295
 80004ac:	68b9      	ldr	r1, [r7, #8]
 80004ae:	4804      	ldr	r0, [pc, #16]	; (80004c0 <_write+0x28>)
 80004b0:	f001 ff60 	bl	8002374 <HAL_UART_Transmit>
    return len;
 80004b4:	687b      	ldr	r3, [r7, #4]
}
 80004b6:	4618      	mov	r0, r3
 80004b8:	3710      	adds	r7, #16
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	200000cc 	.word	0x200000cc

080004c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004c8:	b672      	cpsid	i
}
 80004ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004cc:	e7fe      	b.n	80004cc <Error_Handler+0x8>
	...

080004d0 <main_loop>:
#include "main.h"

void main_loop(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); /* USER CODE END WHILE */
 80004d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004d8:	4803      	ldr	r0, [pc, #12]	; (80004e8 <main_loop+0x18>)
 80004da:	f000 fcc3 	bl	8000e64 <HAL_GPIO_TogglePin>
HAL_Delay(10);
 80004de:	200a      	movs	r0, #10
 80004e0:	f000 fa1c 	bl	800091c <HAL_Delay>
}
 80004e4:	bf00      	nop
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	40011000 	.word	0x40011000

080004ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b085      	sub	sp, #20
 80004f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004f2:	4b15      	ldr	r3, [pc, #84]	; (8000548 <HAL_MspInit+0x5c>)
 80004f4:	699b      	ldr	r3, [r3, #24]
 80004f6:	4a14      	ldr	r2, [pc, #80]	; (8000548 <HAL_MspInit+0x5c>)
 80004f8:	f043 0301 	orr.w	r3, r3, #1
 80004fc:	6193      	str	r3, [r2, #24]
 80004fe:	4b12      	ldr	r3, [pc, #72]	; (8000548 <HAL_MspInit+0x5c>)
 8000500:	699b      	ldr	r3, [r3, #24]
 8000502:	f003 0301 	and.w	r3, r3, #1
 8000506:	60bb      	str	r3, [r7, #8]
 8000508:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800050a:	4b0f      	ldr	r3, [pc, #60]	; (8000548 <HAL_MspInit+0x5c>)
 800050c:	69db      	ldr	r3, [r3, #28]
 800050e:	4a0e      	ldr	r2, [pc, #56]	; (8000548 <HAL_MspInit+0x5c>)
 8000510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000514:	61d3      	str	r3, [r2, #28]
 8000516:	4b0c      	ldr	r3, [pc, #48]	; (8000548 <HAL_MspInit+0x5c>)
 8000518:	69db      	ldr	r3, [r3, #28]
 800051a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800051e:	607b      	str	r3, [r7, #4]
 8000520:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000522:	4b0a      	ldr	r3, [pc, #40]	; (800054c <HAL_MspInit+0x60>)
 8000524:	685b      	ldr	r3, [r3, #4]
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	4a04      	ldr	r2, [pc, #16]	; (800054c <HAL_MspInit+0x60>)
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800053e:	bf00      	nop
 8000540:	3714      	adds	r7, #20
 8000542:	46bd      	mov	sp, r7
 8000544:	bc80      	pop	{r7}
 8000546:	4770      	bx	lr
 8000548:	40021000 	.word	0x40021000
 800054c:	40010000 	.word	0x40010000

08000550 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000550:	b480      	push	{r7}
 8000552:	b085      	sub	sp, #20
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000560:	d10b      	bne.n	800057a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000562:	4b08      	ldr	r3, [pc, #32]	; (8000584 <HAL_TIM_Base_MspInit+0x34>)
 8000564:	69db      	ldr	r3, [r3, #28]
 8000566:	4a07      	ldr	r2, [pc, #28]	; (8000584 <HAL_TIM_Base_MspInit+0x34>)
 8000568:	f043 0301 	orr.w	r3, r3, #1
 800056c:	61d3      	str	r3, [r2, #28]
 800056e:	4b05      	ldr	r3, [pc, #20]	; (8000584 <HAL_TIM_Base_MspInit+0x34>)
 8000570:	69db      	ldr	r3, [r3, #28]
 8000572:	f003 0301 	and.w	r3, r3, #1
 8000576:	60fb      	str	r3, [r7, #12]
 8000578:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800057a:	bf00      	nop
 800057c:	3714      	adds	r7, #20
 800057e:	46bd      	mov	sp, r7
 8000580:	bc80      	pop	{r7}
 8000582:	4770      	bx	lr
 8000584:	40021000 	.word	0x40021000

08000588 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b088      	sub	sp, #32
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000590:	f107 030c 	add.w	r3, r7, #12
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80005a6:	d12a      	bne.n	80005fe <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a8:	4b17      	ldr	r3, [pc, #92]	; (8000608 <HAL_TIM_MspPostInit+0x80>)
 80005aa:	699b      	ldr	r3, [r3, #24]
 80005ac:	4a16      	ldr	r2, [pc, #88]	; (8000608 <HAL_TIM_MspPostInit+0x80>)
 80005ae:	f043 0304 	orr.w	r3, r3, #4
 80005b2:	6193      	str	r3, [r2, #24]
 80005b4:	4b14      	ldr	r3, [pc, #80]	; (8000608 <HAL_TIM_MspPostInit+0x80>)
 80005b6:	699b      	ldr	r3, [r3, #24]
 80005b8:	f003 0304 	and.w	r3, r3, #4
 80005bc:	60bb      	str	r3, [r7, #8]
 80005be:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80005c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005c4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005c6:	2302      	movs	r3, #2
 80005c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ca:	2302      	movs	r3, #2
 80005cc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ce:	f107 030c 	add.w	r3, r7, #12
 80005d2:	4619      	mov	r1, r3
 80005d4:	480d      	ldr	r0, [pc, #52]	; (800060c <HAL_TIM_MspPostInit+0x84>)
 80005d6:	f000 faa9 	bl	8000b2c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80005da:	4b0d      	ldr	r3, [pc, #52]	; (8000610 <HAL_TIM_MspPostInit+0x88>)
 80005dc:	685b      	ldr	r3, [r3, #4]
 80005de:	61fb      	str	r3, [r7, #28]
 80005e0:	69fb      	ldr	r3, [r7, #28]
 80005e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80005e6:	61fb      	str	r3, [r7, #28]
 80005e8:	69fb      	ldr	r3, [r7, #28]
 80005ea:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80005ee:	61fb      	str	r3, [r7, #28]
 80005f0:	69fb      	ldr	r3, [r7, #28]
 80005f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005f6:	61fb      	str	r3, [r7, #28]
 80005f8:	4a05      	ldr	r2, [pc, #20]	; (8000610 <HAL_TIM_MspPostInit+0x88>)
 80005fa:	69fb      	ldr	r3, [r7, #28]
 80005fc:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80005fe:	bf00      	nop
 8000600:	3720      	adds	r7, #32
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40021000 	.word	0x40021000
 800060c:	40010800 	.word	0x40010800
 8000610:	40010000 	.word	0x40010000

08000614 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b088      	sub	sp, #32
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061c:	f107 0310 	add.w	r3, r7, #16
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4a1c      	ldr	r2, [pc, #112]	; (80006a0 <HAL_UART_MspInit+0x8c>)
 8000630:	4293      	cmp	r3, r2
 8000632:	d131      	bne.n	8000698 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000634:	4b1b      	ldr	r3, [pc, #108]	; (80006a4 <HAL_UART_MspInit+0x90>)
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	4a1a      	ldr	r2, [pc, #104]	; (80006a4 <HAL_UART_MspInit+0x90>)
 800063a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800063e:	6193      	str	r3, [r2, #24]
 8000640:	4b18      	ldr	r3, [pc, #96]	; (80006a4 <HAL_UART_MspInit+0x90>)
 8000642:	699b      	ldr	r3, [r3, #24]
 8000644:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000648:	60fb      	str	r3, [r7, #12]
 800064a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800064c:	4b15      	ldr	r3, [pc, #84]	; (80006a4 <HAL_UART_MspInit+0x90>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	4a14      	ldr	r2, [pc, #80]	; (80006a4 <HAL_UART_MspInit+0x90>)
 8000652:	f043 0304 	orr.w	r3, r3, #4
 8000656:	6193      	str	r3, [r2, #24]
 8000658:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <HAL_UART_MspInit+0x90>)
 800065a:	699b      	ldr	r3, [r3, #24]
 800065c:	f003 0304 	and.w	r3, r3, #4
 8000660:	60bb      	str	r3, [r7, #8]
 8000662:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000664:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000668:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800066a:	2302      	movs	r3, #2
 800066c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800066e:	2303      	movs	r3, #3
 8000670:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000672:	f107 0310 	add.w	r3, r7, #16
 8000676:	4619      	mov	r1, r3
 8000678:	480b      	ldr	r0, [pc, #44]	; (80006a8 <HAL_UART_MspInit+0x94>)
 800067a:	f000 fa57 	bl	8000b2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800067e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000682:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000684:	2300      	movs	r3, #0
 8000686:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800068c:	f107 0310 	add.w	r3, r7, #16
 8000690:	4619      	mov	r1, r3
 8000692:	4805      	ldr	r0, [pc, #20]	; (80006a8 <HAL_UART_MspInit+0x94>)
 8000694:	f000 fa4a 	bl	8000b2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000698:	bf00      	nop
 800069a:	3720      	adds	r7, #32
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40013800 	.word	0x40013800
 80006a4:	40021000 	.word	0x40021000
 80006a8:	40010800 	.word	0x40010800

080006ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <NMI_Handler+0x4>

080006b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006b2:	b480      	push	{r7}
 80006b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006b6:	e7fe      	b.n	80006b6 <HardFault_Handler+0x4>

080006b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006bc:	e7fe      	b.n	80006bc <MemManage_Handler+0x4>

080006be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006be:	b480      	push	{r7}
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006c2:	e7fe      	b.n	80006c2 <BusFault_Handler+0x4>

080006c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006c8:	e7fe      	b.n	80006c8 <UsageFault_Handler+0x4>

080006ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006ca:	b480      	push	{r7}
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bc80      	pop	{r7}
 80006d4:	4770      	bx	lr

080006d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006d6:	b480      	push	{r7}
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006da:	bf00      	nop
 80006dc:	46bd      	mov	sp, r7
 80006de:	bc80      	pop	{r7}
 80006e0:	4770      	bx	lr

080006e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006e2:	b480      	push	{r7}
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006e6:	bf00      	nop
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bc80      	pop	{r7}
 80006ec:	4770      	bx	lr

080006ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006ee:	b580      	push	{r7, lr}
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006f2:	f000 f8f7 	bl	80008e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}

080006fa <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006fa:	b580      	push	{r7, lr}
 80006fc:	b086      	sub	sp, #24
 80006fe:	af00      	add	r7, sp, #0
 8000700:	60f8      	str	r0, [r7, #12]
 8000702:	60b9      	str	r1, [r7, #8]
 8000704:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000706:	2300      	movs	r3, #0
 8000708:	617b      	str	r3, [r7, #20]
 800070a:	e00a      	b.n	8000722 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800070c:	f3af 8000 	nop.w
 8000710:	4601      	mov	r1, r0
 8000712:	68bb      	ldr	r3, [r7, #8]
 8000714:	1c5a      	adds	r2, r3, #1
 8000716:	60ba      	str	r2, [r7, #8]
 8000718:	b2ca      	uxtb	r2, r1
 800071a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	3301      	adds	r3, #1
 8000720:	617b      	str	r3, [r7, #20]
 8000722:	697a      	ldr	r2, [r7, #20]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	429a      	cmp	r2, r3
 8000728:	dbf0      	blt.n	800070c <_read+0x12>
  }

  return len;
 800072a:	687b      	ldr	r3, [r7, #4]
}
 800072c:	4618      	mov	r0, r3
 800072e:	3718      	adds	r7, #24
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800073c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000740:	4618      	mov	r0, r3
 8000742:	370c      	adds	r7, #12
 8000744:	46bd      	mov	sp, r7
 8000746:	bc80      	pop	{r7}
 8000748:	4770      	bx	lr

0800074a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800074a:	b480      	push	{r7}
 800074c:	b083      	sub	sp, #12
 800074e:	af00      	add	r7, sp, #0
 8000750:	6078      	str	r0, [r7, #4]
 8000752:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800075a:	605a      	str	r2, [r3, #4]
  return 0;
 800075c:	2300      	movs	r3, #0
}
 800075e:	4618      	mov	r0, r3
 8000760:	370c      	adds	r7, #12
 8000762:	46bd      	mov	sp, r7
 8000764:	bc80      	pop	{r7}
 8000766:	4770      	bx	lr

08000768 <_isatty>:

int _isatty(int file)
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000770:	2301      	movs	r3, #1
}
 8000772:	4618      	mov	r0, r3
 8000774:	370c      	adds	r7, #12
 8000776:	46bd      	mov	sp, r7
 8000778:	bc80      	pop	{r7}
 800077a:	4770      	bx	lr

0800077c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800077c:	b480      	push	{r7}
 800077e:	b085      	sub	sp, #20
 8000780:	af00      	add	r7, sp, #0
 8000782:	60f8      	str	r0, [r7, #12]
 8000784:	60b9      	str	r1, [r7, #8]
 8000786:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000788:	2300      	movs	r3, #0
}
 800078a:	4618      	mov	r0, r3
 800078c:	3714      	adds	r7, #20
 800078e:	46bd      	mov	sp, r7
 8000790:	bc80      	pop	{r7}
 8000792:	4770      	bx	lr

08000794 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800079c:	4a14      	ldr	r2, [pc, #80]	; (80007f0 <_sbrk+0x5c>)
 800079e:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <_sbrk+0x60>)
 80007a0:	1ad3      	subs	r3, r2, r3
 80007a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007a8:	4b13      	ldr	r3, [pc, #76]	; (80007f8 <_sbrk+0x64>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d102      	bne.n	80007b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007b0:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <_sbrk+0x64>)
 80007b2:	4a12      	ldr	r2, [pc, #72]	; (80007fc <_sbrk+0x68>)
 80007b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007b6:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <_sbrk+0x64>)
 80007b8:	681a      	ldr	r2, [r3, #0]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	4413      	add	r3, r2
 80007be:	693a      	ldr	r2, [r7, #16]
 80007c0:	429a      	cmp	r2, r3
 80007c2:	d207      	bcs.n	80007d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007c4:	f002 f8ca 	bl	800295c <__errno>
 80007c8:	4603      	mov	r3, r0
 80007ca:	220c      	movs	r2, #12
 80007cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007ce:	f04f 33ff 	mov.w	r3, #4294967295
 80007d2:	e009      	b.n	80007e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007d4:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <_sbrk+0x64>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007da:	4b07      	ldr	r3, [pc, #28]	; (80007f8 <_sbrk+0x64>)
 80007dc:	681a      	ldr	r2, [r3, #0]
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	4413      	add	r3, r2
 80007e2:	4a05      	ldr	r2, [pc, #20]	; (80007f8 <_sbrk+0x64>)
 80007e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007e6:	68fb      	ldr	r3, [r7, #12]
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3718      	adds	r7, #24
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20005000 	.word	0x20005000
 80007f4:	00000400 	.word	0x00000400
 80007f8:	20000114 	.word	0x20000114
 80007fc:	20000268 	.word	0x20000268

08000800 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	bc80      	pop	{r7}
 800080a:	4770      	bx	lr

0800080c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800080c:	f7ff fff8 	bl	8000800 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000810:	480b      	ldr	r0, [pc, #44]	; (8000840 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000812:	490c      	ldr	r1, [pc, #48]	; (8000844 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000814:	4a0c      	ldr	r2, [pc, #48]	; (8000848 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000816:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000818:	e002      	b.n	8000820 <LoopCopyDataInit>

0800081a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800081a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800081c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800081e:	3304      	adds	r3, #4

08000820 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000820:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000822:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000824:	d3f9      	bcc.n	800081a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000826:	4a09      	ldr	r2, [pc, #36]	; (800084c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000828:	4c09      	ldr	r4, [pc, #36]	; (8000850 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800082a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800082c:	e001      	b.n	8000832 <LoopFillZerobss>

0800082e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800082e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000830:	3204      	adds	r2, #4

08000832 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000832:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000834:	d3fb      	bcc.n	800082e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000836:	f002 f897 	bl	8002968 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800083a:	f7ff fc87 	bl	800014c <main>
  bx lr
 800083e:	4770      	bx	lr
  ldr r0, =_sdata
 8000840:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000844:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000848:	08003934 	.word	0x08003934
  ldr r2, =_sbss
 800084c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000850:	20000268 	.word	0x20000268

08000854 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000854:	e7fe      	b.n	8000854 <ADC1_2_IRQHandler>
	...

08000858 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800085c:	4b08      	ldr	r3, [pc, #32]	; (8000880 <HAL_Init+0x28>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a07      	ldr	r2, [pc, #28]	; (8000880 <HAL_Init+0x28>)
 8000862:	f043 0310 	orr.w	r3, r3, #16
 8000866:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000868:	2003      	movs	r0, #3
 800086a:	f000 f92b 	bl	8000ac4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800086e:	200f      	movs	r0, #15
 8000870:	f000 f808 	bl	8000884 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000874:	f7ff fe3a 	bl	80004ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000878:	2300      	movs	r3, #0
}
 800087a:	4618      	mov	r0, r3
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40022000 	.word	0x40022000

08000884 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800088c:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <HAL_InitTick+0x54>)
 800088e:	681a      	ldr	r2, [r3, #0]
 8000890:	4b12      	ldr	r3, [pc, #72]	; (80008dc <HAL_InitTick+0x58>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	4619      	mov	r1, r3
 8000896:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800089a:	fbb3 f3f1 	udiv	r3, r3, r1
 800089e:	fbb2 f3f3 	udiv	r3, r2, r3
 80008a2:	4618      	mov	r0, r3
 80008a4:	f000 f935 	bl	8000b12 <HAL_SYSTICK_Config>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008ae:	2301      	movs	r3, #1
 80008b0:	e00e      	b.n	80008d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	2b0f      	cmp	r3, #15
 80008b6:	d80a      	bhi.n	80008ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008b8:	2200      	movs	r2, #0
 80008ba:	6879      	ldr	r1, [r7, #4]
 80008bc:	f04f 30ff 	mov.w	r0, #4294967295
 80008c0:	f000 f90b 	bl	8000ada <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008c4:	4a06      	ldr	r2, [pc, #24]	; (80008e0 <HAL_InitTick+0x5c>)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008ca:	2300      	movs	r3, #0
 80008cc:	e000      	b.n	80008d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008ce:	2301      	movs	r3, #1
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20000000 	.word	0x20000000
 80008dc:	20000008 	.word	0x20000008
 80008e0:	20000004 	.word	0x20000004

080008e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008e8:	4b05      	ldr	r3, [pc, #20]	; (8000900 <HAL_IncTick+0x1c>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	461a      	mov	r2, r3
 80008ee:	4b05      	ldr	r3, [pc, #20]	; (8000904 <HAL_IncTick+0x20>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4413      	add	r3, r2
 80008f4:	4a03      	ldr	r2, [pc, #12]	; (8000904 <HAL_IncTick+0x20>)
 80008f6:	6013      	str	r3, [r2, #0]
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bc80      	pop	{r7}
 80008fe:	4770      	bx	lr
 8000900:	20000008 	.word	0x20000008
 8000904:	20000118 	.word	0x20000118

08000908 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  return uwTick;
 800090c:	4b02      	ldr	r3, [pc, #8]	; (8000918 <HAL_GetTick+0x10>)
 800090e:	681b      	ldr	r3, [r3, #0]
}
 8000910:	4618      	mov	r0, r3
 8000912:	46bd      	mov	sp, r7
 8000914:	bc80      	pop	{r7}
 8000916:	4770      	bx	lr
 8000918:	20000118 	.word	0x20000118

0800091c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000924:	f7ff fff0 	bl	8000908 <HAL_GetTick>
 8000928:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000934:	d005      	beq.n	8000942 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000936:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <HAL_Delay+0x44>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	461a      	mov	r2, r3
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	4413      	add	r3, r2
 8000940:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000942:	bf00      	nop
 8000944:	f7ff ffe0 	bl	8000908 <HAL_GetTick>
 8000948:	4602      	mov	r2, r0
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	1ad3      	subs	r3, r2, r3
 800094e:	68fa      	ldr	r2, [r7, #12]
 8000950:	429a      	cmp	r2, r3
 8000952:	d8f7      	bhi.n	8000944 <HAL_Delay+0x28>
  {
  }
}
 8000954:	bf00      	nop
 8000956:	bf00      	nop
 8000958:	3710      	adds	r7, #16
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000008 	.word	0x20000008

08000964 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	f003 0307 	and.w	r3, r3, #7
 8000972:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000976:	68db      	ldr	r3, [r3, #12]
 8000978:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800097a:	68ba      	ldr	r2, [r7, #8]
 800097c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000980:	4013      	ands	r3, r2
 8000982:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800098c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000994:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000996:	4a04      	ldr	r2, [pc, #16]	; (80009a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	60d3      	str	r3, [r2, #12]
}
 800099c:	bf00      	nop
 800099e:	3714      	adds	r7, #20
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bc80      	pop	{r7}
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009b0:	4b04      	ldr	r3, [pc, #16]	; (80009c4 <__NVIC_GetPriorityGrouping+0x18>)
 80009b2:	68db      	ldr	r3, [r3, #12]
 80009b4:	0a1b      	lsrs	r3, r3, #8
 80009b6:	f003 0307 	and.w	r3, r3, #7
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	46bd      	mov	sp, r7
 80009be:	bc80      	pop	{r7}
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	e000ed00 	.word	0xe000ed00

080009c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	6039      	str	r1, [r7, #0]
 80009d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	db0a      	blt.n	80009f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	b2da      	uxtb	r2, r3
 80009e0:	490c      	ldr	r1, [pc, #48]	; (8000a14 <__NVIC_SetPriority+0x4c>)
 80009e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e6:	0112      	lsls	r2, r2, #4
 80009e8:	b2d2      	uxtb	r2, r2
 80009ea:	440b      	add	r3, r1
 80009ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009f0:	e00a      	b.n	8000a08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	b2da      	uxtb	r2, r3
 80009f6:	4908      	ldr	r1, [pc, #32]	; (8000a18 <__NVIC_SetPriority+0x50>)
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	f003 030f 	and.w	r3, r3, #15
 80009fe:	3b04      	subs	r3, #4
 8000a00:	0112      	lsls	r2, r2, #4
 8000a02:	b2d2      	uxtb	r2, r2
 8000a04:	440b      	add	r3, r1
 8000a06:	761a      	strb	r2, [r3, #24]
}
 8000a08:	bf00      	nop
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bc80      	pop	{r7}
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	e000e100 	.word	0xe000e100
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b089      	sub	sp, #36	; 0x24
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	60b9      	str	r1, [r7, #8]
 8000a26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	f003 0307 	and.w	r3, r3, #7
 8000a2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a30:	69fb      	ldr	r3, [r7, #28]
 8000a32:	f1c3 0307 	rsb	r3, r3, #7
 8000a36:	2b04      	cmp	r3, #4
 8000a38:	bf28      	it	cs
 8000a3a:	2304      	movcs	r3, #4
 8000a3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a3e:	69fb      	ldr	r3, [r7, #28]
 8000a40:	3304      	adds	r3, #4
 8000a42:	2b06      	cmp	r3, #6
 8000a44:	d902      	bls.n	8000a4c <NVIC_EncodePriority+0x30>
 8000a46:	69fb      	ldr	r3, [r7, #28]
 8000a48:	3b03      	subs	r3, #3
 8000a4a:	e000      	b.n	8000a4e <NVIC_EncodePriority+0x32>
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a50:	f04f 32ff 	mov.w	r2, #4294967295
 8000a54:	69bb      	ldr	r3, [r7, #24]
 8000a56:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5a:	43da      	mvns	r2, r3
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	401a      	ands	r2, r3
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a64:	f04f 31ff 	mov.w	r1, #4294967295
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a6e:	43d9      	mvns	r1, r3
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a74:	4313      	orrs	r3, r2
         );
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3724      	adds	r7, #36	; 0x24
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bc80      	pop	{r7}
 8000a7e:	4770      	bx	lr

08000a80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	3b01      	subs	r3, #1
 8000a8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a90:	d301      	bcc.n	8000a96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a92:	2301      	movs	r3, #1
 8000a94:	e00f      	b.n	8000ab6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a96:	4a0a      	ldr	r2, [pc, #40]	; (8000ac0 <SysTick_Config+0x40>)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	3b01      	subs	r3, #1
 8000a9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a9e:	210f      	movs	r1, #15
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa4:	f7ff ff90 	bl	80009c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000aa8:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <SysTick_Config+0x40>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aae:	4b04      	ldr	r3, [pc, #16]	; (8000ac0 <SysTick_Config+0x40>)
 8000ab0:	2207      	movs	r2, #7
 8000ab2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ab4:	2300      	movs	r3, #0
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	e000e010 	.word	0xe000e010

08000ac4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	f7ff ff49 	bl	8000964 <__NVIC_SetPriorityGrouping>
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b086      	sub	sp, #24
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	60b9      	str	r1, [r7, #8]
 8000ae4:	607a      	str	r2, [r7, #4]
 8000ae6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000aec:	f7ff ff5e 	bl	80009ac <__NVIC_GetPriorityGrouping>
 8000af0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000af2:	687a      	ldr	r2, [r7, #4]
 8000af4:	68b9      	ldr	r1, [r7, #8]
 8000af6:	6978      	ldr	r0, [r7, #20]
 8000af8:	f7ff ff90 	bl	8000a1c <NVIC_EncodePriority>
 8000afc:	4602      	mov	r2, r0
 8000afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b02:	4611      	mov	r1, r2
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff ff5f 	bl	80009c8 <__NVIC_SetPriority>
}
 8000b0a:	bf00      	nop
 8000b0c:	3718      	adds	r7, #24
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	b082      	sub	sp, #8
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f7ff ffb0 	bl	8000a80 <SysTick_Config>
 8000b20:	4603      	mov	r3, r0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
	...

08000b2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b08b      	sub	sp, #44	; 0x2c
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b36:	2300      	movs	r3, #0
 8000b38:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b3e:	e169      	b.n	8000e14 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b40:	2201      	movs	r2, #1
 8000b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b44:	fa02 f303 	lsl.w	r3, r2, r3
 8000b48:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	69fa      	ldr	r2, [r7, #28]
 8000b50:	4013      	ands	r3, r2
 8000b52:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b54:	69ba      	ldr	r2, [r7, #24]
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	f040 8158 	bne.w	8000e0e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	4a9a      	ldr	r2, [pc, #616]	; (8000dcc <HAL_GPIO_Init+0x2a0>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d05e      	beq.n	8000c26 <HAL_GPIO_Init+0xfa>
 8000b68:	4a98      	ldr	r2, [pc, #608]	; (8000dcc <HAL_GPIO_Init+0x2a0>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d875      	bhi.n	8000c5a <HAL_GPIO_Init+0x12e>
 8000b6e:	4a98      	ldr	r2, [pc, #608]	; (8000dd0 <HAL_GPIO_Init+0x2a4>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d058      	beq.n	8000c26 <HAL_GPIO_Init+0xfa>
 8000b74:	4a96      	ldr	r2, [pc, #600]	; (8000dd0 <HAL_GPIO_Init+0x2a4>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d86f      	bhi.n	8000c5a <HAL_GPIO_Init+0x12e>
 8000b7a:	4a96      	ldr	r2, [pc, #600]	; (8000dd4 <HAL_GPIO_Init+0x2a8>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d052      	beq.n	8000c26 <HAL_GPIO_Init+0xfa>
 8000b80:	4a94      	ldr	r2, [pc, #592]	; (8000dd4 <HAL_GPIO_Init+0x2a8>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d869      	bhi.n	8000c5a <HAL_GPIO_Init+0x12e>
 8000b86:	4a94      	ldr	r2, [pc, #592]	; (8000dd8 <HAL_GPIO_Init+0x2ac>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d04c      	beq.n	8000c26 <HAL_GPIO_Init+0xfa>
 8000b8c:	4a92      	ldr	r2, [pc, #584]	; (8000dd8 <HAL_GPIO_Init+0x2ac>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d863      	bhi.n	8000c5a <HAL_GPIO_Init+0x12e>
 8000b92:	4a92      	ldr	r2, [pc, #584]	; (8000ddc <HAL_GPIO_Init+0x2b0>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d046      	beq.n	8000c26 <HAL_GPIO_Init+0xfa>
 8000b98:	4a90      	ldr	r2, [pc, #576]	; (8000ddc <HAL_GPIO_Init+0x2b0>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d85d      	bhi.n	8000c5a <HAL_GPIO_Init+0x12e>
 8000b9e:	2b12      	cmp	r3, #18
 8000ba0:	d82a      	bhi.n	8000bf8 <HAL_GPIO_Init+0xcc>
 8000ba2:	2b12      	cmp	r3, #18
 8000ba4:	d859      	bhi.n	8000c5a <HAL_GPIO_Init+0x12e>
 8000ba6:	a201      	add	r2, pc, #4	; (adr r2, 8000bac <HAL_GPIO_Init+0x80>)
 8000ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bac:	08000c27 	.word	0x08000c27
 8000bb0:	08000c01 	.word	0x08000c01
 8000bb4:	08000c13 	.word	0x08000c13
 8000bb8:	08000c55 	.word	0x08000c55
 8000bbc:	08000c5b 	.word	0x08000c5b
 8000bc0:	08000c5b 	.word	0x08000c5b
 8000bc4:	08000c5b 	.word	0x08000c5b
 8000bc8:	08000c5b 	.word	0x08000c5b
 8000bcc:	08000c5b 	.word	0x08000c5b
 8000bd0:	08000c5b 	.word	0x08000c5b
 8000bd4:	08000c5b 	.word	0x08000c5b
 8000bd8:	08000c5b 	.word	0x08000c5b
 8000bdc:	08000c5b 	.word	0x08000c5b
 8000be0:	08000c5b 	.word	0x08000c5b
 8000be4:	08000c5b 	.word	0x08000c5b
 8000be8:	08000c5b 	.word	0x08000c5b
 8000bec:	08000c5b 	.word	0x08000c5b
 8000bf0:	08000c09 	.word	0x08000c09
 8000bf4:	08000c1d 	.word	0x08000c1d
 8000bf8:	4a79      	ldr	r2, [pc, #484]	; (8000de0 <HAL_GPIO_Init+0x2b4>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d013      	beq.n	8000c26 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000bfe:	e02c      	b.n	8000c5a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	623b      	str	r3, [r7, #32]
          break;
 8000c06:	e029      	b.n	8000c5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	3304      	adds	r3, #4
 8000c0e:	623b      	str	r3, [r7, #32]
          break;
 8000c10:	e024      	b.n	8000c5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	68db      	ldr	r3, [r3, #12]
 8000c16:	3308      	adds	r3, #8
 8000c18:	623b      	str	r3, [r7, #32]
          break;
 8000c1a:	e01f      	b.n	8000c5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	330c      	adds	r3, #12
 8000c22:	623b      	str	r3, [r7, #32]
          break;
 8000c24:	e01a      	b.n	8000c5c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	689b      	ldr	r3, [r3, #8]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d102      	bne.n	8000c34 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c2e:	2304      	movs	r3, #4
 8000c30:	623b      	str	r3, [r7, #32]
          break;
 8000c32:	e013      	b.n	8000c5c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	689b      	ldr	r3, [r3, #8]
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d105      	bne.n	8000c48 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c3c:	2308      	movs	r3, #8
 8000c3e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	69fa      	ldr	r2, [r7, #28]
 8000c44:	611a      	str	r2, [r3, #16]
          break;
 8000c46:	e009      	b.n	8000c5c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c48:	2308      	movs	r3, #8
 8000c4a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	69fa      	ldr	r2, [r7, #28]
 8000c50:	615a      	str	r2, [r3, #20]
          break;
 8000c52:	e003      	b.n	8000c5c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c54:	2300      	movs	r3, #0
 8000c56:	623b      	str	r3, [r7, #32]
          break;
 8000c58:	e000      	b.n	8000c5c <HAL_GPIO_Init+0x130>
          break;
 8000c5a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c5c:	69bb      	ldr	r3, [r7, #24]
 8000c5e:	2bff      	cmp	r3, #255	; 0xff
 8000c60:	d801      	bhi.n	8000c66 <HAL_GPIO_Init+0x13a>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	e001      	b.n	8000c6a <HAL_GPIO_Init+0x13e>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	3304      	adds	r3, #4
 8000c6a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	2bff      	cmp	r3, #255	; 0xff
 8000c70:	d802      	bhi.n	8000c78 <HAL_GPIO_Init+0x14c>
 8000c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	e002      	b.n	8000c7e <HAL_GPIO_Init+0x152>
 8000c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c7a:	3b08      	subs	r3, #8
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	210f      	movs	r1, #15
 8000c86:	693b      	ldr	r3, [r7, #16]
 8000c88:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8c:	43db      	mvns	r3, r3
 8000c8e:	401a      	ands	r2, r3
 8000c90:	6a39      	ldr	r1, [r7, #32]
 8000c92:	693b      	ldr	r3, [r7, #16]
 8000c94:	fa01 f303 	lsl.w	r3, r1, r3
 8000c98:	431a      	orrs	r2, r3
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	f000 80b1 	beq.w	8000e0e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cac:	4b4d      	ldr	r3, [pc, #308]	; (8000de4 <HAL_GPIO_Init+0x2b8>)
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	4a4c      	ldr	r2, [pc, #304]	; (8000de4 <HAL_GPIO_Init+0x2b8>)
 8000cb2:	f043 0301 	orr.w	r3, r3, #1
 8000cb6:	6193      	str	r3, [r2, #24]
 8000cb8:	4b4a      	ldr	r3, [pc, #296]	; (8000de4 <HAL_GPIO_Init+0x2b8>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	f003 0301 	and.w	r3, r3, #1
 8000cc0:	60bb      	str	r3, [r7, #8]
 8000cc2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000cc4:	4a48      	ldr	r2, [pc, #288]	; (8000de8 <HAL_GPIO_Init+0x2bc>)
 8000cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc8:	089b      	lsrs	r3, r3, #2
 8000cca:	3302      	adds	r3, #2
 8000ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cd0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd4:	f003 0303 	and.w	r3, r3, #3
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	220f      	movs	r2, #15
 8000cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce0:	43db      	mvns	r3, r3
 8000ce2:	68fa      	ldr	r2, [r7, #12]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	4a40      	ldr	r2, [pc, #256]	; (8000dec <HAL_GPIO_Init+0x2c0>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d013      	beq.n	8000d18 <HAL_GPIO_Init+0x1ec>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	4a3f      	ldr	r2, [pc, #252]	; (8000df0 <HAL_GPIO_Init+0x2c4>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d00d      	beq.n	8000d14 <HAL_GPIO_Init+0x1e8>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	4a3e      	ldr	r2, [pc, #248]	; (8000df4 <HAL_GPIO_Init+0x2c8>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d007      	beq.n	8000d10 <HAL_GPIO_Init+0x1e4>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4a3d      	ldr	r2, [pc, #244]	; (8000df8 <HAL_GPIO_Init+0x2cc>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d101      	bne.n	8000d0c <HAL_GPIO_Init+0x1e0>
 8000d08:	2303      	movs	r3, #3
 8000d0a:	e006      	b.n	8000d1a <HAL_GPIO_Init+0x1ee>
 8000d0c:	2304      	movs	r3, #4
 8000d0e:	e004      	b.n	8000d1a <HAL_GPIO_Init+0x1ee>
 8000d10:	2302      	movs	r3, #2
 8000d12:	e002      	b.n	8000d1a <HAL_GPIO_Init+0x1ee>
 8000d14:	2301      	movs	r3, #1
 8000d16:	e000      	b.n	8000d1a <HAL_GPIO_Init+0x1ee>
 8000d18:	2300      	movs	r3, #0
 8000d1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d1c:	f002 0203 	and.w	r2, r2, #3
 8000d20:	0092      	lsls	r2, r2, #2
 8000d22:	4093      	lsls	r3, r2
 8000d24:	68fa      	ldr	r2, [r7, #12]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d2a:	492f      	ldr	r1, [pc, #188]	; (8000de8 <HAL_GPIO_Init+0x2bc>)
 8000d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2e:	089b      	lsrs	r3, r3, #2
 8000d30:	3302      	adds	r3, #2
 8000d32:	68fa      	ldr	r2, [r7, #12]
 8000d34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d006      	beq.n	8000d52 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d44:	4b2d      	ldr	r3, [pc, #180]	; (8000dfc <HAL_GPIO_Init+0x2d0>)
 8000d46:	689a      	ldr	r2, [r3, #8]
 8000d48:	492c      	ldr	r1, [pc, #176]	; (8000dfc <HAL_GPIO_Init+0x2d0>)
 8000d4a:	69bb      	ldr	r3, [r7, #24]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	608b      	str	r3, [r1, #8]
 8000d50:	e006      	b.n	8000d60 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d52:	4b2a      	ldr	r3, [pc, #168]	; (8000dfc <HAL_GPIO_Init+0x2d0>)
 8000d54:	689a      	ldr	r2, [r3, #8]
 8000d56:	69bb      	ldr	r3, [r7, #24]
 8000d58:	43db      	mvns	r3, r3
 8000d5a:	4928      	ldr	r1, [pc, #160]	; (8000dfc <HAL_GPIO_Init+0x2d0>)
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d006      	beq.n	8000d7a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d6c:	4b23      	ldr	r3, [pc, #140]	; (8000dfc <HAL_GPIO_Init+0x2d0>)
 8000d6e:	68da      	ldr	r2, [r3, #12]
 8000d70:	4922      	ldr	r1, [pc, #136]	; (8000dfc <HAL_GPIO_Init+0x2d0>)
 8000d72:	69bb      	ldr	r3, [r7, #24]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	60cb      	str	r3, [r1, #12]
 8000d78:	e006      	b.n	8000d88 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d7a:	4b20      	ldr	r3, [pc, #128]	; (8000dfc <HAL_GPIO_Init+0x2d0>)
 8000d7c:	68da      	ldr	r2, [r3, #12]
 8000d7e:	69bb      	ldr	r3, [r7, #24]
 8000d80:	43db      	mvns	r3, r3
 8000d82:	491e      	ldr	r1, [pc, #120]	; (8000dfc <HAL_GPIO_Init+0x2d0>)
 8000d84:	4013      	ands	r3, r2
 8000d86:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d006      	beq.n	8000da2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d94:	4b19      	ldr	r3, [pc, #100]	; (8000dfc <HAL_GPIO_Init+0x2d0>)
 8000d96:	685a      	ldr	r2, [r3, #4]
 8000d98:	4918      	ldr	r1, [pc, #96]	; (8000dfc <HAL_GPIO_Init+0x2d0>)
 8000d9a:	69bb      	ldr	r3, [r7, #24]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	604b      	str	r3, [r1, #4]
 8000da0:	e006      	b.n	8000db0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000da2:	4b16      	ldr	r3, [pc, #88]	; (8000dfc <HAL_GPIO_Init+0x2d0>)
 8000da4:	685a      	ldr	r2, [r3, #4]
 8000da6:	69bb      	ldr	r3, [r7, #24]
 8000da8:	43db      	mvns	r3, r3
 8000daa:	4914      	ldr	r1, [pc, #80]	; (8000dfc <HAL_GPIO_Init+0x2d0>)
 8000dac:	4013      	ands	r3, r2
 8000dae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d021      	beq.n	8000e00 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000dbc:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <HAL_GPIO_Init+0x2d0>)
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	490e      	ldr	r1, [pc, #56]	; (8000dfc <HAL_GPIO_Init+0x2d0>)
 8000dc2:	69bb      	ldr	r3, [r7, #24]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	600b      	str	r3, [r1, #0]
 8000dc8:	e021      	b.n	8000e0e <HAL_GPIO_Init+0x2e2>
 8000dca:	bf00      	nop
 8000dcc:	10320000 	.word	0x10320000
 8000dd0:	10310000 	.word	0x10310000
 8000dd4:	10220000 	.word	0x10220000
 8000dd8:	10210000 	.word	0x10210000
 8000ddc:	10120000 	.word	0x10120000
 8000de0:	10110000 	.word	0x10110000
 8000de4:	40021000 	.word	0x40021000
 8000de8:	40010000 	.word	0x40010000
 8000dec:	40010800 	.word	0x40010800
 8000df0:	40010c00 	.word	0x40010c00
 8000df4:	40011000 	.word	0x40011000
 8000df8:	40011400 	.word	0x40011400
 8000dfc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e00:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <HAL_GPIO_Init+0x304>)
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	43db      	mvns	r3, r3
 8000e08:	4909      	ldr	r1, [pc, #36]	; (8000e30 <HAL_GPIO_Init+0x304>)
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e10:	3301      	adds	r3, #1
 8000e12:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e1a:	fa22 f303 	lsr.w	r3, r2, r3
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f47f ae8e 	bne.w	8000b40 <HAL_GPIO_Init+0x14>
  }
}
 8000e24:	bf00      	nop
 8000e26:	bf00      	nop
 8000e28:	372c      	adds	r7, #44	; 0x2c
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bc80      	pop	{r7}
 8000e2e:	4770      	bx	lr
 8000e30:	40010400 	.word	0x40010400

08000e34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	807b      	strh	r3, [r7, #2]
 8000e40:	4613      	mov	r3, r2
 8000e42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e44:	787b      	ldrb	r3, [r7, #1]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d003      	beq.n	8000e52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e4a:	887a      	ldrh	r2, [r7, #2]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e50:	e003      	b.n	8000e5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e52:	887b      	ldrh	r3, [r7, #2]
 8000e54:	041a      	lsls	r2, r3, #16
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	611a      	str	r2, [r3, #16]
}
 8000e5a:	bf00      	nop
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr

08000e64 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e76:	887a      	ldrh	r2, [r7, #2]
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	041a      	lsls	r2, r3, #16
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	43d9      	mvns	r1, r3
 8000e82:	887b      	ldrh	r3, [r7, #2]
 8000e84:	400b      	ands	r3, r1
 8000e86:	431a      	orrs	r2, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	611a      	str	r2, [r3, #16]
}
 8000e8c:	bf00      	nop
 8000e8e:	3714      	adds	r7, #20
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bc80      	pop	{r7}
 8000e94:	4770      	bx	lr
	...

08000e98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d101      	bne.n	8000eaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e272      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	f000 8087 	beq.w	8000fc6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000eb8:	4b92      	ldr	r3, [pc, #584]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f003 030c 	and.w	r3, r3, #12
 8000ec0:	2b04      	cmp	r3, #4
 8000ec2:	d00c      	beq.n	8000ede <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ec4:	4b8f      	ldr	r3, [pc, #572]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f003 030c 	and.w	r3, r3, #12
 8000ecc:	2b08      	cmp	r3, #8
 8000ece:	d112      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x5e>
 8000ed0:	4b8c      	ldr	r3, [pc, #560]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000edc:	d10b      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ede:	4b89      	ldr	r3, [pc, #548]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d06c      	beq.n	8000fc4 <HAL_RCC_OscConfig+0x12c>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d168      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e24c      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000efe:	d106      	bne.n	8000f0e <HAL_RCC_OscConfig+0x76>
 8000f00:	4b80      	ldr	r3, [pc, #512]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a7f      	ldr	r2, [pc, #508]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f0a:	6013      	str	r3, [r2, #0]
 8000f0c:	e02e      	b.n	8000f6c <HAL_RCC_OscConfig+0xd4>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d10c      	bne.n	8000f30 <HAL_RCC_OscConfig+0x98>
 8000f16:	4b7b      	ldr	r3, [pc, #492]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a7a      	ldr	r2, [pc, #488]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f20:	6013      	str	r3, [r2, #0]
 8000f22:	4b78      	ldr	r3, [pc, #480]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a77      	ldr	r2, [pc, #476]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f2c:	6013      	str	r3, [r2, #0]
 8000f2e:	e01d      	b.n	8000f6c <HAL_RCC_OscConfig+0xd4>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f38:	d10c      	bne.n	8000f54 <HAL_RCC_OscConfig+0xbc>
 8000f3a:	4b72      	ldr	r3, [pc, #456]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a71      	ldr	r2, [pc, #452]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f44:	6013      	str	r3, [r2, #0]
 8000f46:	4b6f      	ldr	r3, [pc, #444]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a6e      	ldr	r2, [pc, #440]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f50:	6013      	str	r3, [r2, #0]
 8000f52:	e00b      	b.n	8000f6c <HAL_RCC_OscConfig+0xd4>
 8000f54:	4b6b      	ldr	r3, [pc, #428]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a6a      	ldr	r2, [pc, #424]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f5e:	6013      	str	r3, [r2, #0]
 8000f60:	4b68      	ldr	r3, [pc, #416]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a67      	ldr	r2, [pc, #412]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f6a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d013      	beq.n	8000f9c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f74:	f7ff fcc8 	bl	8000908 <HAL_GetTick>
 8000f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f7a:	e008      	b.n	8000f8e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f7c:	f7ff fcc4 	bl	8000908 <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	2b64      	cmp	r3, #100	; 0x64
 8000f88:	d901      	bls.n	8000f8e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	e200      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f8e:	4b5d      	ldr	r3, [pc, #372]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d0f0      	beq.n	8000f7c <HAL_RCC_OscConfig+0xe4>
 8000f9a:	e014      	b.n	8000fc6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f9c:	f7ff fcb4 	bl	8000908 <HAL_GetTick>
 8000fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fa2:	e008      	b.n	8000fb6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fa4:	f7ff fcb0 	bl	8000908 <HAL_GetTick>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	2b64      	cmp	r3, #100	; 0x64
 8000fb0:	d901      	bls.n	8000fb6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	e1ec      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fb6:	4b53      	ldr	r3, [pc, #332]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d1f0      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x10c>
 8000fc2:	e000      	b.n	8000fc6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f003 0302 	and.w	r3, r3, #2
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d063      	beq.n	800109a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fd2:	4b4c      	ldr	r3, [pc, #304]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f003 030c 	and.w	r3, r3, #12
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d00b      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000fde:	4b49      	ldr	r3, [pc, #292]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f003 030c 	and.w	r3, r3, #12
 8000fe6:	2b08      	cmp	r3, #8
 8000fe8:	d11c      	bne.n	8001024 <HAL_RCC_OscConfig+0x18c>
 8000fea:	4b46      	ldr	r3, [pc, #280]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d116      	bne.n	8001024 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ff6:	4b43      	ldr	r3, [pc, #268]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d005      	beq.n	800100e <HAL_RCC_OscConfig+0x176>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	691b      	ldr	r3, [r3, #16]
 8001006:	2b01      	cmp	r3, #1
 8001008:	d001      	beq.n	800100e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e1c0      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800100e:	4b3d      	ldr	r3, [pc, #244]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	695b      	ldr	r3, [r3, #20]
 800101a:	00db      	lsls	r3, r3, #3
 800101c:	4939      	ldr	r1, [pc, #228]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 800101e:	4313      	orrs	r3, r2
 8001020:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001022:	e03a      	b.n	800109a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	691b      	ldr	r3, [r3, #16]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d020      	beq.n	800106e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800102c:	4b36      	ldr	r3, [pc, #216]	; (8001108 <HAL_RCC_OscConfig+0x270>)
 800102e:	2201      	movs	r2, #1
 8001030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001032:	f7ff fc69 	bl	8000908 <HAL_GetTick>
 8001036:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001038:	e008      	b.n	800104c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800103a:	f7ff fc65 	bl	8000908 <HAL_GetTick>
 800103e:	4602      	mov	r2, r0
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	2b02      	cmp	r3, #2
 8001046:	d901      	bls.n	800104c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001048:	2303      	movs	r3, #3
 800104a:	e1a1      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800104c:	4b2d      	ldr	r3, [pc, #180]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f003 0302 	and.w	r3, r3, #2
 8001054:	2b00      	cmp	r3, #0
 8001056:	d0f0      	beq.n	800103a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001058:	4b2a      	ldr	r3, [pc, #168]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	695b      	ldr	r3, [r3, #20]
 8001064:	00db      	lsls	r3, r3, #3
 8001066:	4927      	ldr	r1, [pc, #156]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8001068:	4313      	orrs	r3, r2
 800106a:	600b      	str	r3, [r1, #0]
 800106c:	e015      	b.n	800109a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800106e:	4b26      	ldr	r3, [pc, #152]	; (8001108 <HAL_RCC_OscConfig+0x270>)
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001074:	f7ff fc48 	bl	8000908 <HAL_GetTick>
 8001078:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800107a:	e008      	b.n	800108e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800107c:	f7ff fc44 	bl	8000908 <HAL_GetTick>
 8001080:	4602      	mov	r2, r0
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	2b02      	cmp	r3, #2
 8001088:	d901      	bls.n	800108e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800108a:	2303      	movs	r3, #3
 800108c:	e180      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800108e:	4b1d      	ldr	r3, [pc, #116]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	2b00      	cmp	r3, #0
 8001098:	d1f0      	bne.n	800107c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 0308 	and.w	r3, r3, #8
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d03a      	beq.n	800111c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	699b      	ldr	r3, [r3, #24]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d019      	beq.n	80010e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010ae:	4b17      	ldr	r3, [pc, #92]	; (800110c <HAL_RCC_OscConfig+0x274>)
 80010b0:	2201      	movs	r2, #1
 80010b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010b4:	f7ff fc28 	bl	8000908 <HAL_GetTick>
 80010b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010ba:	e008      	b.n	80010ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010bc:	f7ff fc24 	bl	8000908 <HAL_GetTick>
 80010c0:	4602      	mov	r2, r0
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d901      	bls.n	80010ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80010ca:	2303      	movs	r3, #3
 80010cc:	e160      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010ce:	4b0d      	ldr	r3, [pc, #52]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 80010d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d2:	f003 0302 	and.w	r3, r3, #2
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d0f0      	beq.n	80010bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80010da:	2001      	movs	r0, #1
 80010dc:	f000 fb06 	bl	80016ec <RCC_Delay>
 80010e0:	e01c      	b.n	800111c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010e2:	4b0a      	ldr	r3, [pc, #40]	; (800110c <HAL_RCC_OscConfig+0x274>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010e8:	f7ff fc0e 	bl	8000908 <HAL_GetTick>
 80010ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010ee:	e00f      	b.n	8001110 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010f0:	f7ff fc0a 	bl	8000908 <HAL_GetTick>
 80010f4:	4602      	mov	r2, r0
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d908      	bls.n	8001110 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80010fe:	2303      	movs	r3, #3
 8001100:	e146      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>
 8001102:	bf00      	nop
 8001104:	40021000 	.word	0x40021000
 8001108:	42420000 	.word	0x42420000
 800110c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001110:	4b92      	ldr	r3, [pc, #584]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 8001112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	2b00      	cmp	r3, #0
 800111a:	d1e9      	bne.n	80010f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 0304 	and.w	r3, r3, #4
 8001124:	2b00      	cmp	r3, #0
 8001126:	f000 80a6 	beq.w	8001276 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800112a:	2300      	movs	r3, #0
 800112c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800112e:	4b8b      	ldr	r3, [pc, #556]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 8001130:	69db      	ldr	r3, [r3, #28]
 8001132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d10d      	bne.n	8001156 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800113a:	4b88      	ldr	r3, [pc, #544]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 800113c:	69db      	ldr	r3, [r3, #28]
 800113e:	4a87      	ldr	r2, [pc, #540]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 8001140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001144:	61d3      	str	r3, [r2, #28]
 8001146:	4b85      	ldr	r3, [pc, #532]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 8001148:	69db      	ldr	r3, [r3, #28]
 800114a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800114e:	60bb      	str	r3, [r7, #8]
 8001150:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001152:	2301      	movs	r3, #1
 8001154:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001156:	4b82      	ldr	r3, [pc, #520]	; (8001360 <HAL_RCC_OscConfig+0x4c8>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800115e:	2b00      	cmp	r3, #0
 8001160:	d118      	bne.n	8001194 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001162:	4b7f      	ldr	r3, [pc, #508]	; (8001360 <HAL_RCC_OscConfig+0x4c8>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a7e      	ldr	r2, [pc, #504]	; (8001360 <HAL_RCC_OscConfig+0x4c8>)
 8001168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800116c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800116e:	f7ff fbcb 	bl	8000908 <HAL_GetTick>
 8001172:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001174:	e008      	b.n	8001188 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001176:	f7ff fbc7 	bl	8000908 <HAL_GetTick>
 800117a:	4602      	mov	r2, r0
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	2b64      	cmp	r3, #100	; 0x64
 8001182:	d901      	bls.n	8001188 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001184:	2303      	movs	r3, #3
 8001186:	e103      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001188:	4b75      	ldr	r3, [pc, #468]	; (8001360 <HAL_RCC_OscConfig+0x4c8>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001190:	2b00      	cmp	r3, #0
 8001192:	d0f0      	beq.n	8001176 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	2b01      	cmp	r3, #1
 800119a:	d106      	bne.n	80011aa <HAL_RCC_OscConfig+0x312>
 800119c:	4b6f      	ldr	r3, [pc, #444]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 800119e:	6a1b      	ldr	r3, [r3, #32]
 80011a0:	4a6e      	ldr	r2, [pc, #440]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80011a2:	f043 0301 	orr.w	r3, r3, #1
 80011a6:	6213      	str	r3, [r2, #32]
 80011a8:	e02d      	b.n	8001206 <HAL_RCC_OscConfig+0x36e>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	68db      	ldr	r3, [r3, #12]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d10c      	bne.n	80011cc <HAL_RCC_OscConfig+0x334>
 80011b2:	4b6a      	ldr	r3, [pc, #424]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80011b4:	6a1b      	ldr	r3, [r3, #32]
 80011b6:	4a69      	ldr	r2, [pc, #420]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80011b8:	f023 0301 	bic.w	r3, r3, #1
 80011bc:	6213      	str	r3, [r2, #32]
 80011be:	4b67      	ldr	r3, [pc, #412]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80011c0:	6a1b      	ldr	r3, [r3, #32]
 80011c2:	4a66      	ldr	r2, [pc, #408]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80011c4:	f023 0304 	bic.w	r3, r3, #4
 80011c8:	6213      	str	r3, [r2, #32]
 80011ca:	e01c      	b.n	8001206 <HAL_RCC_OscConfig+0x36e>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	2b05      	cmp	r3, #5
 80011d2:	d10c      	bne.n	80011ee <HAL_RCC_OscConfig+0x356>
 80011d4:	4b61      	ldr	r3, [pc, #388]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80011d6:	6a1b      	ldr	r3, [r3, #32]
 80011d8:	4a60      	ldr	r2, [pc, #384]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80011da:	f043 0304 	orr.w	r3, r3, #4
 80011de:	6213      	str	r3, [r2, #32]
 80011e0:	4b5e      	ldr	r3, [pc, #376]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80011e2:	6a1b      	ldr	r3, [r3, #32]
 80011e4:	4a5d      	ldr	r2, [pc, #372]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80011e6:	f043 0301 	orr.w	r3, r3, #1
 80011ea:	6213      	str	r3, [r2, #32]
 80011ec:	e00b      	b.n	8001206 <HAL_RCC_OscConfig+0x36e>
 80011ee:	4b5b      	ldr	r3, [pc, #364]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80011f0:	6a1b      	ldr	r3, [r3, #32]
 80011f2:	4a5a      	ldr	r2, [pc, #360]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80011f4:	f023 0301 	bic.w	r3, r3, #1
 80011f8:	6213      	str	r3, [r2, #32]
 80011fa:	4b58      	ldr	r3, [pc, #352]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80011fc:	6a1b      	ldr	r3, [r3, #32]
 80011fe:	4a57      	ldr	r2, [pc, #348]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 8001200:	f023 0304 	bic.w	r3, r3, #4
 8001204:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	68db      	ldr	r3, [r3, #12]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d015      	beq.n	800123a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800120e:	f7ff fb7b 	bl	8000908 <HAL_GetTick>
 8001212:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001214:	e00a      	b.n	800122c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001216:	f7ff fb77 	bl	8000908 <HAL_GetTick>
 800121a:	4602      	mov	r2, r0
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	f241 3288 	movw	r2, #5000	; 0x1388
 8001224:	4293      	cmp	r3, r2
 8001226:	d901      	bls.n	800122c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001228:	2303      	movs	r3, #3
 800122a:	e0b1      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800122c:	4b4b      	ldr	r3, [pc, #300]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 800122e:	6a1b      	ldr	r3, [r3, #32]
 8001230:	f003 0302 	and.w	r3, r3, #2
 8001234:	2b00      	cmp	r3, #0
 8001236:	d0ee      	beq.n	8001216 <HAL_RCC_OscConfig+0x37e>
 8001238:	e014      	b.n	8001264 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800123a:	f7ff fb65 	bl	8000908 <HAL_GetTick>
 800123e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001240:	e00a      	b.n	8001258 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001242:	f7ff fb61 	bl	8000908 <HAL_GetTick>
 8001246:	4602      	mov	r2, r0
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001250:	4293      	cmp	r3, r2
 8001252:	d901      	bls.n	8001258 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001254:	2303      	movs	r3, #3
 8001256:	e09b      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001258:	4b40      	ldr	r3, [pc, #256]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 800125a:	6a1b      	ldr	r3, [r3, #32]
 800125c:	f003 0302 	and.w	r3, r3, #2
 8001260:	2b00      	cmp	r3, #0
 8001262:	d1ee      	bne.n	8001242 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001264:	7dfb      	ldrb	r3, [r7, #23]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d105      	bne.n	8001276 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800126a:	4b3c      	ldr	r3, [pc, #240]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 800126c:	69db      	ldr	r3, [r3, #28]
 800126e:	4a3b      	ldr	r2, [pc, #236]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 8001270:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001274:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	69db      	ldr	r3, [r3, #28]
 800127a:	2b00      	cmp	r3, #0
 800127c:	f000 8087 	beq.w	800138e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001280:	4b36      	ldr	r3, [pc, #216]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f003 030c 	and.w	r3, r3, #12
 8001288:	2b08      	cmp	r3, #8
 800128a:	d061      	beq.n	8001350 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	69db      	ldr	r3, [r3, #28]
 8001290:	2b02      	cmp	r3, #2
 8001292:	d146      	bne.n	8001322 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001294:	4b33      	ldr	r3, [pc, #204]	; (8001364 <HAL_RCC_OscConfig+0x4cc>)
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800129a:	f7ff fb35 	bl	8000908 <HAL_GetTick>
 800129e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012a0:	e008      	b.n	80012b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012a2:	f7ff fb31 	bl	8000908 <HAL_GetTick>
 80012a6:	4602      	mov	r2, r0
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d901      	bls.n	80012b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80012b0:	2303      	movs	r3, #3
 80012b2:	e06d      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012b4:	4b29      	ldr	r3, [pc, #164]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d1f0      	bne.n	80012a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a1b      	ldr	r3, [r3, #32]
 80012c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012c8:	d108      	bne.n	80012dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012ca:	4b24      	ldr	r3, [pc, #144]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	4921      	ldr	r1, [pc, #132]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80012d8:	4313      	orrs	r3, r2
 80012da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012dc:	4b1f      	ldr	r3, [pc, #124]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6a19      	ldr	r1, [r3, #32]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ec:	430b      	orrs	r3, r1
 80012ee:	491b      	ldr	r1, [pc, #108]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80012f0:	4313      	orrs	r3, r2
 80012f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012f4:	4b1b      	ldr	r3, [pc, #108]	; (8001364 <HAL_RCC_OscConfig+0x4cc>)
 80012f6:	2201      	movs	r2, #1
 80012f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fa:	f7ff fb05 	bl	8000908 <HAL_GetTick>
 80012fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001300:	e008      	b.n	8001314 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001302:	f7ff fb01 	bl	8000908 <HAL_GetTick>
 8001306:	4602      	mov	r2, r0
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	2b02      	cmp	r3, #2
 800130e:	d901      	bls.n	8001314 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001310:	2303      	movs	r3, #3
 8001312:	e03d      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001314:	4b11      	ldr	r3, [pc, #68]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d0f0      	beq.n	8001302 <HAL_RCC_OscConfig+0x46a>
 8001320:	e035      	b.n	800138e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001322:	4b10      	ldr	r3, [pc, #64]	; (8001364 <HAL_RCC_OscConfig+0x4cc>)
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001328:	f7ff faee 	bl	8000908 <HAL_GetTick>
 800132c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800132e:	e008      	b.n	8001342 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001330:	f7ff faea 	bl	8000908 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	2b02      	cmp	r3, #2
 800133c:	d901      	bls.n	8001342 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e026      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001342:	4b06      	ldr	r3, [pc, #24]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d1f0      	bne.n	8001330 <HAL_RCC_OscConfig+0x498>
 800134e:	e01e      	b.n	800138e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	69db      	ldr	r3, [r3, #28]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d107      	bne.n	8001368 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e019      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>
 800135c:	40021000 	.word	0x40021000
 8001360:	40007000 	.word	0x40007000
 8001364:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001368:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <HAL_RCC_OscConfig+0x500>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6a1b      	ldr	r3, [r3, #32]
 8001378:	429a      	cmp	r2, r3
 800137a:	d106      	bne.n	800138a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001386:	429a      	cmp	r2, r3
 8001388:	d001      	beq.n	800138e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e000      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800138e:	2300      	movs	r3, #0
}
 8001390:	4618      	mov	r0, r3
 8001392:	3718      	adds	r7, #24
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40021000 	.word	0x40021000

0800139c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d101      	bne.n	80013b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e0d0      	b.n	8001552 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013b0:	4b6a      	ldr	r3, [pc, #424]	; (800155c <HAL_RCC_ClockConfig+0x1c0>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 0307 	and.w	r3, r3, #7
 80013b8:	683a      	ldr	r2, [r7, #0]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d910      	bls.n	80013e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013be:	4b67      	ldr	r3, [pc, #412]	; (800155c <HAL_RCC_ClockConfig+0x1c0>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f023 0207 	bic.w	r2, r3, #7
 80013c6:	4965      	ldr	r1, [pc, #404]	; (800155c <HAL_RCC_ClockConfig+0x1c0>)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013ce:	4b63      	ldr	r3, [pc, #396]	; (800155c <HAL_RCC_ClockConfig+0x1c0>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	683a      	ldr	r2, [r7, #0]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d001      	beq.n	80013e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e0b8      	b.n	8001552 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0302 	and.w	r3, r3, #2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d020      	beq.n	800142e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0304 	and.w	r3, r3, #4
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d005      	beq.n	8001404 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013f8:	4b59      	ldr	r3, [pc, #356]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	4a58      	ldr	r2, [pc, #352]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 80013fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001402:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0308 	and.w	r3, r3, #8
 800140c:	2b00      	cmp	r3, #0
 800140e:	d005      	beq.n	800141c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001410:	4b53      	ldr	r3, [pc, #332]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	4a52      	ldr	r2, [pc, #328]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 8001416:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800141a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800141c:	4b50      	ldr	r3, [pc, #320]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	494d      	ldr	r1, [pc, #308]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 800142a:	4313      	orrs	r3, r2
 800142c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	2b00      	cmp	r3, #0
 8001438:	d040      	beq.n	80014bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d107      	bne.n	8001452 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001442:	4b47      	ldr	r3, [pc, #284]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d115      	bne.n	800147a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e07f      	b.n	8001552 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	2b02      	cmp	r3, #2
 8001458:	d107      	bne.n	800146a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800145a:	4b41      	ldr	r3, [pc, #260]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d109      	bne.n	800147a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e073      	b.n	8001552 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800146a:	4b3d      	ldr	r3, [pc, #244]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d101      	bne.n	800147a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e06b      	b.n	8001552 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800147a:	4b39      	ldr	r3, [pc, #228]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f023 0203 	bic.w	r2, r3, #3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	4936      	ldr	r1, [pc, #216]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 8001488:	4313      	orrs	r3, r2
 800148a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800148c:	f7ff fa3c 	bl	8000908 <HAL_GetTick>
 8001490:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001492:	e00a      	b.n	80014aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001494:	f7ff fa38 	bl	8000908 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	f241 3288 	movw	r2, #5000	; 0x1388
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e053      	b.n	8001552 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014aa:	4b2d      	ldr	r3, [pc, #180]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f003 020c 	and.w	r2, r3, #12
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d1eb      	bne.n	8001494 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014bc:	4b27      	ldr	r3, [pc, #156]	; (800155c <HAL_RCC_ClockConfig+0x1c0>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0307 	and.w	r3, r3, #7
 80014c4:	683a      	ldr	r2, [r7, #0]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d210      	bcs.n	80014ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ca:	4b24      	ldr	r3, [pc, #144]	; (800155c <HAL_RCC_ClockConfig+0x1c0>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f023 0207 	bic.w	r2, r3, #7
 80014d2:	4922      	ldr	r1, [pc, #136]	; (800155c <HAL_RCC_ClockConfig+0x1c0>)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014da:	4b20      	ldr	r3, [pc, #128]	; (800155c <HAL_RCC_ClockConfig+0x1c0>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0307 	and.w	r3, r3, #7
 80014e2:	683a      	ldr	r2, [r7, #0]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d001      	beq.n	80014ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e032      	b.n	8001552 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0304 	and.w	r3, r3, #4
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d008      	beq.n	800150a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014f8:	4b19      	ldr	r3, [pc, #100]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	4916      	ldr	r1, [pc, #88]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 8001506:	4313      	orrs	r3, r2
 8001508:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0308 	and.w	r3, r3, #8
 8001512:	2b00      	cmp	r3, #0
 8001514:	d009      	beq.n	800152a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001516:	4b12      	ldr	r3, [pc, #72]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	691b      	ldr	r3, [r3, #16]
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	490e      	ldr	r1, [pc, #56]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 8001526:	4313      	orrs	r3, r2
 8001528:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800152a:	f000 f859 	bl	80015e0 <HAL_RCC_GetSysClockFreq>
 800152e:	4602      	mov	r2, r0
 8001530:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	091b      	lsrs	r3, r3, #4
 8001536:	f003 030f 	and.w	r3, r3, #15
 800153a:	490a      	ldr	r1, [pc, #40]	; (8001564 <HAL_RCC_ClockConfig+0x1c8>)
 800153c:	5ccb      	ldrb	r3, [r1, r3]
 800153e:	fa22 f303 	lsr.w	r3, r2, r3
 8001542:	4a09      	ldr	r2, [pc, #36]	; (8001568 <HAL_RCC_ClockConfig+0x1cc>)
 8001544:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001546:	4b09      	ldr	r3, [pc, #36]	; (800156c <HAL_RCC_ClockConfig+0x1d0>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff f99a 	bl	8000884 <HAL_InitTick>

  return HAL_OK;
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40022000 	.word	0x40022000
 8001560:	40021000 	.word	0x40021000
 8001564:	080038cc 	.word	0x080038cc
 8001568:	20000000 	.word	0x20000000
 800156c:	20000004 	.word	0x20000004

08001570 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08a      	sub	sp, #40	; 0x28
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 800157c:	f107 0318 	add.w	r3, r7, #24
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 800158a:	2302      	movs	r3, #2
 800158c:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 800158e:	2303      	movs	r3, #3
 8001590:	627b      	str	r3, [r7, #36]	; 0x24
  gpio.Pull      = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 8001596:	f44f 7380 	mov.w	r3, #256	; 0x100
 800159a:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 800159c:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <HAL_RCC_MCOConfig+0x68>)
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	4a0d      	ldr	r2, [pc, #52]	; (80015d8 <HAL_RCC_MCOConfig+0x68>)
 80015a2:	f043 0304 	orr.w	r3, r3, #4
 80015a6:	6193      	str	r3, [r2, #24]
 80015a8:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <HAL_RCC_MCOConfig+0x68>)
 80015aa:	699b      	ldr	r3, [r3, #24]
 80015ac:	f003 0304 	and.w	r3, r3, #4
 80015b0:	617b      	str	r3, [r7, #20]
 80015b2:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 80015b4:	f107 0318 	add.w	r3, r7, #24
 80015b8:	4619      	mov	r1, r3
 80015ba:	4808      	ldr	r0, [pc, #32]	; (80015dc <HAL_RCC_MCOConfig+0x6c>)
 80015bc:	f7ff fab6 	bl	8000b2c <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 80015c0:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <HAL_RCC_MCOConfig+0x68>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80015c8:	4903      	ldr	r1, [pc, #12]	; (80015d8 <HAL_RCC_MCOConfig+0x68>)
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	604b      	str	r3, [r1, #4]
}
 80015d0:	bf00      	nop
 80015d2:	3728      	adds	r7, #40	; 0x28
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40021000 	.word	0x40021000
 80015dc:	40010800 	.word	0x40010800

080015e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b087      	sub	sp, #28
 80015e4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015e6:	2300      	movs	r3, #0
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	2300      	movs	r3, #0
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	2300      	movs	r3, #0
 80015f0:	617b      	str	r3, [r7, #20]
 80015f2:	2300      	movs	r3, #0
 80015f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80015f6:	2300      	movs	r3, #0
 80015f8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80015fa:	4b1e      	ldr	r3, [pc, #120]	; (8001674 <HAL_RCC_GetSysClockFreq+0x94>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f003 030c 	and.w	r3, r3, #12
 8001606:	2b04      	cmp	r3, #4
 8001608:	d002      	beq.n	8001610 <HAL_RCC_GetSysClockFreq+0x30>
 800160a:	2b08      	cmp	r3, #8
 800160c:	d003      	beq.n	8001616 <HAL_RCC_GetSysClockFreq+0x36>
 800160e:	e027      	b.n	8001660 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001610:	4b19      	ldr	r3, [pc, #100]	; (8001678 <HAL_RCC_GetSysClockFreq+0x98>)
 8001612:	613b      	str	r3, [r7, #16]
      break;
 8001614:	e027      	b.n	8001666 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	0c9b      	lsrs	r3, r3, #18
 800161a:	f003 030f 	and.w	r3, r3, #15
 800161e:	4a17      	ldr	r2, [pc, #92]	; (800167c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001620:	5cd3      	ldrb	r3, [r2, r3]
 8001622:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d010      	beq.n	8001650 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800162e:	4b11      	ldr	r3, [pc, #68]	; (8001674 <HAL_RCC_GetSysClockFreq+0x94>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	0c5b      	lsrs	r3, r3, #17
 8001634:	f003 0301 	and.w	r3, r3, #1
 8001638:	4a11      	ldr	r2, [pc, #68]	; (8001680 <HAL_RCC_GetSysClockFreq+0xa0>)
 800163a:	5cd3      	ldrb	r3, [r2, r3]
 800163c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a0d      	ldr	r2, [pc, #52]	; (8001678 <HAL_RCC_GetSysClockFreq+0x98>)
 8001642:	fb03 f202 	mul.w	r2, r3, r2
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	fbb2 f3f3 	udiv	r3, r2, r3
 800164c:	617b      	str	r3, [r7, #20]
 800164e:	e004      	b.n	800165a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4a0c      	ldr	r2, [pc, #48]	; (8001684 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001654:	fb02 f303 	mul.w	r3, r2, r3
 8001658:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	613b      	str	r3, [r7, #16]
      break;
 800165e:	e002      	b.n	8001666 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001660:	4b05      	ldr	r3, [pc, #20]	; (8001678 <HAL_RCC_GetSysClockFreq+0x98>)
 8001662:	613b      	str	r3, [r7, #16]
      break;
 8001664:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001666:	693b      	ldr	r3, [r7, #16]
}
 8001668:	4618      	mov	r0, r3
 800166a:	371c      	adds	r7, #28
 800166c:	46bd      	mov	sp, r7
 800166e:	bc80      	pop	{r7}
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	40021000 	.word	0x40021000
 8001678:	007a1200 	.word	0x007a1200
 800167c:	080038e4 	.word	0x080038e4
 8001680:	080038f4 	.word	0x080038f4
 8001684:	003d0900 	.word	0x003d0900

08001688 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800168c:	4b02      	ldr	r3, [pc, #8]	; (8001698 <HAL_RCC_GetHCLKFreq+0x10>)
 800168e:	681b      	ldr	r3, [r3, #0]
}
 8001690:	4618      	mov	r0, r3
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr
 8001698:	20000000 	.word	0x20000000

0800169c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80016a0:	f7ff fff2 	bl	8001688 <HAL_RCC_GetHCLKFreq>
 80016a4:	4602      	mov	r2, r0
 80016a6:	4b05      	ldr	r3, [pc, #20]	; (80016bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	0a1b      	lsrs	r3, r3, #8
 80016ac:	f003 0307 	and.w	r3, r3, #7
 80016b0:	4903      	ldr	r1, [pc, #12]	; (80016c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80016b2:	5ccb      	ldrb	r3, [r1, r3]
 80016b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40021000 	.word	0x40021000
 80016c0:	080038dc 	.word	0x080038dc

080016c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80016c8:	f7ff ffde 	bl	8001688 <HAL_RCC_GetHCLKFreq>
 80016cc:	4602      	mov	r2, r0
 80016ce:	4b05      	ldr	r3, [pc, #20]	; (80016e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	0adb      	lsrs	r3, r3, #11
 80016d4:	f003 0307 	and.w	r3, r3, #7
 80016d8:	4903      	ldr	r1, [pc, #12]	; (80016e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80016da:	5ccb      	ldrb	r3, [r1, r3]
 80016dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40021000 	.word	0x40021000
 80016e8:	080038dc 	.word	0x080038dc

080016ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80016f4:	4b0a      	ldr	r3, [pc, #40]	; (8001720 <RCC_Delay+0x34>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a0a      	ldr	r2, [pc, #40]	; (8001724 <RCC_Delay+0x38>)
 80016fa:	fba2 2303 	umull	r2, r3, r2, r3
 80016fe:	0a5b      	lsrs	r3, r3, #9
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	fb02 f303 	mul.w	r3, r2, r3
 8001706:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001708:	bf00      	nop
  }
  while (Delay --);
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	1e5a      	subs	r2, r3, #1
 800170e:	60fa      	str	r2, [r7, #12]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1f9      	bne.n	8001708 <RCC_Delay+0x1c>
}
 8001714:	bf00      	nop
 8001716:	bf00      	nop
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr
 8001720:	20000000 	.word	0x20000000
 8001724:	10624dd3 	.word	0x10624dd3

08001728 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d101      	bne.n	800173a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e041      	b.n	80017be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001740:	b2db      	uxtb	r3, r3
 8001742:	2b00      	cmp	r3, #0
 8001744:	d106      	bne.n	8001754 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7fe fefe 	bl	8000550 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2202      	movs	r2, #2
 8001758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	3304      	adds	r3, #4
 8001764:	4619      	mov	r1, r3
 8001766:	4610      	mov	r0, r2
 8001768:	f000 fab2 	bl	8001cd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2201      	movs	r2, #1
 8001770:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2201      	movs	r2, #1
 8001778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2201      	movs	r2, #1
 8001780:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2201      	movs	r2, #1
 8001788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2201      	movs	r2, #1
 8001790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2201      	movs	r2, #1
 8001798:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2201      	movs	r2, #1
 80017a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2201      	movs	r2, #1
 80017a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2201      	movs	r2, #1
 80017b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2201      	movs	r2, #1
 80017b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b082      	sub	sp, #8
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d101      	bne.n	80017d8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e041      	b.n	800185c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d106      	bne.n	80017f2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f000 f839 	bl	8001864 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2202      	movs	r2, #2
 80017f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	3304      	adds	r3, #4
 8001802:	4619      	mov	r1, r3
 8001804:	4610      	mov	r0, r2
 8001806:	f000 fa63 	bl	8001cd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2201      	movs	r2, #1
 800180e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2201      	movs	r2, #1
 8001816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2201      	movs	r2, #1
 800181e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2201      	movs	r2, #1
 8001826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2201      	movs	r2, #1
 800182e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2201      	movs	r2, #1
 8001836:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2201      	movs	r2, #1
 800183e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2201      	movs	r2, #1
 8001846:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2201      	movs	r2, #1
 800184e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2201      	movs	r2, #1
 8001856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800185a:	2300      	movs	r3, #0
}
 800185c:	4618      	mov	r0, r3
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	bc80      	pop	{r7}
 8001874:	4770      	bx	lr
	...

08001878 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d109      	bne.n	800189c <HAL_TIM_PWM_Start+0x24>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800188e:	b2db      	uxtb	r3, r3
 8001890:	2b01      	cmp	r3, #1
 8001892:	bf14      	ite	ne
 8001894:	2301      	movne	r3, #1
 8001896:	2300      	moveq	r3, #0
 8001898:	b2db      	uxtb	r3, r3
 800189a:	e022      	b.n	80018e2 <HAL_TIM_PWM_Start+0x6a>
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	2b04      	cmp	r3, #4
 80018a0:	d109      	bne.n	80018b6 <HAL_TIM_PWM_Start+0x3e>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	bf14      	ite	ne
 80018ae:	2301      	movne	r3, #1
 80018b0:	2300      	moveq	r3, #0
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	e015      	b.n	80018e2 <HAL_TIM_PWM_Start+0x6a>
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	2b08      	cmp	r3, #8
 80018ba:	d109      	bne.n	80018d0 <HAL_TIM_PWM_Start+0x58>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	bf14      	ite	ne
 80018c8:	2301      	movne	r3, #1
 80018ca:	2300      	moveq	r3, #0
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	e008      	b.n	80018e2 <HAL_TIM_PWM_Start+0x6a>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	2b01      	cmp	r3, #1
 80018da:	bf14      	ite	ne
 80018dc:	2301      	movne	r3, #1
 80018de:	2300      	moveq	r3, #0
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e05e      	b.n	80019a8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d104      	bne.n	80018fa <HAL_TIM_PWM_Start+0x82>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2202      	movs	r2, #2
 80018f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80018f8:	e013      	b.n	8001922 <HAL_TIM_PWM_Start+0xaa>
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	2b04      	cmp	r3, #4
 80018fe:	d104      	bne.n	800190a <HAL_TIM_PWM_Start+0x92>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2202      	movs	r2, #2
 8001904:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001908:	e00b      	b.n	8001922 <HAL_TIM_PWM_Start+0xaa>
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	2b08      	cmp	r3, #8
 800190e:	d104      	bne.n	800191a <HAL_TIM_PWM_Start+0xa2>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2202      	movs	r2, #2
 8001914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001918:	e003      	b.n	8001922 <HAL_TIM_PWM_Start+0xaa>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2202      	movs	r2, #2
 800191e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2201      	movs	r2, #1
 8001928:	6839      	ldr	r1, [r7, #0]
 800192a:	4618      	mov	r0, r3
 800192c:	f000 fc50 	bl	80021d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a1e      	ldr	r2, [pc, #120]	; (80019b0 <HAL_TIM_PWM_Start+0x138>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d107      	bne.n	800194a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001948:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a18      	ldr	r2, [pc, #96]	; (80019b0 <HAL_TIM_PWM_Start+0x138>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d00e      	beq.n	8001972 <HAL_TIM_PWM_Start+0xfa>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800195c:	d009      	beq.n	8001972 <HAL_TIM_PWM_Start+0xfa>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a14      	ldr	r2, [pc, #80]	; (80019b4 <HAL_TIM_PWM_Start+0x13c>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d004      	beq.n	8001972 <HAL_TIM_PWM_Start+0xfa>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a12      	ldr	r2, [pc, #72]	; (80019b8 <HAL_TIM_PWM_Start+0x140>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d111      	bne.n	8001996 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f003 0307 	and.w	r3, r3, #7
 800197c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2b06      	cmp	r3, #6
 8001982:	d010      	beq.n	80019a6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f042 0201 	orr.w	r2, r2, #1
 8001992:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001994:	e007      	b.n	80019a6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f042 0201 	orr.w	r2, r2, #1
 80019a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3710      	adds	r7, #16
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40012c00 	.word	0x40012c00
 80019b4:	40000400 	.word	0x40000400
 80019b8:	40000800 	.word	0x40000800

080019bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019c8:	2300      	movs	r3, #0
 80019ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d101      	bne.n	80019da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80019d6:	2302      	movs	r3, #2
 80019d8:	e0ae      	b.n	8001b38 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	2201      	movs	r2, #1
 80019de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2b0c      	cmp	r3, #12
 80019e6:	f200 809f 	bhi.w	8001b28 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80019ea:	a201      	add	r2, pc, #4	; (adr r2, 80019f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80019ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019f0:	08001a25 	.word	0x08001a25
 80019f4:	08001b29 	.word	0x08001b29
 80019f8:	08001b29 	.word	0x08001b29
 80019fc:	08001b29 	.word	0x08001b29
 8001a00:	08001a65 	.word	0x08001a65
 8001a04:	08001b29 	.word	0x08001b29
 8001a08:	08001b29 	.word	0x08001b29
 8001a0c:	08001b29 	.word	0x08001b29
 8001a10:	08001aa7 	.word	0x08001aa7
 8001a14:	08001b29 	.word	0x08001b29
 8001a18:	08001b29 	.word	0x08001b29
 8001a1c:	08001b29 	.word	0x08001b29
 8001a20:	08001ae7 	.word	0x08001ae7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	68b9      	ldr	r1, [r7, #8]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f000 f9b2 	bl	8001d94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	699a      	ldr	r2, [r3, #24]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f042 0208 	orr.w	r2, r2, #8
 8001a3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	699a      	ldr	r2, [r3, #24]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f022 0204 	bic.w	r2, r2, #4
 8001a4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6999      	ldr	r1, [r3, #24]
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	691a      	ldr	r2, [r3, #16]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	619a      	str	r2, [r3, #24]
      break;
 8001a62:	e064      	b.n	8001b2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	68b9      	ldr	r1, [r7, #8]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f000 f9f8 	bl	8001e60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	699a      	ldr	r2, [r3, #24]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	699a      	ldr	r2, [r3, #24]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	6999      	ldr	r1, [r3, #24]
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	691b      	ldr	r3, [r3, #16]
 8001a9a:	021a      	lsls	r2, r3, #8
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	619a      	str	r2, [r3, #24]
      break;
 8001aa4:	e043      	b.n	8001b2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	68b9      	ldr	r1, [r7, #8]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f000 fa41 	bl	8001f34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	69da      	ldr	r2, [r3, #28]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f042 0208 	orr.w	r2, r2, #8
 8001ac0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	69da      	ldr	r2, [r3, #28]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f022 0204 	bic.w	r2, r2, #4
 8001ad0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	69d9      	ldr	r1, [r3, #28]
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	691a      	ldr	r2, [r3, #16]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	61da      	str	r2, [r3, #28]
      break;
 8001ae4:	e023      	b.n	8001b2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	68b9      	ldr	r1, [r7, #8]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f000 fa8b 	bl	8002008 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	69da      	ldr	r2, [r3, #28]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	69da      	ldr	r2, [r3, #28]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	69d9      	ldr	r1, [r3, #28]
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	021a      	lsls	r2, r3, #8
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	430a      	orrs	r2, r1
 8001b24:	61da      	str	r2, [r3, #28]
      break;
 8001b26:	e002      	b.n	8001b2e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	75fb      	strb	r3, [r7, #23]
      break;
 8001b2c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001b36:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3718      	adds	r7, #24
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d101      	bne.n	8001b5c <HAL_TIM_ConfigClockSource+0x1c>
 8001b58:	2302      	movs	r3, #2
 8001b5a:	e0b4      	b.n	8001cc6 <HAL_TIM_ConfigClockSource+0x186>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2202      	movs	r2, #2
 8001b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001b7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001b82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	68ba      	ldr	r2, [r7, #8]
 8001b8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b94:	d03e      	beq.n	8001c14 <HAL_TIM_ConfigClockSource+0xd4>
 8001b96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b9a:	f200 8087 	bhi.w	8001cac <HAL_TIM_ConfigClockSource+0x16c>
 8001b9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ba2:	f000 8086 	beq.w	8001cb2 <HAL_TIM_ConfigClockSource+0x172>
 8001ba6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001baa:	d87f      	bhi.n	8001cac <HAL_TIM_ConfigClockSource+0x16c>
 8001bac:	2b70      	cmp	r3, #112	; 0x70
 8001bae:	d01a      	beq.n	8001be6 <HAL_TIM_ConfigClockSource+0xa6>
 8001bb0:	2b70      	cmp	r3, #112	; 0x70
 8001bb2:	d87b      	bhi.n	8001cac <HAL_TIM_ConfigClockSource+0x16c>
 8001bb4:	2b60      	cmp	r3, #96	; 0x60
 8001bb6:	d050      	beq.n	8001c5a <HAL_TIM_ConfigClockSource+0x11a>
 8001bb8:	2b60      	cmp	r3, #96	; 0x60
 8001bba:	d877      	bhi.n	8001cac <HAL_TIM_ConfigClockSource+0x16c>
 8001bbc:	2b50      	cmp	r3, #80	; 0x50
 8001bbe:	d03c      	beq.n	8001c3a <HAL_TIM_ConfigClockSource+0xfa>
 8001bc0:	2b50      	cmp	r3, #80	; 0x50
 8001bc2:	d873      	bhi.n	8001cac <HAL_TIM_ConfigClockSource+0x16c>
 8001bc4:	2b40      	cmp	r3, #64	; 0x40
 8001bc6:	d058      	beq.n	8001c7a <HAL_TIM_ConfigClockSource+0x13a>
 8001bc8:	2b40      	cmp	r3, #64	; 0x40
 8001bca:	d86f      	bhi.n	8001cac <HAL_TIM_ConfigClockSource+0x16c>
 8001bcc:	2b30      	cmp	r3, #48	; 0x30
 8001bce:	d064      	beq.n	8001c9a <HAL_TIM_ConfigClockSource+0x15a>
 8001bd0:	2b30      	cmp	r3, #48	; 0x30
 8001bd2:	d86b      	bhi.n	8001cac <HAL_TIM_ConfigClockSource+0x16c>
 8001bd4:	2b20      	cmp	r3, #32
 8001bd6:	d060      	beq.n	8001c9a <HAL_TIM_ConfigClockSource+0x15a>
 8001bd8:	2b20      	cmp	r3, #32
 8001bda:	d867      	bhi.n	8001cac <HAL_TIM_ConfigClockSource+0x16c>
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d05c      	beq.n	8001c9a <HAL_TIM_ConfigClockSource+0x15a>
 8001be0:	2b10      	cmp	r3, #16
 8001be2:	d05a      	beq.n	8001c9a <HAL_TIM_ConfigClockSource+0x15a>
 8001be4:	e062      	b.n	8001cac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001bf6:	f000 facc 	bl	8002192 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001c08:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	68ba      	ldr	r2, [r7, #8]
 8001c10:	609a      	str	r2, [r3, #8]
      break;
 8001c12:	e04f      	b.n	8001cb4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001c24:	f000 fab5 	bl	8002192 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	689a      	ldr	r2, [r3, #8]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c36:	609a      	str	r2, [r3, #8]
      break;
 8001c38:	e03c      	b.n	8001cb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c46:	461a      	mov	r2, r3
 8001c48:	f000 fa2c 	bl	80020a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2150      	movs	r1, #80	; 0x50
 8001c52:	4618      	mov	r0, r3
 8001c54:	f000 fa83 	bl	800215e <TIM_ITRx_SetConfig>
      break;
 8001c58:	e02c      	b.n	8001cb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001c66:	461a      	mov	r2, r3
 8001c68:	f000 fa4a 	bl	8002100 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2160      	movs	r1, #96	; 0x60
 8001c72:	4618      	mov	r0, r3
 8001c74:	f000 fa73 	bl	800215e <TIM_ITRx_SetConfig>
      break;
 8001c78:	e01c      	b.n	8001cb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c86:	461a      	mov	r2, r3
 8001c88:	f000 fa0c 	bl	80020a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2140      	movs	r1, #64	; 0x40
 8001c92:	4618      	mov	r0, r3
 8001c94:	f000 fa63 	bl	800215e <TIM_ITRx_SetConfig>
      break;
 8001c98:	e00c      	b.n	8001cb4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4610      	mov	r0, r2
 8001ca6:	f000 fa5a 	bl	800215e <TIM_ITRx_SetConfig>
      break;
 8001caa:	e003      	b.n	8001cb4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	73fb      	strb	r3, [r7, #15]
      break;
 8001cb0:	e000      	b.n	8001cb4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001cb2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
	...

08001cd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4a29      	ldr	r2, [pc, #164]	; (8001d88 <TIM_Base_SetConfig+0xb8>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d00b      	beq.n	8001d00 <TIM_Base_SetConfig+0x30>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cee:	d007      	beq.n	8001d00 <TIM_Base_SetConfig+0x30>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4a26      	ldr	r2, [pc, #152]	; (8001d8c <TIM_Base_SetConfig+0xbc>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d003      	beq.n	8001d00 <TIM_Base_SetConfig+0x30>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a25      	ldr	r2, [pc, #148]	; (8001d90 <TIM_Base_SetConfig+0xc0>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d108      	bne.n	8001d12 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	68fa      	ldr	r2, [r7, #12]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a1c      	ldr	r2, [pc, #112]	; (8001d88 <TIM_Base_SetConfig+0xb8>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d00b      	beq.n	8001d32 <TIM_Base_SetConfig+0x62>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d20:	d007      	beq.n	8001d32 <TIM_Base_SetConfig+0x62>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a19      	ldr	r2, [pc, #100]	; (8001d8c <TIM_Base_SetConfig+0xbc>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d003      	beq.n	8001d32 <TIM_Base_SetConfig+0x62>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a18      	ldr	r2, [pc, #96]	; (8001d90 <TIM_Base_SetConfig+0xc0>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d108      	bne.n	8001d44 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	68fa      	ldr	r2, [r7, #12]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	695b      	ldr	r3, [r3, #20]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	68fa      	ldr	r2, [r7, #12]
 8001d56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	689a      	ldr	r2, [r3, #8]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a07      	ldr	r2, [pc, #28]	; (8001d88 <TIM_Base_SetConfig+0xb8>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d103      	bne.n	8001d78 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	691a      	ldr	r2, [r3, #16]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	615a      	str	r2, [r3, #20]
}
 8001d7e:	bf00      	nop
 8001d80:	3714      	adds	r7, #20
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bc80      	pop	{r7}
 8001d86:	4770      	bx	lr
 8001d88:	40012c00 	.word	0x40012c00
 8001d8c:	40000400 	.word	0x40000400
 8001d90:	40000800 	.word	0x40000800

08001d94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b087      	sub	sp, #28
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a1b      	ldr	r3, [r3, #32]
 8001da2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a1b      	ldr	r3, [r3, #32]
 8001da8:	f023 0201 	bic.w	r2, r3, #1
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f023 0303 	bic.w	r3, r3, #3
 8001dca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	f023 0302 	bic.w	r3, r3, #2
 8001ddc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	697a      	ldr	r2, [r7, #20]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4a1c      	ldr	r2, [pc, #112]	; (8001e5c <TIM_OC1_SetConfig+0xc8>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d10c      	bne.n	8001e0a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	f023 0308 	bic.w	r3, r3, #8
 8001df6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	697a      	ldr	r2, [r7, #20]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	f023 0304 	bic.w	r3, r3, #4
 8001e08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a13      	ldr	r2, [pc, #76]	; (8001e5c <TIM_OC1_SetConfig+0xc8>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d111      	bne.n	8001e36 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001e20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	695b      	ldr	r3, [r3, #20]
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685a      	ldr	r2, [r3, #4]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	697a      	ldr	r2, [r7, #20]
 8001e4e:	621a      	str	r2, [r3, #32]
}
 8001e50:	bf00      	nop
 8001e52:	371c      	adds	r7, #28
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bc80      	pop	{r7}
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	40012c00 	.word	0x40012c00

08001e60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b087      	sub	sp, #28
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6a1b      	ldr	r3, [r3, #32]
 8001e6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	f023 0210 	bic.w	r2, r3, #16
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	021b      	lsls	r3, r3, #8
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	f023 0320 	bic.w	r3, r3, #32
 8001eaa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	011b      	lsls	r3, r3, #4
 8001eb2:	697a      	ldr	r2, [r7, #20]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a1d      	ldr	r2, [pc, #116]	; (8001f30 <TIM_OC2_SetConfig+0xd0>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d10d      	bne.n	8001edc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ec6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	011b      	lsls	r3, r3, #4
 8001ece:	697a      	ldr	r2, [r7, #20]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001eda:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a14      	ldr	r2, [pc, #80]	; (8001f30 <TIM_OC2_SetConfig+0xd0>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d113      	bne.n	8001f0c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001eea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001ef2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	695b      	ldr	r3, [r3, #20]
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685a      	ldr	r2, [r3, #4]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	697a      	ldr	r2, [r7, #20]
 8001f24:	621a      	str	r2, [r3, #32]
}
 8001f26:	bf00      	nop
 8001f28:	371c      	adds	r7, #28
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr
 8001f30:	40012c00 	.word	0x40012c00

08001f34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b087      	sub	sp, #28
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a1b      	ldr	r3, [r3, #32]
 8001f42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a1b      	ldr	r3, [r3, #32]
 8001f48:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f023 0303 	bic.w	r3, r3, #3
 8001f6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	021b      	lsls	r3, r3, #8
 8001f84:	697a      	ldr	r2, [r7, #20]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a1d      	ldr	r2, [pc, #116]	; (8002004 <TIM_OC3_SetConfig+0xd0>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d10d      	bne.n	8001fae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	021b      	lsls	r3, r3, #8
 8001fa0:	697a      	ldr	r2, [r7, #20]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001fac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a14      	ldr	r2, [pc, #80]	; (8002004 <TIM_OC3_SetConfig+0xd0>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d113      	bne.n	8001fde <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001fbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001fc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	011b      	lsls	r3, r3, #4
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	011b      	lsls	r3, r3, #4
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685a      	ldr	r2, [r3, #4]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	697a      	ldr	r2, [r7, #20]
 8001ff6:	621a      	str	r2, [r3, #32]
}
 8001ff8:	bf00      	nop
 8001ffa:	371c      	adds	r7, #28
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bc80      	pop	{r7}
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	40012c00 	.word	0x40012c00

08002008 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002008:	b480      	push	{r7}
 800200a:	b087      	sub	sp, #28
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a1b      	ldr	r3, [r3, #32]
 8002016:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	69db      	ldr	r3, [r3, #28]
 800202e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800203e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	021b      	lsls	r3, r3, #8
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	4313      	orrs	r3, r2
 800204a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002052:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	031b      	lsls	r3, r3, #12
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	4313      	orrs	r3, r2
 800205e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a0f      	ldr	r2, [pc, #60]	; (80020a0 <TIM_OC4_SetConfig+0x98>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d109      	bne.n	800207c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800206e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	695b      	ldr	r3, [r3, #20]
 8002074:	019b      	lsls	r3, r3, #6
 8002076:	697a      	ldr	r2, [r7, #20]
 8002078:	4313      	orrs	r3, r2
 800207a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685a      	ldr	r2, [r3, #4]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	621a      	str	r2, [r3, #32]
}
 8002096:	bf00      	nop
 8002098:	371c      	adds	r7, #28
 800209a:	46bd      	mov	sp, r7
 800209c:	bc80      	pop	{r7}
 800209e:	4770      	bx	lr
 80020a0:	40012c00 	.word	0x40012c00

080020a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b087      	sub	sp, #28
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6a1b      	ldr	r3, [r3, #32]
 80020b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6a1b      	ldr	r3, [r3, #32]
 80020ba:	f023 0201 	bic.w	r2, r3, #1
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	011b      	lsls	r3, r3, #4
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	f023 030a 	bic.w	r3, r3, #10
 80020e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80020e2:	697a      	ldr	r2, [r7, #20]
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	621a      	str	r2, [r3, #32]
}
 80020f6:	bf00      	nop
 80020f8:	371c      	adds	r7, #28
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bc80      	pop	{r7}
 80020fe:	4770      	bx	lr

08002100 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002100:	b480      	push	{r7}
 8002102:	b087      	sub	sp, #28
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6a1b      	ldr	r3, [r3, #32]
 8002110:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6a1b      	ldr	r3, [r3, #32]
 8002116:	f023 0210 	bic.w	r2, r3, #16
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800212a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	031b      	lsls	r3, r3, #12
 8002130:	693a      	ldr	r2, [r7, #16]
 8002132:	4313      	orrs	r3, r2
 8002134:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800213c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	011b      	lsls	r3, r3, #4
 8002142:	697a      	ldr	r2, [r7, #20]
 8002144:	4313      	orrs	r3, r2
 8002146:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	697a      	ldr	r2, [r7, #20]
 8002152:	621a      	str	r2, [r3, #32]
}
 8002154:	bf00      	nop
 8002156:	371c      	adds	r7, #28
 8002158:	46bd      	mov	sp, r7
 800215a:	bc80      	pop	{r7}
 800215c:	4770      	bx	lr

0800215e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800215e:	b480      	push	{r7}
 8002160:	b085      	sub	sp, #20
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
 8002166:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002174:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	4313      	orrs	r3, r2
 800217c:	f043 0307 	orr.w	r3, r3, #7
 8002180:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	609a      	str	r2, [r3, #8]
}
 8002188:	bf00      	nop
 800218a:	3714      	adds	r7, #20
 800218c:	46bd      	mov	sp, r7
 800218e:	bc80      	pop	{r7}
 8002190:	4770      	bx	lr

08002192 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002192:	b480      	push	{r7}
 8002194:	b087      	sub	sp, #28
 8002196:	af00      	add	r7, sp, #0
 8002198:	60f8      	str	r0, [r7, #12]
 800219a:	60b9      	str	r1, [r7, #8]
 800219c:	607a      	str	r2, [r7, #4]
 800219e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021ac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	021a      	lsls	r2, r3, #8
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	431a      	orrs	r2, r3
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	697a      	ldr	r2, [r7, #20]
 80021bc:	4313      	orrs	r3, r2
 80021be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	697a      	ldr	r2, [r7, #20]
 80021c4:	609a      	str	r2, [r3, #8]
}
 80021c6:	bf00      	nop
 80021c8:	371c      	adds	r7, #28
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bc80      	pop	{r7}
 80021ce:	4770      	bx	lr

080021d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b087      	sub	sp, #28
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	f003 031f 	and.w	r3, r3, #31
 80021e2:	2201      	movs	r2, #1
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6a1a      	ldr	r2, [r3, #32]
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	43db      	mvns	r3, r3
 80021f2:	401a      	ands	r2, r3
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6a1a      	ldr	r2, [r3, #32]
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	f003 031f 	and.w	r3, r3, #31
 8002202:	6879      	ldr	r1, [r7, #4]
 8002204:	fa01 f303 	lsl.w	r3, r1, r3
 8002208:	431a      	orrs	r2, r3
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	621a      	str	r2, [r3, #32]
}
 800220e:	bf00      	nop
 8002210:	371c      	adds	r7, #28
 8002212:	46bd      	mov	sp, r7
 8002214:	bc80      	pop	{r7}
 8002216:	4770      	bx	lr

08002218 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002228:	2b01      	cmp	r3, #1
 800222a:	d101      	bne.n	8002230 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800222c:	2302      	movs	r3, #2
 800222e:	e046      	b.n	80022be <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2202      	movs	r2, #2
 800223c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002256:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	4313      	orrs	r3, r2
 8002260:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a16      	ldr	r2, [pc, #88]	; (80022c8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d00e      	beq.n	8002292 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800227c:	d009      	beq.n	8002292 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a12      	ldr	r2, [pc, #72]	; (80022cc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d004      	beq.n	8002292 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a10      	ldr	r2, [pc, #64]	; (80022d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d10c      	bne.n	80022ac <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002298:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	68ba      	ldr	r2, [r7, #8]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	68ba      	ldr	r2, [r7, #8]
 80022aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3714      	adds	r7, #20
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bc80      	pop	{r7}
 80022c6:	4770      	bx	lr
 80022c8:	40012c00 	.word	0x40012c00
 80022cc:	40000400 	.word	0x40000400
 80022d0:	40000800 	.word	0x40000800

080022d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e042      	b.n	800236c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d106      	bne.n	8002300 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f7fe f98a 	bl	8000614 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2224      	movs	r2, #36	; 0x24
 8002304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	68da      	ldr	r2, [r3, #12]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002316:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 f91d 	bl	8002558 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	691a      	ldr	r2, [r3, #16]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800232c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	695a      	ldr	r2, [r3, #20]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800233c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	68da      	ldr	r2, [r3, #12]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800234c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2220      	movs	r2, #32
 8002358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2220      	movs	r2, #32
 8002360:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	3708      	adds	r7, #8
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b08a      	sub	sp, #40	; 0x28
 8002378:	af02      	add	r7, sp, #8
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	603b      	str	r3, [r7, #0]
 8002380:	4613      	mov	r3, r2
 8002382:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800238e:	b2db      	uxtb	r3, r3
 8002390:	2b20      	cmp	r3, #32
 8002392:	d16d      	bne.n	8002470 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d002      	beq.n	80023a0 <HAL_UART_Transmit+0x2c>
 800239a:	88fb      	ldrh	r3, [r7, #6]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d101      	bne.n	80023a4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e066      	b.n	8002472 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2200      	movs	r2, #0
 80023a8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2221      	movs	r2, #33	; 0x21
 80023ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023b2:	f7fe faa9 	bl	8000908 <HAL_GetTick>
 80023b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	88fa      	ldrh	r2, [r7, #6]
 80023bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	88fa      	ldrh	r2, [r7, #6]
 80023c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023cc:	d108      	bne.n	80023e0 <HAL_UART_Transmit+0x6c>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d104      	bne.n	80023e0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80023d6:	2300      	movs	r3, #0
 80023d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	61bb      	str	r3, [r7, #24]
 80023de:	e003      	b.n	80023e8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023e4:	2300      	movs	r3, #0
 80023e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80023e8:	e02a      	b.n	8002440 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	2200      	movs	r2, #0
 80023f2:	2180      	movs	r1, #128	; 0x80
 80023f4:	68f8      	ldr	r0, [r7, #12]
 80023f6:	f000 f840 	bl	800247a <UART_WaitOnFlagUntilTimeout>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e036      	b.n	8002472 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10b      	bne.n	8002422 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	881b      	ldrh	r3, [r3, #0]
 800240e:	461a      	mov	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002418:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	3302      	adds	r3, #2
 800241e:	61bb      	str	r3, [r7, #24]
 8002420:	e007      	b.n	8002432 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	781a      	ldrb	r2, [r3, #0]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	3301      	adds	r3, #1
 8002430:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002436:	b29b      	uxth	r3, r3
 8002438:	3b01      	subs	r3, #1
 800243a:	b29a      	uxth	r2, r3
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002444:	b29b      	uxth	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1cf      	bne.n	80023ea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	9300      	str	r3, [sp, #0]
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	2200      	movs	r2, #0
 8002452:	2140      	movs	r1, #64	; 0x40
 8002454:	68f8      	ldr	r0, [r7, #12]
 8002456:	f000 f810 	bl	800247a <UART_WaitOnFlagUntilTimeout>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e006      	b.n	8002472 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2220      	movs	r2, #32
 8002468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800246c:	2300      	movs	r3, #0
 800246e:	e000      	b.n	8002472 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002470:	2302      	movs	r3, #2
  }
}
 8002472:	4618      	mov	r0, r3
 8002474:	3720      	adds	r7, #32
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b090      	sub	sp, #64	; 0x40
 800247e:	af00      	add	r7, sp, #0
 8002480:	60f8      	str	r0, [r7, #12]
 8002482:	60b9      	str	r1, [r7, #8]
 8002484:	603b      	str	r3, [r7, #0]
 8002486:	4613      	mov	r3, r2
 8002488:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800248a:	e050      	b.n	800252e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800248c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800248e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002492:	d04c      	beq.n	800252e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002494:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002496:	2b00      	cmp	r3, #0
 8002498:	d007      	beq.n	80024aa <UART_WaitOnFlagUntilTimeout+0x30>
 800249a:	f7fe fa35 	bl	8000908 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d241      	bcs.n	800252e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	330c      	adds	r3, #12
 80024b0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b4:	e853 3f00 	ldrex	r3, [r3]
 80024b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80024c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	330c      	adds	r3, #12
 80024c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024ca:	637a      	str	r2, [r7, #52]	; 0x34
 80024cc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024d2:	e841 2300 	strex	r3, r2, [r1]
 80024d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80024d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1e5      	bne.n	80024aa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	3314      	adds	r3, #20
 80024e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	e853 3f00 	ldrex	r3, [r3]
 80024ec:	613b      	str	r3, [r7, #16]
   return(result);
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	f023 0301 	bic.w	r3, r3, #1
 80024f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	3314      	adds	r3, #20
 80024fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024fe:	623a      	str	r2, [r7, #32]
 8002500:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002502:	69f9      	ldr	r1, [r7, #28]
 8002504:	6a3a      	ldr	r2, [r7, #32]
 8002506:	e841 2300 	strex	r3, r2, [r1]
 800250a:	61bb      	str	r3, [r7, #24]
   return(result);
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1e5      	bne.n	80024de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2220      	movs	r2, #32
 8002516:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2220      	movs	r2, #32
 800251e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e00f      	b.n	800254e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	4013      	ands	r3, r2
 8002538:	68ba      	ldr	r2, [r7, #8]
 800253a:	429a      	cmp	r2, r3
 800253c:	bf0c      	ite	eq
 800253e:	2301      	moveq	r3, #1
 8002540:	2300      	movne	r3, #0
 8002542:	b2db      	uxtb	r3, r3
 8002544:	461a      	mov	r2, r3
 8002546:	79fb      	ldrb	r3, [r7, #7]
 8002548:	429a      	cmp	r2, r3
 800254a:	d09f      	beq.n	800248c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3740      	adds	r7, #64	; 0x40
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
	...

08002558 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	68da      	ldr	r2, [r3, #12]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	430a      	orrs	r2, r1
 8002574:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	689a      	ldr	r2, [r3, #8]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	431a      	orrs	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	695b      	ldr	r3, [r3, #20]
 8002584:	4313      	orrs	r3, r2
 8002586:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002592:	f023 030c 	bic.w	r3, r3, #12
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	6812      	ldr	r2, [r2, #0]
 800259a:	68b9      	ldr	r1, [r7, #8]
 800259c:	430b      	orrs	r3, r1
 800259e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	699a      	ldr	r2, [r3, #24]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	430a      	orrs	r2, r1
 80025b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a2c      	ldr	r2, [pc, #176]	; (800266c <UART_SetConfig+0x114>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d103      	bne.n	80025c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80025c0:	f7ff f880 	bl	80016c4 <HAL_RCC_GetPCLK2Freq>
 80025c4:	60f8      	str	r0, [r7, #12]
 80025c6:	e002      	b.n	80025ce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80025c8:	f7ff f868 	bl	800169c <HAL_RCC_GetPCLK1Freq>
 80025cc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	4613      	mov	r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4413      	add	r3, r2
 80025d6:	009a      	lsls	r2, r3, #2
 80025d8:	441a      	add	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e4:	4a22      	ldr	r2, [pc, #136]	; (8002670 <UART_SetConfig+0x118>)
 80025e6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ea:	095b      	lsrs	r3, r3, #5
 80025ec:	0119      	lsls	r1, r3, #4
 80025ee:	68fa      	ldr	r2, [r7, #12]
 80025f0:	4613      	mov	r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	4413      	add	r3, r2
 80025f6:	009a      	lsls	r2, r3, #2
 80025f8:	441a      	add	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	fbb2 f2f3 	udiv	r2, r2, r3
 8002604:	4b1a      	ldr	r3, [pc, #104]	; (8002670 <UART_SetConfig+0x118>)
 8002606:	fba3 0302 	umull	r0, r3, r3, r2
 800260a:	095b      	lsrs	r3, r3, #5
 800260c:	2064      	movs	r0, #100	; 0x64
 800260e:	fb00 f303 	mul.w	r3, r0, r3
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	011b      	lsls	r3, r3, #4
 8002616:	3332      	adds	r3, #50	; 0x32
 8002618:	4a15      	ldr	r2, [pc, #84]	; (8002670 <UART_SetConfig+0x118>)
 800261a:	fba2 2303 	umull	r2, r3, r2, r3
 800261e:	095b      	lsrs	r3, r3, #5
 8002620:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002624:	4419      	add	r1, r3
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	4613      	mov	r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	4413      	add	r3, r2
 800262e:	009a      	lsls	r2, r3, #2
 8002630:	441a      	add	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	fbb2 f2f3 	udiv	r2, r2, r3
 800263c:	4b0c      	ldr	r3, [pc, #48]	; (8002670 <UART_SetConfig+0x118>)
 800263e:	fba3 0302 	umull	r0, r3, r3, r2
 8002642:	095b      	lsrs	r3, r3, #5
 8002644:	2064      	movs	r0, #100	; 0x64
 8002646:	fb00 f303 	mul.w	r3, r0, r3
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	011b      	lsls	r3, r3, #4
 800264e:	3332      	adds	r3, #50	; 0x32
 8002650:	4a07      	ldr	r2, [pc, #28]	; (8002670 <UART_SetConfig+0x118>)
 8002652:	fba2 2303 	umull	r2, r3, r2, r3
 8002656:	095b      	lsrs	r3, r3, #5
 8002658:	f003 020f 	and.w	r2, r3, #15
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	440a      	add	r2, r1
 8002662:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002664:	bf00      	nop
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	40013800 	.word	0x40013800
 8002670:	51eb851f 	.word	0x51eb851f

08002674 <std>:
 8002674:	2300      	movs	r3, #0
 8002676:	b510      	push	{r4, lr}
 8002678:	4604      	mov	r4, r0
 800267a:	e9c0 3300 	strd	r3, r3, [r0]
 800267e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002682:	6083      	str	r3, [r0, #8]
 8002684:	8181      	strh	r1, [r0, #12]
 8002686:	6643      	str	r3, [r0, #100]	; 0x64
 8002688:	81c2      	strh	r2, [r0, #14]
 800268a:	6183      	str	r3, [r0, #24]
 800268c:	4619      	mov	r1, r3
 800268e:	2208      	movs	r2, #8
 8002690:	305c      	adds	r0, #92	; 0x5c
 8002692:	f000 f914 	bl	80028be <memset>
 8002696:	4b05      	ldr	r3, [pc, #20]	; (80026ac <std+0x38>)
 8002698:	6224      	str	r4, [r4, #32]
 800269a:	6263      	str	r3, [r4, #36]	; 0x24
 800269c:	4b04      	ldr	r3, [pc, #16]	; (80026b0 <std+0x3c>)
 800269e:	62a3      	str	r3, [r4, #40]	; 0x28
 80026a0:	4b04      	ldr	r3, [pc, #16]	; (80026b4 <std+0x40>)
 80026a2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80026a4:	4b04      	ldr	r3, [pc, #16]	; (80026b8 <std+0x44>)
 80026a6:	6323      	str	r3, [r4, #48]	; 0x30
 80026a8:	bd10      	pop	{r4, pc}
 80026aa:	bf00      	nop
 80026ac:	08002839 	.word	0x08002839
 80026b0:	0800285b 	.word	0x0800285b
 80026b4:	08002893 	.word	0x08002893
 80026b8:	080028b7 	.word	0x080028b7

080026bc <stdio_exit_handler>:
 80026bc:	4a02      	ldr	r2, [pc, #8]	; (80026c8 <stdio_exit_handler+0xc>)
 80026be:	4903      	ldr	r1, [pc, #12]	; (80026cc <stdio_exit_handler+0x10>)
 80026c0:	4803      	ldr	r0, [pc, #12]	; (80026d0 <stdio_exit_handler+0x14>)
 80026c2:	f000 b869 	b.w	8002798 <_fwalk_sglue>
 80026c6:	bf00      	nop
 80026c8:	2000000c 	.word	0x2000000c
 80026cc:	080034fd 	.word	0x080034fd
 80026d0:	20000018 	.word	0x20000018

080026d4 <cleanup_stdio>:
 80026d4:	6841      	ldr	r1, [r0, #4]
 80026d6:	4b0c      	ldr	r3, [pc, #48]	; (8002708 <cleanup_stdio+0x34>)
 80026d8:	b510      	push	{r4, lr}
 80026da:	4299      	cmp	r1, r3
 80026dc:	4604      	mov	r4, r0
 80026de:	d001      	beq.n	80026e4 <cleanup_stdio+0x10>
 80026e0:	f000 ff0c 	bl	80034fc <_fflush_r>
 80026e4:	68a1      	ldr	r1, [r4, #8]
 80026e6:	4b09      	ldr	r3, [pc, #36]	; (800270c <cleanup_stdio+0x38>)
 80026e8:	4299      	cmp	r1, r3
 80026ea:	d002      	beq.n	80026f2 <cleanup_stdio+0x1e>
 80026ec:	4620      	mov	r0, r4
 80026ee:	f000 ff05 	bl	80034fc <_fflush_r>
 80026f2:	68e1      	ldr	r1, [r4, #12]
 80026f4:	4b06      	ldr	r3, [pc, #24]	; (8002710 <cleanup_stdio+0x3c>)
 80026f6:	4299      	cmp	r1, r3
 80026f8:	d004      	beq.n	8002704 <cleanup_stdio+0x30>
 80026fa:	4620      	mov	r0, r4
 80026fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002700:	f000 befc 	b.w	80034fc <_fflush_r>
 8002704:	bd10      	pop	{r4, pc}
 8002706:	bf00      	nop
 8002708:	2000011c 	.word	0x2000011c
 800270c:	20000184 	.word	0x20000184
 8002710:	200001ec 	.word	0x200001ec

08002714 <global_stdio_init.part.0>:
 8002714:	b510      	push	{r4, lr}
 8002716:	4b0b      	ldr	r3, [pc, #44]	; (8002744 <global_stdio_init.part.0+0x30>)
 8002718:	4c0b      	ldr	r4, [pc, #44]	; (8002748 <global_stdio_init.part.0+0x34>)
 800271a:	4a0c      	ldr	r2, [pc, #48]	; (800274c <global_stdio_init.part.0+0x38>)
 800271c:	4620      	mov	r0, r4
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	2104      	movs	r1, #4
 8002722:	2200      	movs	r2, #0
 8002724:	f7ff ffa6 	bl	8002674 <std>
 8002728:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800272c:	2201      	movs	r2, #1
 800272e:	2109      	movs	r1, #9
 8002730:	f7ff ffa0 	bl	8002674 <std>
 8002734:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002738:	2202      	movs	r2, #2
 800273a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800273e:	2112      	movs	r1, #18
 8002740:	f7ff bf98 	b.w	8002674 <std>
 8002744:	20000254 	.word	0x20000254
 8002748:	2000011c 	.word	0x2000011c
 800274c:	080026bd 	.word	0x080026bd

08002750 <__sfp_lock_acquire>:
 8002750:	4801      	ldr	r0, [pc, #4]	; (8002758 <__sfp_lock_acquire+0x8>)
 8002752:	f000 b92d 	b.w	80029b0 <__retarget_lock_acquire_recursive>
 8002756:	bf00      	nop
 8002758:	2000025d 	.word	0x2000025d

0800275c <__sfp_lock_release>:
 800275c:	4801      	ldr	r0, [pc, #4]	; (8002764 <__sfp_lock_release+0x8>)
 800275e:	f000 b928 	b.w	80029b2 <__retarget_lock_release_recursive>
 8002762:	bf00      	nop
 8002764:	2000025d 	.word	0x2000025d

08002768 <__sinit>:
 8002768:	b510      	push	{r4, lr}
 800276a:	4604      	mov	r4, r0
 800276c:	f7ff fff0 	bl	8002750 <__sfp_lock_acquire>
 8002770:	6a23      	ldr	r3, [r4, #32]
 8002772:	b11b      	cbz	r3, 800277c <__sinit+0x14>
 8002774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002778:	f7ff bff0 	b.w	800275c <__sfp_lock_release>
 800277c:	4b04      	ldr	r3, [pc, #16]	; (8002790 <__sinit+0x28>)
 800277e:	6223      	str	r3, [r4, #32]
 8002780:	4b04      	ldr	r3, [pc, #16]	; (8002794 <__sinit+0x2c>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d1f5      	bne.n	8002774 <__sinit+0xc>
 8002788:	f7ff ffc4 	bl	8002714 <global_stdio_init.part.0>
 800278c:	e7f2      	b.n	8002774 <__sinit+0xc>
 800278e:	bf00      	nop
 8002790:	080026d5 	.word	0x080026d5
 8002794:	20000254 	.word	0x20000254

08002798 <_fwalk_sglue>:
 8002798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800279c:	4607      	mov	r7, r0
 800279e:	4688      	mov	r8, r1
 80027a0:	4614      	mov	r4, r2
 80027a2:	2600      	movs	r6, #0
 80027a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80027a8:	f1b9 0901 	subs.w	r9, r9, #1
 80027ac:	d505      	bpl.n	80027ba <_fwalk_sglue+0x22>
 80027ae:	6824      	ldr	r4, [r4, #0]
 80027b0:	2c00      	cmp	r4, #0
 80027b2:	d1f7      	bne.n	80027a4 <_fwalk_sglue+0xc>
 80027b4:	4630      	mov	r0, r6
 80027b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80027ba:	89ab      	ldrh	r3, [r5, #12]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d907      	bls.n	80027d0 <_fwalk_sglue+0x38>
 80027c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80027c4:	3301      	adds	r3, #1
 80027c6:	d003      	beq.n	80027d0 <_fwalk_sglue+0x38>
 80027c8:	4629      	mov	r1, r5
 80027ca:	4638      	mov	r0, r7
 80027cc:	47c0      	blx	r8
 80027ce:	4306      	orrs	r6, r0
 80027d0:	3568      	adds	r5, #104	; 0x68
 80027d2:	e7e9      	b.n	80027a8 <_fwalk_sglue+0x10>

080027d4 <iprintf>:
 80027d4:	b40f      	push	{r0, r1, r2, r3}
 80027d6:	b507      	push	{r0, r1, r2, lr}
 80027d8:	4906      	ldr	r1, [pc, #24]	; (80027f4 <iprintf+0x20>)
 80027da:	ab04      	add	r3, sp, #16
 80027dc:	6808      	ldr	r0, [r1, #0]
 80027de:	f853 2b04 	ldr.w	r2, [r3], #4
 80027e2:	6881      	ldr	r1, [r0, #8]
 80027e4:	9301      	str	r3, [sp, #4]
 80027e6:	f000 fb59 	bl	8002e9c <_vfiprintf_r>
 80027ea:	b003      	add	sp, #12
 80027ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80027f0:	b004      	add	sp, #16
 80027f2:	4770      	bx	lr
 80027f4:	20000064 	.word	0x20000064

080027f8 <siprintf>:
 80027f8:	b40e      	push	{r1, r2, r3}
 80027fa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80027fe:	b500      	push	{lr}
 8002800:	b09c      	sub	sp, #112	; 0x70
 8002802:	ab1d      	add	r3, sp, #116	; 0x74
 8002804:	9002      	str	r0, [sp, #8]
 8002806:	9006      	str	r0, [sp, #24]
 8002808:	9107      	str	r1, [sp, #28]
 800280a:	9104      	str	r1, [sp, #16]
 800280c:	4808      	ldr	r0, [pc, #32]	; (8002830 <siprintf+0x38>)
 800280e:	4909      	ldr	r1, [pc, #36]	; (8002834 <siprintf+0x3c>)
 8002810:	f853 2b04 	ldr.w	r2, [r3], #4
 8002814:	9105      	str	r1, [sp, #20]
 8002816:	6800      	ldr	r0, [r0, #0]
 8002818:	a902      	add	r1, sp, #8
 800281a:	9301      	str	r3, [sp, #4]
 800281c:	f000 fa18 	bl	8002c50 <_svfiprintf_r>
 8002820:	2200      	movs	r2, #0
 8002822:	9b02      	ldr	r3, [sp, #8]
 8002824:	701a      	strb	r2, [r3, #0]
 8002826:	b01c      	add	sp, #112	; 0x70
 8002828:	f85d eb04 	ldr.w	lr, [sp], #4
 800282c:	b003      	add	sp, #12
 800282e:	4770      	bx	lr
 8002830:	20000064 	.word	0x20000064
 8002834:	ffff0208 	.word	0xffff0208

08002838 <__sread>:
 8002838:	b510      	push	{r4, lr}
 800283a:	460c      	mov	r4, r1
 800283c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002840:	f000 f868 	bl	8002914 <_read_r>
 8002844:	2800      	cmp	r0, #0
 8002846:	bfab      	itete	ge
 8002848:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800284a:	89a3      	ldrhlt	r3, [r4, #12]
 800284c:	181b      	addge	r3, r3, r0
 800284e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002852:	bfac      	ite	ge
 8002854:	6563      	strge	r3, [r4, #84]	; 0x54
 8002856:	81a3      	strhlt	r3, [r4, #12]
 8002858:	bd10      	pop	{r4, pc}

0800285a <__swrite>:
 800285a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800285e:	461f      	mov	r7, r3
 8002860:	898b      	ldrh	r3, [r1, #12]
 8002862:	4605      	mov	r5, r0
 8002864:	05db      	lsls	r3, r3, #23
 8002866:	460c      	mov	r4, r1
 8002868:	4616      	mov	r6, r2
 800286a:	d505      	bpl.n	8002878 <__swrite+0x1e>
 800286c:	2302      	movs	r3, #2
 800286e:	2200      	movs	r2, #0
 8002870:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002874:	f000 f83c 	bl	80028f0 <_lseek_r>
 8002878:	89a3      	ldrh	r3, [r4, #12]
 800287a:	4632      	mov	r2, r6
 800287c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002880:	81a3      	strh	r3, [r4, #12]
 8002882:	4628      	mov	r0, r5
 8002884:	463b      	mov	r3, r7
 8002886:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800288a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800288e:	f000 b853 	b.w	8002938 <_write_r>

08002892 <__sseek>:
 8002892:	b510      	push	{r4, lr}
 8002894:	460c      	mov	r4, r1
 8002896:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800289a:	f000 f829 	bl	80028f0 <_lseek_r>
 800289e:	1c43      	adds	r3, r0, #1
 80028a0:	89a3      	ldrh	r3, [r4, #12]
 80028a2:	bf15      	itete	ne
 80028a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80028a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80028aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80028ae:	81a3      	strheq	r3, [r4, #12]
 80028b0:	bf18      	it	ne
 80028b2:	81a3      	strhne	r3, [r4, #12]
 80028b4:	bd10      	pop	{r4, pc}

080028b6 <__sclose>:
 80028b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028ba:	f000 b809 	b.w	80028d0 <_close_r>

080028be <memset>:
 80028be:	4603      	mov	r3, r0
 80028c0:	4402      	add	r2, r0
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d100      	bne.n	80028c8 <memset+0xa>
 80028c6:	4770      	bx	lr
 80028c8:	f803 1b01 	strb.w	r1, [r3], #1
 80028cc:	e7f9      	b.n	80028c2 <memset+0x4>
	...

080028d0 <_close_r>:
 80028d0:	b538      	push	{r3, r4, r5, lr}
 80028d2:	2300      	movs	r3, #0
 80028d4:	4d05      	ldr	r5, [pc, #20]	; (80028ec <_close_r+0x1c>)
 80028d6:	4604      	mov	r4, r0
 80028d8:	4608      	mov	r0, r1
 80028da:	602b      	str	r3, [r5, #0]
 80028dc:	f7fd ff2a 	bl	8000734 <_close>
 80028e0:	1c43      	adds	r3, r0, #1
 80028e2:	d102      	bne.n	80028ea <_close_r+0x1a>
 80028e4:	682b      	ldr	r3, [r5, #0]
 80028e6:	b103      	cbz	r3, 80028ea <_close_r+0x1a>
 80028e8:	6023      	str	r3, [r4, #0]
 80028ea:	bd38      	pop	{r3, r4, r5, pc}
 80028ec:	20000258 	.word	0x20000258

080028f0 <_lseek_r>:
 80028f0:	b538      	push	{r3, r4, r5, lr}
 80028f2:	4604      	mov	r4, r0
 80028f4:	4608      	mov	r0, r1
 80028f6:	4611      	mov	r1, r2
 80028f8:	2200      	movs	r2, #0
 80028fa:	4d05      	ldr	r5, [pc, #20]	; (8002910 <_lseek_r+0x20>)
 80028fc:	602a      	str	r2, [r5, #0]
 80028fe:	461a      	mov	r2, r3
 8002900:	f7fd ff3c 	bl	800077c <_lseek>
 8002904:	1c43      	adds	r3, r0, #1
 8002906:	d102      	bne.n	800290e <_lseek_r+0x1e>
 8002908:	682b      	ldr	r3, [r5, #0]
 800290a:	b103      	cbz	r3, 800290e <_lseek_r+0x1e>
 800290c:	6023      	str	r3, [r4, #0]
 800290e:	bd38      	pop	{r3, r4, r5, pc}
 8002910:	20000258 	.word	0x20000258

08002914 <_read_r>:
 8002914:	b538      	push	{r3, r4, r5, lr}
 8002916:	4604      	mov	r4, r0
 8002918:	4608      	mov	r0, r1
 800291a:	4611      	mov	r1, r2
 800291c:	2200      	movs	r2, #0
 800291e:	4d05      	ldr	r5, [pc, #20]	; (8002934 <_read_r+0x20>)
 8002920:	602a      	str	r2, [r5, #0]
 8002922:	461a      	mov	r2, r3
 8002924:	f7fd fee9 	bl	80006fa <_read>
 8002928:	1c43      	adds	r3, r0, #1
 800292a:	d102      	bne.n	8002932 <_read_r+0x1e>
 800292c:	682b      	ldr	r3, [r5, #0]
 800292e:	b103      	cbz	r3, 8002932 <_read_r+0x1e>
 8002930:	6023      	str	r3, [r4, #0]
 8002932:	bd38      	pop	{r3, r4, r5, pc}
 8002934:	20000258 	.word	0x20000258

08002938 <_write_r>:
 8002938:	b538      	push	{r3, r4, r5, lr}
 800293a:	4604      	mov	r4, r0
 800293c:	4608      	mov	r0, r1
 800293e:	4611      	mov	r1, r2
 8002940:	2200      	movs	r2, #0
 8002942:	4d05      	ldr	r5, [pc, #20]	; (8002958 <_write_r+0x20>)
 8002944:	602a      	str	r2, [r5, #0]
 8002946:	461a      	mov	r2, r3
 8002948:	f7fd fda6 	bl	8000498 <_write>
 800294c:	1c43      	adds	r3, r0, #1
 800294e:	d102      	bne.n	8002956 <_write_r+0x1e>
 8002950:	682b      	ldr	r3, [r5, #0]
 8002952:	b103      	cbz	r3, 8002956 <_write_r+0x1e>
 8002954:	6023      	str	r3, [r4, #0]
 8002956:	bd38      	pop	{r3, r4, r5, pc}
 8002958:	20000258 	.word	0x20000258

0800295c <__errno>:
 800295c:	4b01      	ldr	r3, [pc, #4]	; (8002964 <__errno+0x8>)
 800295e:	6818      	ldr	r0, [r3, #0]
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	20000064 	.word	0x20000064

08002968 <__libc_init_array>:
 8002968:	b570      	push	{r4, r5, r6, lr}
 800296a:	2600      	movs	r6, #0
 800296c:	4d0c      	ldr	r5, [pc, #48]	; (80029a0 <__libc_init_array+0x38>)
 800296e:	4c0d      	ldr	r4, [pc, #52]	; (80029a4 <__libc_init_array+0x3c>)
 8002970:	1b64      	subs	r4, r4, r5
 8002972:	10a4      	asrs	r4, r4, #2
 8002974:	42a6      	cmp	r6, r4
 8002976:	d109      	bne.n	800298c <__libc_init_array+0x24>
 8002978:	f000 ff7e 	bl	8003878 <_init>
 800297c:	2600      	movs	r6, #0
 800297e:	4d0a      	ldr	r5, [pc, #40]	; (80029a8 <__libc_init_array+0x40>)
 8002980:	4c0a      	ldr	r4, [pc, #40]	; (80029ac <__libc_init_array+0x44>)
 8002982:	1b64      	subs	r4, r4, r5
 8002984:	10a4      	asrs	r4, r4, #2
 8002986:	42a6      	cmp	r6, r4
 8002988:	d105      	bne.n	8002996 <__libc_init_array+0x2e>
 800298a:	bd70      	pop	{r4, r5, r6, pc}
 800298c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002990:	4798      	blx	r3
 8002992:	3601      	adds	r6, #1
 8002994:	e7ee      	b.n	8002974 <__libc_init_array+0xc>
 8002996:	f855 3b04 	ldr.w	r3, [r5], #4
 800299a:	4798      	blx	r3
 800299c:	3601      	adds	r6, #1
 800299e:	e7f2      	b.n	8002986 <__libc_init_array+0x1e>
 80029a0:	0800392c 	.word	0x0800392c
 80029a4:	0800392c 	.word	0x0800392c
 80029a8:	0800392c 	.word	0x0800392c
 80029ac:	08003930 	.word	0x08003930

080029b0 <__retarget_lock_acquire_recursive>:
 80029b0:	4770      	bx	lr

080029b2 <__retarget_lock_release_recursive>:
 80029b2:	4770      	bx	lr

080029b4 <_free_r>:
 80029b4:	b538      	push	{r3, r4, r5, lr}
 80029b6:	4605      	mov	r5, r0
 80029b8:	2900      	cmp	r1, #0
 80029ba:	d040      	beq.n	8002a3e <_free_r+0x8a>
 80029bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80029c0:	1f0c      	subs	r4, r1, #4
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	bfb8      	it	lt
 80029c6:	18e4      	addlt	r4, r4, r3
 80029c8:	f000 f8dc 	bl	8002b84 <__malloc_lock>
 80029cc:	4a1c      	ldr	r2, [pc, #112]	; (8002a40 <_free_r+0x8c>)
 80029ce:	6813      	ldr	r3, [r2, #0]
 80029d0:	b933      	cbnz	r3, 80029e0 <_free_r+0x2c>
 80029d2:	6063      	str	r3, [r4, #4]
 80029d4:	6014      	str	r4, [r2, #0]
 80029d6:	4628      	mov	r0, r5
 80029d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80029dc:	f000 b8d8 	b.w	8002b90 <__malloc_unlock>
 80029e0:	42a3      	cmp	r3, r4
 80029e2:	d908      	bls.n	80029f6 <_free_r+0x42>
 80029e4:	6820      	ldr	r0, [r4, #0]
 80029e6:	1821      	adds	r1, r4, r0
 80029e8:	428b      	cmp	r3, r1
 80029ea:	bf01      	itttt	eq
 80029ec:	6819      	ldreq	r1, [r3, #0]
 80029ee:	685b      	ldreq	r3, [r3, #4]
 80029f0:	1809      	addeq	r1, r1, r0
 80029f2:	6021      	streq	r1, [r4, #0]
 80029f4:	e7ed      	b.n	80029d2 <_free_r+0x1e>
 80029f6:	461a      	mov	r2, r3
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	b10b      	cbz	r3, 8002a00 <_free_r+0x4c>
 80029fc:	42a3      	cmp	r3, r4
 80029fe:	d9fa      	bls.n	80029f6 <_free_r+0x42>
 8002a00:	6811      	ldr	r1, [r2, #0]
 8002a02:	1850      	adds	r0, r2, r1
 8002a04:	42a0      	cmp	r0, r4
 8002a06:	d10b      	bne.n	8002a20 <_free_r+0x6c>
 8002a08:	6820      	ldr	r0, [r4, #0]
 8002a0a:	4401      	add	r1, r0
 8002a0c:	1850      	adds	r0, r2, r1
 8002a0e:	4283      	cmp	r3, r0
 8002a10:	6011      	str	r1, [r2, #0]
 8002a12:	d1e0      	bne.n	80029d6 <_free_r+0x22>
 8002a14:	6818      	ldr	r0, [r3, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	4408      	add	r0, r1
 8002a1a:	6010      	str	r0, [r2, #0]
 8002a1c:	6053      	str	r3, [r2, #4]
 8002a1e:	e7da      	b.n	80029d6 <_free_r+0x22>
 8002a20:	d902      	bls.n	8002a28 <_free_r+0x74>
 8002a22:	230c      	movs	r3, #12
 8002a24:	602b      	str	r3, [r5, #0]
 8002a26:	e7d6      	b.n	80029d6 <_free_r+0x22>
 8002a28:	6820      	ldr	r0, [r4, #0]
 8002a2a:	1821      	adds	r1, r4, r0
 8002a2c:	428b      	cmp	r3, r1
 8002a2e:	bf01      	itttt	eq
 8002a30:	6819      	ldreq	r1, [r3, #0]
 8002a32:	685b      	ldreq	r3, [r3, #4]
 8002a34:	1809      	addeq	r1, r1, r0
 8002a36:	6021      	streq	r1, [r4, #0]
 8002a38:	6063      	str	r3, [r4, #4]
 8002a3a:	6054      	str	r4, [r2, #4]
 8002a3c:	e7cb      	b.n	80029d6 <_free_r+0x22>
 8002a3e:	bd38      	pop	{r3, r4, r5, pc}
 8002a40:	20000260 	.word	0x20000260

08002a44 <sbrk_aligned>:
 8002a44:	b570      	push	{r4, r5, r6, lr}
 8002a46:	4e0e      	ldr	r6, [pc, #56]	; (8002a80 <sbrk_aligned+0x3c>)
 8002a48:	460c      	mov	r4, r1
 8002a4a:	6831      	ldr	r1, [r6, #0]
 8002a4c:	4605      	mov	r5, r0
 8002a4e:	b911      	cbnz	r1, 8002a56 <sbrk_aligned+0x12>
 8002a50:	f000 fe2c 	bl	80036ac <_sbrk_r>
 8002a54:	6030      	str	r0, [r6, #0]
 8002a56:	4621      	mov	r1, r4
 8002a58:	4628      	mov	r0, r5
 8002a5a:	f000 fe27 	bl	80036ac <_sbrk_r>
 8002a5e:	1c43      	adds	r3, r0, #1
 8002a60:	d00a      	beq.n	8002a78 <sbrk_aligned+0x34>
 8002a62:	1cc4      	adds	r4, r0, #3
 8002a64:	f024 0403 	bic.w	r4, r4, #3
 8002a68:	42a0      	cmp	r0, r4
 8002a6a:	d007      	beq.n	8002a7c <sbrk_aligned+0x38>
 8002a6c:	1a21      	subs	r1, r4, r0
 8002a6e:	4628      	mov	r0, r5
 8002a70:	f000 fe1c 	bl	80036ac <_sbrk_r>
 8002a74:	3001      	adds	r0, #1
 8002a76:	d101      	bne.n	8002a7c <sbrk_aligned+0x38>
 8002a78:	f04f 34ff 	mov.w	r4, #4294967295
 8002a7c:	4620      	mov	r0, r4
 8002a7e:	bd70      	pop	{r4, r5, r6, pc}
 8002a80:	20000264 	.word	0x20000264

08002a84 <_malloc_r>:
 8002a84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a88:	1ccd      	adds	r5, r1, #3
 8002a8a:	f025 0503 	bic.w	r5, r5, #3
 8002a8e:	3508      	adds	r5, #8
 8002a90:	2d0c      	cmp	r5, #12
 8002a92:	bf38      	it	cc
 8002a94:	250c      	movcc	r5, #12
 8002a96:	2d00      	cmp	r5, #0
 8002a98:	4607      	mov	r7, r0
 8002a9a:	db01      	blt.n	8002aa0 <_malloc_r+0x1c>
 8002a9c:	42a9      	cmp	r1, r5
 8002a9e:	d905      	bls.n	8002aac <_malloc_r+0x28>
 8002aa0:	230c      	movs	r3, #12
 8002aa2:	2600      	movs	r6, #0
 8002aa4:	603b      	str	r3, [r7, #0]
 8002aa6:	4630      	mov	r0, r6
 8002aa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002aac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002b80 <_malloc_r+0xfc>
 8002ab0:	f000 f868 	bl	8002b84 <__malloc_lock>
 8002ab4:	f8d8 3000 	ldr.w	r3, [r8]
 8002ab8:	461c      	mov	r4, r3
 8002aba:	bb5c      	cbnz	r4, 8002b14 <_malloc_r+0x90>
 8002abc:	4629      	mov	r1, r5
 8002abe:	4638      	mov	r0, r7
 8002ac0:	f7ff ffc0 	bl	8002a44 <sbrk_aligned>
 8002ac4:	1c43      	adds	r3, r0, #1
 8002ac6:	4604      	mov	r4, r0
 8002ac8:	d155      	bne.n	8002b76 <_malloc_r+0xf2>
 8002aca:	f8d8 4000 	ldr.w	r4, [r8]
 8002ace:	4626      	mov	r6, r4
 8002ad0:	2e00      	cmp	r6, #0
 8002ad2:	d145      	bne.n	8002b60 <_malloc_r+0xdc>
 8002ad4:	2c00      	cmp	r4, #0
 8002ad6:	d048      	beq.n	8002b6a <_malloc_r+0xe6>
 8002ad8:	6823      	ldr	r3, [r4, #0]
 8002ada:	4631      	mov	r1, r6
 8002adc:	4638      	mov	r0, r7
 8002ade:	eb04 0903 	add.w	r9, r4, r3
 8002ae2:	f000 fde3 	bl	80036ac <_sbrk_r>
 8002ae6:	4581      	cmp	r9, r0
 8002ae8:	d13f      	bne.n	8002b6a <_malloc_r+0xe6>
 8002aea:	6821      	ldr	r1, [r4, #0]
 8002aec:	4638      	mov	r0, r7
 8002aee:	1a6d      	subs	r5, r5, r1
 8002af0:	4629      	mov	r1, r5
 8002af2:	f7ff ffa7 	bl	8002a44 <sbrk_aligned>
 8002af6:	3001      	adds	r0, #1
 8002af8:	d037      	beq.n	8002b6a <_malloc_r+0xe6>
 8002afa:	6823      	ldr	r3, [r4, #0]
 8002afc:	442b      	add	r3, r5
 8002afe:	6023      	str	r3, [r4, #0]
 8002b00:	f8d8 3000 	ldr.w	r3, [r8]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d038      	beq.n	8002b7a <_malloc_r+0xf6>
 8002b08:	685a      	ldr	r2, [r3, #4]
 8002b0a:	42a2      	cmp	r2, r4
 8002b0c:	d12b      	bne.n	8002b66 <_malloc_r+0xe2>
 8002b0e:	2200      	movs	r2, #0
 8002b10:	605a      	str	r2, [r3, #4]
 8002b12:	e00f      	b.n	8002b34 <_malloc_r+0xb0>
 8002b14:	6822      	ldr	r2, [r4, #0]
 8002b16:	1b52      	subs	r2, r2, r5
 8002b18:	d41f      	bmi.n	8002b5a <_malloc_r+0xd6>
 8002b1a:	2a0b      	cmp	r2, #11
 8002b1c:	d917      	bls.n	8002b4e <_malloc_r+0xca>
 8002b1e:	1961      	adds	r1, r4, r5
 8002b20:	42a3      	cmp	r3, r4
 8002b22:	6025      	str	r5, [r4, #0]
 8002b24:	bf18      	it	ne
 8002b26:	6059      	strne	r1, [r3, #4]
 8002b28:	6863      	ldr	r3, [r4, #4]
 8002b2a:	bf08      	it	eq
 8002b2c:	f8c8 1000 	streq.w	r1, [r8]
 8002b30:	5162      	str	r2, [r4, r5]
 8002b32:	604b      	str	r3, [r1, #4]
 8002b34:	4638      	mov	r0, r7
 8002b36:	f104 060b 	add.w	r6, r4, #11
 8002b3a:	f000 f829 	bl	8002b90 <__malloc_unlock>
 8002b3e:	f026 0607 	bic.w	r6, r6, #7
 8002b42:	1d23      	adds	r3, r4, #4
 8002b44:	1af2      	subs	r2, r6, r3
 8002b46:	d0ae      	beq.n	8002aa6 <_malloc_r+0x22>
 8002b48:	1b9b      	subs	r3, r3, r6
 8002b4a:	50a3      	str	r3, [r4, r2]
 8002b4c:	e7ab      	b.n	8002aa6 <_malloc_r+0x22>
 8002b4e:	42a3      	cmp	r3, r4
 8002b50:	6862      	ldr	r2, [r4, #4]
 8002b52:	d1dd      	bne.n	8002b10 <_malloc_r+0x8c>
 8002b54:	f8c8 2000 	str.w	r2, [r8]
 8002b58:	e7ec      	b.n	8002b34 <_malloc_r+0xb0>
 8002b5a:	4623      	mov	r3, r4
 8002b5c:	6864      	ldr	r4, [r4, #4]
 8002b5e:	e7ac      	b.n	8002aba <_malloc_r+0x36>
 8002b60:	4634      	mov	r4, r6
 8002b62:	6876      	ldr	r6, [r6, #4]
 8002b64:	e7b4      	b.n	8002ad0 <_malloc_r+0x4c>
 8002b66:	4613      	mov	r3, r2
 8002b68:	e7cc      	b.n	8002b04 <_malloc_r+0x80>
 8002b6a:	230c      	movs	r3, #12
 8002b6c:	4638      	mov	r0, r7
 8002b6e:	603b      	str	r3, [r7, #0]
 8002b70:	f000 f80e 	bl	8002b90 <__malloc_unlock>
 8002b74:	e797      	b.n	8002aa6 <_malloc_r+0x22>
 8002b76:	6025      	str	r5, [r4, #0]
 8002b78:	e7dc      	b.n	8002b34 <_malloc_r+0xb0>
 8002b7a:	605b      	str	r3, [r3, #4]
 8002b7c:	deff      	udf	#255	; 0xff
 8002b7e:	bf00      	nop
 8002b80:	20000260 	.word	0x20000260

08002b84 <__malloc_lock>:
 8002b84:	4801      	ldr	r0, [pc, #4]	; (8002b8c <__malloc_lock+0x8>)
 8002b86:	f7ff bf13 	b.w	80029b0 <__retarget_lock_acquire_recursive>
 8002b8a:	bf00      	nop
 8002b8c:	2000025c 	.word	0x2000025c

08002b90 <__malloc_unlock>:
 8002b90:	4801      	ldr	r0, [pc, #4]	; (8002b98 <__malloc_unlock+0x8>)
 8002b92:	f7ff bf0e 	b.w	80029b2 <__retarget_lock_release_recursive>
 8002b96:	bf00      	nop
 8002b98:	2000025c 	.word	0x2000025c

08002b9c <__ssputs_r>:
 8002b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ba0:	461f      	mov	r7, r3
 8002ba2:	688e      	ldr	r6, [r1, #8]
 8002ba4:	4682      	mov	sl, r0
 8002ba6:	42be      	cmp	r6, r7
 8002ba8:	460c      	mov	r4, r1
 8002baa:	4690      	mov	r8, r2
 8002bac:	680b      	ldr	r3, [r1, #0]
 8002bae:	d82c      	bhi.n	8002c0a <__ssputs_r+0x6e>
 8002bb0:	898a      	ldrh	r2, [r1, #12]
 8002bb2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002bb6:	d026      	beq.n	8002c06 <__ssputs_r+0x6a>
 8002bb8:	6965      	ldr	r5, [r4, #20]
 8002bba:	6909      	ldr	r1, [r1, #16]
 8002bbc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002bc0:	eba3 0901 	sub.w	r9, r3, r1
 8002bc4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002bc8:	1c7b      	adds	r3, r7, #1
 8002bca:	444b      	add	r3, r9
 8002bcc:	106d      	asrs	r5, r5, #1
 8002bce:	429d      	cmp	r5, r3
 8002bd0:	bf38      	it	cc
 8002bd2:	461d      	movcc	r5, r3
 8002bd4:	0553      	lsls	r3, r2, #21
 8002bd6:	d527      	bpl.n	8002c28 <__ssputs_r+0x8c>
 8002bd8:	4629      	mov	r1, r5
 8002bda:	f7ff ff53 	bl	8002a84 <_malloc_r>
 8002bde:	4606      	mov	r6, r0
 8002be0:	b360      	cbz	r0, 8002c3c <__ssputs_r+0xa0>
 8002be2:	464a      	mov	r2, r9
 8002be4:	6921      	ldr	r1, [r4, #16]
 8002be6:	f000 fd7f 	bl	80036e8 <memcpy>
 8002bea:	89a3      	ldrh	r3, [r4, #12]
 8002bec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002bf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bf4:	81a3      	strh	r3, [r4, #12]
 8002bf6:	6126      	str	r6, [r4, #16]
 8002bf8:	444e      	add	r6, r9
 8002bfa:	6026      	str	r6, [r4, #0]
 8002bfc:	463e      	mov	r6, r7
 8002bfe:	6165      	str	r5, [r4, #20]
 8002c00:	eba5 0509 	sub.w	r5, r5, r9
 8002c04:	60a5      	str	r5, [r4, #8]
 8002c06:	42be      	cmp	r6, r7
 8002c08:	d900      	bls.n	8002c0c <__ssputs_r+0x70>
 8002c0a:	463e      	mov	r6, r7
 8002c0c:	4632      	mov	r2, r6
 8002c0e:	4641      	mov	r1, r8
 8002c10:	6820      	ldr	r0, [r4, #0]
 8002c12:	f000 fd31 	bl	8003678 <memmove>
 8002c16:	2000      	movs	r0, #0
 8002c18:	68a3      	ldr	r3, [r4, #8]
 8002c1a:	1b9b      	subs	r3, r3, r6
 8002c1c:	60a3      	str	r3, [r4, #8]
 8002c1e:	6823      	ldr	r3, [r4, #0]
 8002c20:	4433      	add	r3, r6
 8002c22:	6023      	str	r3, [r4, #0]
 8002c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c28:	462a      	mov	r2, r5
 8002c2a:	f000 fd6b 	bl	8003704 <_realloc_r>
 8002c2e:	4606      	mov	r6, r0
 8002c30:	2800      	cmp	r0, #0
 8002c32:	d1e0      	bne.n	8002bf6 <__ssputs_r+0x5a>
 8002c34:	4650      	mov	r0, sl
 8002c36:	6921      	ldr	r1, [r4, #16]
 8002c38:	f7ff febc 	bl	80029b4 <_free_r>
 8002c3c:	230c      	movs	r3, #12
 8002c3e:	f8ca 3000 	str.w	r3, [sl]
 8002c42:	89a3      	ldrh	r3, [r4, #12]
 8002c44:	f04f 30ff 	mov.w	r0, #4294967295
 8002c48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c4c:	81a3      	strh	r3, [r4, #12]
 8002c4e:	e7e9      	b.n	8002c24 <__ssputs_r+0x88>

08002c50 <_svfiprintf_r>:
 8002c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c54:	4698      	mov	r8, r3
 8002c56:	898b      	ldrh	r3, [r1, #12]
 8002c58:	4607      	mov	r7, r0
 8002c5a:	061b      	lsls	r3, r3, #24
 8002c5c:	460d      	mov	r5, r1
 8002c5e:	4614      	mov	r4, r2
 8002c60:	b09d      	sub	sp, #116	; 0x74
 8002c62:	d50e      	bpl.n	8002c82 <_svfiprintf_r+0x32>
 8002c64:	690b      	ldr	r3, [r1, #16]
 8002c66:	b963      	cbnz	r3, 8002c82 <_svfiprintf_r+0x32>
 8002c68:	2140      	movs	r1, #64	; 0x40
 8002c6a:	f7ff ff0b 	bl	8002a84 <_malloc_r>
 8002c6e:	6028      	str	r0, [r5, #0]
 8002c70:	6128      	str	r0, [r5, #16]
 8002c72:	b920      	cbnz	r0, 8002c7e <_svfiprintf_r+0x2e>
 8002c74:	230c      	movs	r3, #12
 8002c76:	603b      	str	r3, [r7, #0]
 8002c78:	f04f 30ff 	mov.w	r0, #4294967295
 8002c7c:	e0d0      	b.n	8002e20 <_svfiprintf_r+0x1d0>
 8002c7e:	2340      	movs	r3, #64	; 0x40
 8002c80:	616b      	str	r3, [r5, #20]
 8002c82:	2300      	movs	r3, #0
 8002c84:	9309      	str	r3, [sp, #36]	; 0x24
 8002c86:	2320      	movs	r3, #32
 8002c88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002c8c:	2330      	movs	r3, #48	; 0x30
 8002c8e:	f04f 0901 	mov.w	r9, #1
 8002c92:	f8cd 800c 	str.w	r8, [sp, #12]
 8002c96:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8002e38 <_svfiprintf_r+0x1e8>
 8002c9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002c9e:	4623      	mov	r3, r4
 8002ca0:	469a      	mov	sl, r3
 8002ca2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002ca6:	b10a      	cbz	r2, 8002cac <_svfiprintf_r+0x5c>
 8002ca8:	2a25      	cmp	r2, #37	; 0x25
 8002caa:	d1f9      	bne.n	8002ca0 <_svfiprintf_r+0x50>
 8002cac:	ebba 0b04 	subs.w	fp, sl, r4
 8002cb0:	d00b      	beq.n	8002cca <_svfiprintf_r+0x7a>
 8002cb2:	465b      	mov	r3, fp
 8002cb4:	4622      	mov	r2, r4
 8002cb6:	4629      	mov	r1, r5
 8002cb8:	4638      	mov	r0, r7
 8002cba:	f7ff ff6f 	bl	8002b9c <__ssputs_r>
 8002cbe:	3001      	adds	r0, #1
 8002cc0:	f000 80a9 	beq.w	8002e16 <_svfiprintf_r+0x1c6>
 8002cc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002cc6:	445a      	add	r2, fp
 8002cc8:	9209      	str	r2, [sp, #36]	; 0x24
 8002cca:	f89a 3000 	ldrb.w	r3, [sl]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f000 80a1 	beq.w	8002e16 <_svfiprintf_r+0x1c6>
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	f04f 32ff 	mov.w	r2, #4294967295
 8002cda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002cde:	f10a 0a01 	add.w	sl, sl, #1
 8002ce2:	9304      	str	r3, [sp, #16]
 8002ce4:	9307      	str	r3, [sp, #28]
 8002ce6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002cea:	931a      	str	r3, [sp, #104]	; 0x68
 8002cec:	4654      	mov	r4, sl
 8002cee:	2205      	movs	r2, #5
 8002cf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002cf4:	4850      	ldr	r0, [pc, #320]	; (8002e38 <_svfiprintf_r+0x1e8>)
 8002cf6:	f000 fce9 	bl	80036cc <memchr>
 8002cfa:	9a04      	ldr	r2, [sp, #16]
 8002cfc:	b9d8      	cbnz	r0, 8002d36 <_svfiprintf_r+0xe6>
 8002cfe:	06d0      	lsls	r0, r2, #27
 8002d00:	bf44      	itt	mi
 8002d02:	2320      	movmi	r3, #32
 8002d04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d08:	0711      	lsls	r1, r2, #28
 8002d0a:	bf44      	itt	mi
 8002d0c:	232b      	movmi	r3, #43	; 0x2b
 8002d0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d12:	f89a 3000 	ldrb.w	r3, [sl]
 8002d16:	2b2a      	cmp	r3, #42	; 0x2a
 8002d18:	d015      	beq.n	8002d46 <_svfiprintf_r+0xf6>
 8002d1a:	4654      	mov	r4, sl
 8002d1c:	2000      	movs	r0, #0
 8002d1e:	f04f 0c0a 	mov.w	ip, #10
 8002d22:	9a07      	ldr	r2, [sp, #28]
 8002d24:	4621      	mov	r1, r4
 8002d26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d2a:	3b30      	subs	r3, #48	; 0x30
 8002d2c:	2b09      	cmp	r3, #9
 8002d2e:	d94d      	bls.n	8002dcc <_svfiprintf_r+0x17c>
 8002d30:	b1b0      	cbz	r0, 8002d60 <_svfiprintf_r+0x110>
 8002d32:	9207      	str	r2, [sp, #28]
 8002d34:	e014      	b.n	8002d60 <_svfiprintf_r+0x110>
 8002d36:	eba0 0308 	sub.w	r3, r0, r8
 8002d3a:	fa09 f303 	lsl.w	r3, r9, r3
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	46a2      	mov	sl, r4
 8002d42:	9304      	str	r3, [sp, #16]
 8002d44:	e7d2      	b.n	8002cec <_svfiprintf_r+0x9c>
 8002d46:	9b03      	ldr	r3, [sp, #12]
 8002d48:	1d19      	adds	r1, r3, #4
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	9103      	str	r1, [sp, #12]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	bfbb      	ittet	lt
 8002d52:	425b      	neglt	r3, r3
 8002d54:	f042 0202 	orrlt.w	r2, r2, #2
 8002d58:	9307      	strge	r3, [sp, #28]
 8002d5a:	9307      	strlt	r3, [sp, #28]
 8002d5c:	bfb8      	it	lt
 8002d5e:	9204      	strlt	r2, [sp, #16]
 8002d60:	7823      	ldrb	r3, [r4, #0]
 8002d62:	2b2e      	cmp	r3, #46	; 0x2e
 8002d64:	d10c      	bne.n	8002d80 <_svfiprintf_r+0x130>
 8002d66:	7863      	ldrb	r3, [r4, #1]
 8002d68:	2b2a      	cmp	r3, #42	; 0x2a
 8002d6a:	d134      	bne.n	8002dd6 <_svfiprintf_r+0x186>
 8002d6c:	9b03      	ldr	r3, [sp, #12]
 8002d6e:	3402      	adds	r4, #2
 8002d70:	1d1a      	adds	r2, r3, #4
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	9203      	str	r2, [sp, #12]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	bfb8      	it	lt
 8002d7a:	f04f 33ff 	movlt.w	r3, #4294967295
 8002d7e:	9305      	str	r3, [sp, #20]
 8002d80:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8002e3c <_svfiprintf_r+0x1ec>
 8002d84:	2203      	movs	r2, #3
 8002d86:	4650      	mov	r0, sl
 8002d88:	7821      	ldrb	r1, [r4, #0]
 8002d8a:	f000 fc9f 	bl	80036cc <memchr>
 8002d8e:	b138      	cbz	r0, 8002da0 <_svfiprintf_r+0x150>
 8002d90:	2240      	movs	r2, #64	; 0x40
 8002d92:	9b04      	ldr	r3, [sp, #16]
 8002d94:	eba0 000a 	sub.w	r0, r0, sl
 8002d98:	4082      	lsls	r2, r0
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	3401      	adds	r4, #1
 8002d9e:	9304      	str	r3, [sp, #16]
 8002da0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002da4:	2206      	movs	r2, #6
 8002da6:	4826      	ldr	r0, [pc, #152]	; (8002e40 <_svfiprintf_r+0x1f0>)
 8002da8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002dac:	f000 fc8e 	bl	80036cc <memchr>
 8002db0:	2800      	cmp	r0, #0
 8002db2:	d038      	beq.n	8002e26 <_svfiprintf_r+0x1d6>
 8002db4:	4b23      	ldr	r3, [pc, #140]	; (8002e44 <_svfiprintf_r+0x1f4>)
 8002db6:	bb1b      	cbnz	r3, 8002e00 <_svfiprintf_r+0x1b0>
 8002db8:	9b03      	ldr	r3, [sp, #12]
 8002dba:	3307      	adds	r3, #7
 8002dbc:	f023 0307 	bic.w	r3, r3, #7
 8002dc0:	3308      	adds	r3, #8
 8002dc2:	9303      	str	r3, [sp, #12]
 8002dc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002dc6:	4433      	add	r3, r6
 8002dc8:	9309      	str	r3, [sp, #36]	; 0x24
 8002dca:	e768      	b.n	8002c9e <_svfiprintf_r+0x4e>
 8002dcc:	460c      	mov	r4, r1
 8002dce:	2001      	movs	r0, #1
 8002dd0:	fb0c 3202 	mla	r2, ip, r2, r3
 8002dd4:	e7a6      	b.n	8002d24 <_svfiprintf_r+0xd4>
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	f04f 0c0a 	mov.w	ip, #10
 8002ddc:	4619      	mov	r1, r3
 8002dde:	3401      	adds	r4, #1
 8002de0:	9305      	str	r3, [sp, #20]
 8002de2:	4620      	mov	r0, r4
 8002de4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002de8:	3a30      	subs	r2, #48	; 0x30
 8002dea:	2a09      	cmp	r2, #9
 8002dec:	d903      	bls.n	8002df6 <_svfiprintf_r+0x1a6>
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d0c6      	beq.n	8002d80 <_svfiprintf_r+0x130>
 8002df2:	9105      	str	r1, [sp, #20]
 8002df4:	e7c4      	b.n	8002d80 <_svfiprintf_r+0x130>
 8002df6:	4604      	mov	r4, r0
 8002df8:	2301      	movs	r3, #1
 8002dfa:	fb0c 2101 	mla	r1, ip, r1, r2
 8002dfe:	e7f0      	b.n	8002de2 <_svfiprintf_r+0x192>
 8002e00:	ab03      	add	r3, sp, #12
 8002e02:	9300      	str	r3, [sp, #0]
 8002e04:	462a      	mov	r2, r5
 8002e06:	4638      	mov	r0, r7
 8002e08:	4b0f      	ldr	r3, [pc, #60]	; (8002e48 <_svfiprintf_r+0x1f8>)
 8002e0a:	a904      	add	r1, sp, #16
 8002e0c:	f3af 8000 	nop.w
 8002e10:	1c42      	adds	r2, r0, #1
 8002e12:	4606      	mov	r6, r0
 8002e14:	d1d6      	bne.n	8002dc4 <_svfiprintf_r+0x174>
 8002e16:	89ab      	ldrh	r3, [r5, #12]
 8002e18:	065b      	lsls	r3, r3, #25
 8002e1a:	f53f af2d 	bmi.w	8002c78 <_svfiprintf_r+0x28>
 8002e1e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002e20:	b01d      	add	sp, #116	; 0x74
 8002e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e26:	ab03      	add	r3, sp, #12
 8002e28:	9300      	str	r3, [sp, #0]
 8002e2a:	462a      	mov	r2, r5
 8002e2c:	4638      	mov	r0, r7
 8002e2e:	4b06      	ldr	r3, [pc, #24]	; (8002e48 <_svfiprintf_r+0x1f8>)
 8002e30:	a904      	add	r1, sp, #16
 8002e32:	f000 f9bf 	bl	80031b4 <_printf_i>
 8002e36:	e7eb      	b.n	8002e10 <_svfiprintf_r+0x1c0>
 8002e38:	080038f6 	.word	0x080038f6
 8002e3c:	080038fc 	.word	0x080038fc
 8002e40:	08003900 	.word	0x08003900
 8002e44:	00000000 	.word	0x00000000
 8002e48:	08002b9d 	.word	0x08002b9d

08002e4c <__sfputc_r>:
 8002e4c:	6893      	ldr	r3, [r2, #8]
 8002e4e:	b410      	push	{r4}
 8002e50:	3b01      	subs	r3, #1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	6093      	str	r3, [r2, #8]
 8002e56:	da07      	bge.n	8002e68 <__sfputc_r+0x1c>
 8002e58:	6994      	ldr	r4, [r2, #24]
 8002e5a:	42a3      	cmp	r3, r4
 8002e5c:	db01      	blt.n	8002e62 <__sfputc_r+0x16>
 8002e5e:	290a      	cmp	r1, #10
 8002e60:	d102      	bne.n	8002e68 <__sfputc_r+0x1c>
 8002e62:	bc10      	pop	{r4}
 8002e64:	f000 bb72 	b.w	800354c <__swbuf_r>
 8002e68:	6813      	ldr	r3, [r2, #0]
 8002e6a:	1c58      	adds	r0, r3, #1
 8002e6c:	6010      	str	r0, [r2, #0]
 8002e6e:	7019      	strb	r1, [r3, #0]
 8002e70:	4608      	mov	r0, r1
 8002e72:	bc10      	pop	{r4}
 8002e74:	4770      	bx	lr

08002e76 <__sfputs_r>:
 8002e76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e78:	4606      	mov	r6, r0
 8002e7a:	460f      	mov	r7, r1
 8002e7c:	4614      	mov	r4, r2
 8002e7e:	18d5      	adds	r5, r2, r3
 8002e80:	42ac      	cmp	r4, r5
 8002e82:	d101      	bne.n	8002e88 <__sfputs_r+0x12>
 8002e84:	2000      	movs	r0, #0
 8002e86:	e007      	b.n	8002e98 <__sfputs_r+0x22>
 8002e88:	463a      	mov	r2, r7
 8002e8a:	4630      	mov	r0, r6
 8002e8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e90:	f7ff ffdc 	bl	8002e4c <__sfputc_r>
 8002e94:	1c43      	adds	r3, r0, #1
 8002e96:	d1f3      	bne.n	8002e80 <__sfputs_r+0xa>
 8002e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002e9c <_vfiprintf_r>:
 8002e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ea0:	460d      	mov	r5, r1
 8002ea2:	4614      	mov	r4, r2
 8002ea4:	4698      	mov	r8, r3
 8002ea6:	4606      	mov	r6, r0
 8002ea8:	b09d      	sub	sp, #116	; 0x74
 8002eaa:	b118      	cbz	r0, 8002eb4 <_vfiprintf_r+0x18>
 8002eac:	6a03      	ldr	r3, [r0, #32]
 8002eae:	b90b      	cbnz	r3, 8002eb4 <_vfiprintf_r+0x18>
 8002eb0:	f7ff fc5a 	bl	8002768 <__sinit>
 8002eb4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002eb6:	07d9      	lsls	r1, r3, #31
 8002eb8:	d405      	bmi.n	8002ec6 <_vfiprintf_r+0x2a>
 8002eba:	89ab      	ldrh	r3, [r5, #12]
 8002ebc:	059a      	lsls	r2, r3, #22
 8002ebe:	d402      	bmi.n	8002ec6 <_vfiprintf_r+0x2a>
 8002ec0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002ec2:	f7ff fd75 	bl	80029b0 <__retarget_lock_acquire_recursive>
 8002ec6:	89ab      	ldrh	r3, [r5, #12]
 8002ec8:	071b      	lsls	r3, r3, #28
 8002eca:	d501      	bpl.n	8002ed0 <_vfiprintf_r+0x34>
 8002ecc:	692b      	ldr	r3, [r5, #16]
 8002ece:	b99b      	cbnz	r3, 8002ef8 <_vfiprintf_r+0x5c>
 8002ed0:	4629      	mov	r1, r5
 8002ed2:	4630      	mov	r0, r6
 8002ed4:	f000 fb78 	bl	80035c8 <__swsetup_r>
 8002ed8:	b170      	cbz	r0, 8002ef8 <_vfiprintf_r+0x5c>
 8002eda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002edc:	07dc      	lsls	r4, r3, #31
 8002ede:	d504      	bpl.n	8002eea <_vfiprintf_r+0x4e>
 8002ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ee4:	b01d      	add	sp, #116	; 0x74
 8002ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002eea:	89ab      	ldrh	r3, [r5, #12]
 8002eec:	0598      	lsls	r0, r3, #22
 8002eee:	d4f7      	bmi.n	8002ee0 <_vfiprintf_r+0x44>
 8002ef0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002ef2:	f7ff fd5e 	bl	80029b2 <__retarget_lock_release_recursive>
 8002ef6:	e7f3      	b.n	8002ee0 <_vfiprintf_r+0x44>
 8002ef8:	2300      	movs	r3, #0
 8002efa:	9309      	str	r3, [sp, #36]	; 0x24
 8002efc:	2320      	movs	r3, #32
 8002efe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002f02:	2330      	movs	r3, #48	; 0x30
 8002f04:	f04f 0901 	mov.w	r9, #1
 8002f08:	f8cd 800c 	str.w	r8, [sp, #12]
 8002f0c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80030bc <_vfiprintf_r+0x220>
 8002f10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002f14:	4623      	mov	r3, r4
 8002f16:	469a      	mov	sl, r3
 8002f18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002f1c:	b10a      	cbz	r2, 8002f22 <_vfiprintf_r+0x86>
 8002f1e:	2a25      	cmp	r2, #37	; 0x25
 8002f20:	d1f9      	bne.n	8002f16 <_vfiprintf_r+0x7a>
 8002f22:	ebba 0b04 	subs.w	fp, sl, r4
 8002f26:	d00b      	beq.n	8002f40 <_vfiprintf_r+0xa4>
 8002f28:	465b      	mov	r3, fp
 8002f2a:	4622      	mov	r2, r4
 8002f2c:	4629      	mov	r1, r5
 8002f2e:	4630      	mov	r0, r6
 8002f30:	f7ff ffa1 	bl	8002e76 <__sfputs_r>
 8002f34:	3001      	adds	r0, #1
 8002f36:	f000 80a9 	beq.w	800308c <_vfiprintf_r+0x1f0>
 8002f3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002f3c:	445a      	add	r2, fp
 8002f3e:	9209      	str	r2, [sp, #36]	; 0x24
 8002f40:	f89a 3000 	ldrb.w	r3, [sl]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	f000 80a1 	beq.w	800308c <_vfiprintf_r+0x1f0>
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f54:	f10a 0a01 	add.w	sl, sl, #1
 8002f58:	9304      	str	r3, [sp, #16]
 8002f5a:	9307      	str	r3, [sp, #28]
 8002f5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002f60:	931a      	str	r3, [sp, #104]	; 0x68
 8002f62:	4654      	mov	r4, sl
 8002f64:	2205      	movs	r2, #5
 8002f66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f6a:	4854      	ldr	r0, [pc, #336]	; (80030bc <_vfiprintf_r+0x220>)
 8002f6c:	f000 fbae 	bl	80036cc <memchr>
 8002f70:	9a04      	ldr	r2, [sp, #16]
 8002f72:	b9d8      	cbnz	r0, 8002fac <_vfiprintf_r+0x110>
 8002f74:	06d1      	lsls	r1, r2, #27
 8002f76:	bf44      	itt	mi
 8002f78:	2320      	movmi	r3, #32
 8002f7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002f7e:	0713      	lsls	r3, r2, #28
 8002f80:	bf44      	itt	mi
 8002f82:	232b      	movmi	r3, #43	; 0x2b
 8002f84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002f88:	f89a 3000 	ldrb.w	r3, [sl]
 8002f8c:	2b2a      	cmp	r3, #42	; 0x2a
 8002f8e:	d015      	beq.n	8002fbc <_vfiprintf_r+0x120>
 8002f90:	4654      	mov	r4, sl
 8002f92:	2000      	movs	r0, #0
 8002f94:	f04f 0c0a 	mov.w	ip, #10
 8002f98:	9a07      	ldr	r2, [sp, #28]
 8002f9a:	4621      	mov	r1, r4
 8002f9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002fa0:	3b30      	subs	r3, #48	; 0x30
 8002fa2:	2b09      	cmp	r3, #9
 8002fa4:	d94d      	bls.n	8003042 <_vfiprintf_r+0x1a6>
 8002fa6:	b1b0      	cbz	r0, 8002fd6 <_vfiprintf_r+0x13a>
 8002fa8:	9207      	str	r2, [sp, #28]
 8002faa:	e014      	b.n	8002fd6 <_vfiprintf_r+0x13a>
 8002fac:	eba0 0308 	sub.w	r3, r0, r8
 8002fb0:	fa09 f303 	lsl.w	r3, r9, r3
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	46a2      	mov	sl, r4
 8002fb8:	9304      	str	r3, [sp, #16]
 8002fba:	e7d2      	b.n	8002f62 <_vfiprintf_r+0xc6>
 8002fbc:	9b03      	ldr	r3, [sp, #12]
 8002fbe:	1d19      	adds	r1, r3, #4
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	9103      	str	r1, [sp, #12]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	bfbb      	ittet	lt
 8002fc8:	425b      	neglt	r3, r3
 8002fca:	f042 0202 	orrlt.w	r2, r2, #2
 8002fce:	9307      	strge	r3, [sp, #28]
 8002fd0:	9307      	strlt	r3, [sp, #28]
 8002fd2:	bfb8      	it	lt
 8002fd4:	9204      	strlt	r2, [sp, #16]
 8002fd6:	7823      	ldrb	r3, [r4, #0]
 8002fd8:	2b2e      	cmp	r3, #46	; 0x2e
 8002fda:	d10c      	bne.n	8002ff6 <_vfiprintf_r+0x15a>
 8002fdc:	7863      	ldrb	r3, [r4, #1]
 8002fde:	2b2a      	cmp	r3, #42	; 0x2a
 8002fe0:	d134      	bne.n	800304c <_vfiprintf_r+0x1b0>
 8002fe2:	9b03      	ldr	r3, [sp, #12]
 8002fe4:	3402      	adds	r4, #2
 8002fe6:	1d1a      	adds	r2, r3, #4
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	9203      	str	r2, [sp, #12]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	bfb8      	it	lt
 8002ff0:	f04f 33ff 	movlt.w	r3, #4294967295
 8002ff4:	9305      	str	r3, [sp, #20]
 8002ff6:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80030c0 <_vfiprintf_r+0x224>
 8002ffa:	2203      	movs	r2, #3
 8002ffc:	4650      	mov	r0, sl
 8002ffe:	7821      	ldrb	r1, [r4, #0]
 8003000:	f000 fb64 	bl	80036cc <memchr>
 8003004:	b138      	cbz	r0, 8003016 <_vfiprintf_r+0x17a>
 8003006:	2240      	movs	r2, #64	; 0x40
 8003008:	9b04      	ldr	r3, [sp, #16]
 800300a:	eba0 000a 	sub.w	r0, r0, sl
 800300e:	4082      	lsls	r2, r0
 8003010:	4313      	orrs	r3, r2
 8003012:	3401      	adds	r4, #1
 8003014:	9304      	str	r3, [sp, #16]
 8003016:	f814 1b01 	ldrb.w	r1, [r4], #1
 800301a:	2206      	movs	r2, #6
 800301c:	4829      	ldr	r0, [pc, #164]	; (80030c4 <_vfiprintf_r+0x228>)
 800301e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003022:	f000 fb53 	bl	80036cc <memchr>
 8003026:	2800      	cmp	r0, #0
 8003028:	d03f      	beq.n	80030aa <_vfiprintf_r+0x20e>
 800302a:	4b27      	ldr	r3, [pc, #156]	; (80030c8 <_vfiprintf_r+0x22c>)
 800302c:	bb1b      	cbnz	r3, 8003076 <_vfiprintf_r+0x1da>
 800302e:	9b03      	ldr	r3, [sp, #12]
 8003030:	3307      	adds	r3, #7
 8003032:	f023 0307 	bic.w	r3, r3, #7
 8003036:	3308      	adds	r3, #8
 8003038:	9303      	str	r3, [sp, #12]
 800303a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800303c:	443b      	add	r3, r7
 800303e:	9309      	str	r3, [sp, #36]	; 0x24
 8003040:	e768      	b.n	8002f14 <_vfiprintf_r+0x78>
 8003042:	460c      	mov	r4, r1
 8003044:	2001      	movs	r0, #1
 8003046:	fb0c 3202 	mla	r2, ip, r2, r3
 800304a:	e7a6      	b.n	8002f9a <_vfiprintf_r+0xfe>
 800304c:	2300      	movs	r3, #0
 800304e:	f04f 0c0a 	mov.w	ip, #10
 8003052:	4619      	mov	r1, r3
 8003054:	3401      	adds	r4, #1
 8003056:	9305      	str	r3, [sp, #20]
 8003058:	4620      	mov	r0, r4
 800305a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800305e:	3a30      	subs	r2, #48	; 0x30
 8003060:	2a09      	cmp	r2, #9
 8003062:	d903      	bls.n	800306c <_vfiprintf_r+0x1d0>
 8003064:	2b00      	cmp	r3, #0
 8003066:	d0c6      	beq.n	8002ff6 <_vfiprintf_r+0x15a>
 8003068:	9105      	str	r1, [sp, #20]
 800306a:	e7c4      	b.n	8002ff6 <_vfiprintf_r+0x15a>
 800306c:	4604      	mov	r4, r0
 800306e:	2301      	movs	r3, #1
 8003070:	fb0c 2101 	mla	r1, ip, r1, r2
 8003074:	e7f0      	b.n	8003058 <_vfiprintf_r+0x1bc>
 8003076:	ab03      	add	r3, sp, #12
 8003078:	9300      	str	r3, [sp, #0]
 800307a:	462a      	mov	r2, r5
 800307c:	4630      	mov	r0, r6
 800307e:	4b13      	ldr	r3, [pc, #76]	; (80030cc <_vfiprintf_r+0x230>)
 8003080:	a904      	add	r1, sp, #16
 8003082:	f3af 8000 	nop.w
 8003086:	4607      	mov	r7, r0
 8003088:	1c78      	adds	r0, r7, #1
 800308a:	d1d6      	bne.n	800303a <_vfiprintf_r+0x19e>
 800308c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800308e:	07d9      	lsls	r1, r3, #31
 8003090:	d405      	bmi.n	800309e <_vfiprintf_r+0x202>
 8003092:	89ab      	ldrh	r3, [r5, #12]
 8003094:	059a      	lsls	r2, r3, #22
 8003096:	d402      	bmi.n	800309e <_vfiprintf_r+0x202>
 8003098:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800309a:	f7ff fc8a 	bl	80029b2 <__retarget_lock_release_recursive>
 800309e:	89ab      	ldrh	r3, [r5, #12]
 80030a0:	065b      	lsls	r3, r3, #25
 80030a2:	f53f af1d 	bmi.w	8002ee0 <_vfiprintf_r+0x44>
 80030a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80030a8:	e71c      	b.n	8002ee4 <_vfiprintf_r+0x48>
 80030aa:	ab03      	add	r3, sp, #12
 80030ac:	9300      	str	r3, [sp, #0]
 80030ae:	462a      	mov	r2, r5
 80030b0:	4630      	mov	r0, r6
 80030b2:	4b06      	ldr	r3, [pc, #24]	; (80030cc <_vfiprintf_r+0x230>)
 80030b4:	a904      	add	r1, sp, #16
 80030b6:	f000 f87d 	bl	80031b4 <_printf_i>
 80030ba:	e7e4      	b.n	8003086 <_vfiprintf_r+0x1ea>
 80030bc:	080038f6 	.word	0x080038f6
 80030c0:	080038fc 	.word	0x080038fc
 80030c4:	08003900 	.word	0x08003900
 80030c8:	00000000 	.word	0x00000000
 80030cc:	08002e77 	.word	0x08002e77

080030d0 <_printf_common>:
 80030d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030d4:	4616      	mov	r6, r2
 80030d6:	4699      	mov	r9, r3
 80030d8:	688a      	ldr	r2, [r1, #8]
 80030da:	690b      	ldr	r3, [r1, #16]
 80030dc:	4607      	mov	r7, r0
 80030de:	4293      	cmp	r3, r2
 80030e0:	bfb8      	it	lt
 80030e2:	4613      	movlt	r3, r2
 80030e4:	6033      	str	r3, [r6, #0]
 80030e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80030ea:	460c      	mov	r4, r1
 80030ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80030f0:	b10a      	cbz	r2, 80030f6 <_printf_common+0x26>
 80030f2:	3301      	adds	r3, #1
 80030f4:	6033      	str	r3, [r6, #0]
 80030f6:	6823      	ldr	r3, [r4, #0]
 80030f8:	0699      	lsls	r1, r3, #26
 80030fa:	bf42      	ittt	mi
 80030fc:	6833      	ldrmi	r3, [r6, #0]
 80030fe:	3302      	addmi	r3, #2
 8003100:	6033      	strmi	r3, [r6, #0]
 8003102:	6825      	ldr	r5, [r4, #0]
 8003104:	f015 0506 	ands.w	r5, r5, #6
 8003108:	d106      	bne.n	8003118 <_printf_common+0x48>
 800310a:	f104 0a19 	add.w	sl, r4, #25
 800310e:	68e3      	ldr	r3, [r4, #12]
 8003110:	6832      	ldr	r2, [r6, #0]
 8003112:	1a9b      	subs	r3, r3, r2
 8003114:	42ab      	cmp	r3, r5
 8003116:	dc2b      	bgt.n	8003170 <_printf_common+0xa0>
 8003118:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800311c:	1e13      	subs	r3, r2, #0
 800311e:	6822      	ldr	r2, [r4, #0]
 8003120:	bf18      	it	ne
 8003122:	2301      	movne	r3, #1
 8003124:	0692      	lsls	r2, r2, #26
 8003126:	d430      	bmi.n	800318a <_printf_common+0xba>
 8003128:	4649      	mov	r1, r9
 800312a:	4638      	mov	r0, r7
 800312c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003130:	47c0      	blx	r8
 8003132:	3001      	adds	r0, #1
 8003134:	d023      	beq.n	800317e <_printf_common+0xae>
 8003136:	6823      	ldr	r3, [r4, #0]
 8003138:	6922      	ldr	r2, [r4, #16]
 800313a:	f003 0306 	and.w	r3, r3, #6
 800313e:	2b04      	cmp	r3, #4
 8003140:	bf14      	ite	ne
 8003142:	2500      	movne	r5, #0
 8003144:	6833      	ldreq	r3, [r6, #0]
 8003146:	f04f 0600 	mov.w	r6, #0
 800314a:	bf08      	it	eq
 800314c:	68e5      	ldreq	r5, [r4, #12]
 800314e:	f104 041a 	add.w	r4, r4, #26
 8003152:	bf08      	it	eq
 8003154:	1aed      	subeq	r5, r5, r3
 8003156:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800315a:	bf08      	it	eq
 800315c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003160:	4293      	cmp	r3, r2
 8003162:	bfc4      	itt	gt
 8003164:	1a9b      	subgt	r3, r3, r2
 8003166:	18ed      	addgt	r5, r5, r3
 8003168:	42b5      	cmp	r5, r6
 800316a:	d11a      	bne.n	80031a2 <_printf_common+0xd2>
 800316c:	2000      	movs	r0, #0
 800316e:	e008      	b.n	8003182 <_printf_common+0xb2>
 8003170:	2301      	movs	r3, #1
 8003172:	4652      	mov	r2, sl
 8003174:	4649      	mov	r1, r9
 8003176:	4638      	mov	r0, r7
 8003178:	47c0      	blx	r8
 800317a:	3001      	adds	r0, #1
 800317c:	d103      	bne.n	8003186 <_printf_common+0xb6>
 800317e:	f04f 30ff 	mov.w	r0, #4294967295
 8003182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003186:	3501      	adds	r5, #1
 8003188:	e7c1      	b.n	800310e <_printf_common+0x3e>
 800318a:	2030      	movs	r0, #48	; 0x30
 800318c:	18e1      	adds	r1, r4, r3
 800318e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003192:	1c5a      	adds	r2, r3, #1
 8003194:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003198:	4422      	add	r2, r4
 800319a:	3302      	adds	r3, #2
 800319c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80031a0:	e7c2      	b.n	8003128 <_printf_common+0x58>
 80031a2:	2301      	movs	r3, #1
 80031a4:	4622      	mov	r2, r4
 80031a6:	4649      	mov	r1, r9
 80031a8:	4638      	mov	r0, r7
 80031aa:	47c0      	blx	r8
 80031ac:	3001      	adds	r0, #1
 80031ae:	d0e6      	beq.n	800317e <_printf_common+0xae>
 80031b0:	3601      	adds	r6, #1
 80031b2:	e7d9      	b.n	8003168 <_printf_common+0x98>

080031b4 <_printf_i>:
 80031b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80031b8:	7e0f      	ldrb	r7, [r1, #24]
 80031ba:	4691      	mov	r9, r2
 80031bc:	2f78      	cmp	r7, #120	; 0x78
 80031be:	4680      	mov	r8, r0
 80031c0:	460c      	mov	r4, r1
 80031c2:	469a      	mov	sl, r3
 80031c4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80031c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80031ca:	d807      	bhi.n	80031dc <_printf_i+0x28>
 80031cc:	2f62      	cmp	r7, #98	; 0x62
 80031ce:	d80a      	bhi.n	80031e6 <_printf_i+0x32>
 80031d0:	2f00      	cmp	r7, #0
 80031d2:	f000 80d5 	beq.w	8003380 <_printf_i+0x1cc>
 80031d6:	2f58      	cmp	r7, #88	; 0x58
 80031d8:	f000 80c1 	beq.w	800335e <_printf_i+0x1aa>
 80031dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80031e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80031e4:	e03a      	b.n	800325c <_printf_i+0xa8>
 80031e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80031ea:	2b15      	cmp	r3, #21
 80031ec:	d8f6      	bhi.n	80031dc <_printf_i+0x28>
 80031ee:	a101      	add	r1, pc, #4	; (adr r1, 80031f4 <_printf_i+0x40>)
 80031f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80031f4:	0800324d 	.word	0x0800324d
 80031f8:	08003261 	.word	0x08003261
 80031fc:	080031dd 	.word	0x080031dd
 8003200:	080031dd 	.word	0x080031dd
 8003204:	080031dd 	.word	0x080031dd
 8003208:	080031dd 	.word	0x080031dd
 800320c:	08003261 	.word	0x08003261
 8003210:	080031dd 	.word	0x080031dd
 8003214:	080031dd 	.word	0x080031dd
 8003218:	080031dd 	.word	0x080031dd
 800321c:	080031dd 	.word	0x080031dd
 8003220:	08003367 	.word	0x08003367
 8003224:	0800328d 	.word	0x0800328d
 8003228:	08003321 	.word	0x08003321
 800322c:	080031dd 	.word	0x080031dd
 8003230:	080031dd 	.word	0x080031dd
 8003234:	08003389 	.word	0x08003389
 8003238:	080031dd 	.word	0x080031dd
 800323c:	0800328d 	.word	0x0800328d
 8003240:	080031dd 	.word	0x080031dd
 8003244:	080031dd 	.word	0x080031dd
 8003248:	08003329 	.word	0x08003329
 800324c:	682b      	ldr	r3, [r5, #0]
 800324e:	1d1a      	adds	r2, r3, #4
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	602a      	str	r2, [r5, #0]
 8003254:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003258:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800325c:	2301      	movs	r3, #1
 800325e:	e0a0      	b.n	80033a2 <_printf_i+0x1ee>
 8003260:	6820      	ldr	r0, [r4, #0]
 8003262:	682b      	ldr	r3, [r5, #0]
 8003264:	0607      	lsls	r7, r0, #24
 8003266:	f103 0104 	add.w	r1, r3, #4
 800326a:	6029      	str	r1, [r5, #0]
 800326c:	d501      	bpl.n	8003272 <_printf_i+0xbe>
 800326e:	681e      	ldr	r6, [r3, #0]
 8003270:	e003      	b.n	800327a <_printf_i+0xc6>
 8003272:	0646      	lsls	r6, r0, #25
 8003274:	d5fb      	bpl.n	800326e <_printf_i+0xba>
 8003276:	f9b3 6000 	ldrsh.w	r6, [r3]
 800327a:	2e00      	cmp	r6, #0
 800327c:	da03      	bge.n	8003286 <_printf_i+0xd2>
 800327e:	232d      	movs	r3, #45	; 0x2d
 8003280:	4276      	negs	r6, r6
 8003282:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003286:	230a      	movs	r3, #10
 8003288:	4859      	ldr	r0, [pc, #356]	; (80033f0 <_printf_i+0x23c>)
 800328a:	e012      	b.n	80032b2 <_printf_i+0xfe>
 800328c:	682b      	ldr	r3, [r5, #0]
 800328e:	6820      	ldr	r0, [r4, #0]
 8003290:	1d19      	adds	r1, r3, #4
 8003292:	6029      	str	r1, [r5, #0]
 8003294:	0605      	lsls	r5, r0, #24
 8003296:	d501      	bpl.n	800329c <_printf_i+0xe8>
 8003298:	681e      	ldr	r6, [r3, #0]
 800329a:	e002      	b.n	80032a2 <_printf_i+0xee>
 800329c:	0641      	lsls	r1, r0, #25
 800329e:	d5fb      	bpl.n	8003298 <_printf_i+0xe4>
 80032a0:	881e      	ldrh	r6, [r3, #0]
 80032a2:	2f6f      	cmp	r7, #111	; 0x6f
 80032a4:	bf0c      	ite	eq
 80032a6:	2308      	moveq	r3, #8
 80032a8:	230a      	movne	r3, #10
 80032aa:	4851      	ldr	r0, [pc, #324]	; (80033f0 <_printf_i+0x23c>)
 80032ac:	2100      	movs	r1, #0
 80032ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80032b2:	6865      	ldr	r5, [r4, #4]
 80032b4:	2d00      	cmp	r5, #0
 80032b6:	bfa8      	it	ge
 80032b8:	6821      	ldrge	r1, [r4, #0]
 80032ba:	60a5      	str	r5, [r4, #8]
 80032bc:	bfa4      	itt	ge
 80032be:	f021 0104 	bicge.w	r1, r1, #4
 80032c2:	6021      	strge	r1, [r4, #0]
 80032c4:	b90e      	cbnz	r6, 80032ca <_printf_i+0x116>
 80032c6:	2d00      	cmp	r5, #0
 80032c8:	d04b      	beq.n	8003362 <_printf_i+0x1ae>
 80032ca:	4615      	mov	r5, r2
 80032cc:	fbb6 f1f3 	udiv	r1, r6, r3
 80032d0:	fb03 6711 	mls	r7, r3, r1, r6
 80032d4:	5dc7      	ldrb	r7, [r0, r7]
 80032d6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80032da:	4637      	mov	r7, r6
 80032dc:	42bb      	cmp	r3, r7
 80032de:	460e      	mov	r6, r1
 80032e0:	d9f4      	bls.n	80032cc <_printf_i+0x118>
 80032e2:	2b08      	cmp	r3, #8
 80032e4:	d10b      	bne.n	80032fe <_printf_i+0x14a>
 80032e6:	6823      	ldr	r3, [r4, #0]
 80032e8:	07de      	lsls	r6, r3, #31
 80032ea:	d508      	bpl.n	80032fe <_printf_i+0x14a>
 80032ec:	6923      	ldr	r3, [r4, #16]
 80032ee:	6861      	ldr	r1, [r4, #4]
 80032f0:	4299      	cmp	r1, r3
 80032f2:	bfde      	ittt	le
 80032f4:	2330      	movle	r3, #48	; 0x30
 80032f6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80032fa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80032fe:	1b52      	subs	r2, r2, r5
 8003300:	6122      	str	r2, [r4, #16]
 8003302:	464b      	mov	r3, r9
 8003304:	4621      	mov	r1, r4
 8003306:	4640      	mov	r0, r8
 8003308:	f8cd a000 	str.w	sl, [sp]
 800330c:	aa03      	add	r2, sp, #12
 800330e:	f7ff fedf 	bl	80030d0 <_printf_common>
 8003312:	3001      	adds	r0, #1
 8003314:	d14a      	bne.n	80033ac <_printf_i+0x1f8>
 8003316:	f04f 30ff 	mov.w	r0, #4294967295
 800331a:	b004      	add	sp, #16
 800331c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003320:	6823      	ldr	r3, [r4, #0]
 8003322:	f043 0320 	orr.w	r3, r3, #32
 8003326:	6023      	str	r3, [r4, #0]
 8003328:	2778      	movs	r7, #120	; 0x78
 800332a:	4832      	ldr	r0, [pc, #200]	; (80033f4 <_printf_i+0x240>)
 800332c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003330:	6823      	ldr	r3, [r4, #0]
 8003332:	6829      	ldr	r1, [r5, #0]
 8003334:	061f      	lsls	r7, r3, #24
 8003336:	f851 6b04 	ldr.w	r6, [r1], #4
 800333a:	d402      	bmi.n	8003342 <_printf_i+0x18e>
 800333c:	065f      	lsls	r7, r3, #25
 800333e:	bf48      	it	mi
 8003340:	b2b6      	uxthmi	r6, r6
 8003342:	07df      	lsls	r7, r3, #31
 8003344:	bf48      	it	mi
 8003346:	f043 0320 	orrmi.w	r3, r3, #32
 800334a:	6029      	str	r1, [r5, #0]
 800334c:	bf48      	it	mi
 800334e:	6023      	strmi	r3, [r4, #0]
 8003350:	b91e      	cbnz	r6, 800335a <_printf_i+0x1a6>
 8003352:	6823      	ldr	r3, [r4, #0]
 8003354:	f023 0320 	bic.w	r3, r3, #32
 8003358:	6023      	str	r3, [r4, #0]
 800335a:	2310      	movs	r3, #16
 800335c:	e7a6      	b.n	80032ac <_printf_i+0xf8>
 800335e:	4824      	ldr	r0, [pc, #144]	; (80033f0 <_printf_i+0x23c>)
 8003360:	e7e4      	b.n	800332c <_printf_i+0x178>
 8003362:	4615      	mov	r5, r2
 8003364:	e7bd      	b.n	80032e2 <_printf_i+0x12e>
 8003366:	682b      	ldr	r3, [r5, #0]
 8003368:	6826      	ldr	r6, [r4, #0]
 800336a:	1d18      	adds	r0, r3, #4
 800336c:	6961      	ldr	r1, [r4, #20]
 800336e:	6028      	str	r0, [r5, #0]
 8003370:	0635      	lsls	r5, r6, #24
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	d501      	bpl.n	800337a <_printf_i+0x1c6>
 8003376:	6019      	str	r1, [r3, #0]
 8003378:	e002      	b.n	8003380 <_printf_i+0x1cc>
 800337a:	0670      	lsls	r0, r6, #25
 800337c:	d5fb      	bpl.n	8003376 <_printf_i+0x1c2>
 800337e:	8019      	strh	r1, [r3, #0]
 8003380:	2300      	movs	r3, #0
 8003382:	4615      	mov	r5, r2
 8003384:	6123      	str	r3, [r4, #16]
 8003386:	e7bc      	b.n	8003302 <_printf_i+0x14e>
 8003388:	682b      	ldr	r3, [r5, #0]
 800338a:	2100      	movs	r1, #0
 800338c:	1d1a      	adds	r2, r3, #4
 800338e:	602a      	str	r2, [r5, #0]
 8003390:	681d      	ldr	r5, [r3, #0]
 8003392:	6862      	ldr	r2, [r4, #4]
 8003394:	4628      	mov	r0, r5
 8003396:	f000 f999 	bl	80036cc <memchr>
 800339a:	b108      	cbz	r0, 80033a0 <_printf_i+0x1ec>
 800339c:	1b40      	subs	r0, r0, r5
 800339e:	6060      	str	r0, [r4, #4]
 80033a0:	6863      	ldr	r3, [r4, #4]
 80033a2:	6123      	str	r3, [r4, #16]
 80033a4:	2300      	movs	r3, #0
 80033a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033aa:	e7aa      	b.n	8003302 <_printf_i+0x14e>
 80033ac:	462a      	mov	r2, r5
 80033ae:	4649      	mov	r1, r9
 80033b0:	4640      	mov	r0, r8
 80033b2:	6923      	ldr	r3, [r4, #16]
 80033b4:	47d0      	blx	sl
 80033b6:	3001      	adds	r0, #1
 80033b8:	d0ad      	beq.n	8003316 <_printf_i+0x162>
 80033ba:	6823      	ldr	r3, [r4, #0]
 80033bc:	079b      	lsls	r3, r3, #30
 80033be:	d413      	bmi.n	80033e8 <_printf_i+0x234>
 80033c0:	68e0      	ldr	r0, [r4, #12]
 80033c2:	9b03      	ldr	r3, [sp, #12]
 80033c4:	4298      	cmp	r0, r3
 80033c6:	bfb8      	it	lt
 80033c8:	4618      	movlt	r0, r3
 80033ca:	e7a6      	b.n	800331a <_printf_i+0x166>
 80033cc:	2301      	movs	r3, #1
 80033ce:	4632      	mov	r2, r6
 80033d0:	4649      	mov	r1, r9
 80033d2:	4640      	mov	r0, r8
 80033d4:	47d0      	blx	sl
 80033d6:	3001      	adds	r0, #1
 80033d8:	d09d      	beq.n	8003316 <_printf_i+0x162>
 80033da:	3501      	adds	r5, #1
 80033dc:	68e3      	ldr	r3, [r4, #12]
 80033de:	9903      	ldr	r1, [sp, #12]
 80033e0:	1a5b      	subs	r3, r3, r1
 80033e2:	42ab      	cmp	r3, r5
 80033e4:	dcf2      	bgt.n	80033cc <_printf_i+0x218>
 80033e6:	e7eb      	b.n	80033c0 <_printf_i+0x20c>
 80033e8:	2500      	movs	r5, #0
 80033ea:	f104 0619 	add.w	r6, r4, #25
 80033ee:	e7f5      	b.n	80033dc <_printf_i+0x228>
 80033f0:	08003907 	.word	0x08003907
 80033f4:	08003918 	.word	0x08003918

080033f8 <__sflush_r>:
 80033f8:	898a      	ldrh	r2, [r1, #12]
 80033fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033fc:	4605      	mov	r5, r0
 80033fe:	0710      	lsls	r0, r2, #28
 8003400:	460c      	mov	r4, r1
 8003402:	d457      	bmi.n	80034b4 <__sflush_r+0xbc>
 8003404:	684b      	ldr	r3, [r1, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	dc04      	bgt.n	8003414 <__sflush_r+0x1c>
 800340a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800340c:	2b00      	cmp	r3, #0
 800340e:	dc01      	bgt.n	8003414 <__sflush_r+0x1c>
 8003410:	2000      	movs	r0, #0
 8003412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003414:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003416:	2e00      	cmp	r6, #0
 8003418:	d0fa      	beq.n	8003410 <__sflush_r+0x18>
 800341a:	2300      	movs	r3, #0
 800341c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003420:	682f      	ldr	r7, [r5, #0]
 8003422:	6a21      	ldr	r1, [r4, #32]
 8003424:	602b      	str	r3, [r5, #0]
 8003426:	d032      	beq.n	800348e <__sflush_r+0x96>
 8003428:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800342a:	89a3      	ldrh	r3, [r4, #12]
 800342c:	075a      	lsls	r2, r3, #29
 800342e:	d505      	bpl.n	800343c <__sflush_r+0x44>
 8003430:	6863      	ldr	r3, [r4, #4]
 8003432:	1ac0      	subs	r0, r0, r3
 8003434:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003436:	b10b      	cbz	r3, 800343c <__sflush_r+0x44>
 8003438:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800343a:	1ac0      	subs	r0, r0, r3
 800343c:	2300      	movs	r3, #0
 800343e:	4602      	mov	r2, r0
 8003440:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003442:	4628      	mov	r0, r5
 8003444:	6a21      	ldr	r1, [r4, #32]
 8003446:	47b0      	blx	r6
 8003448:	1c43      	adds	r3, r0, #1
 800344a:	89a3      	ldrh	r3, [r4, #12]
 800344c:	d106      	bne.n	800345c <__sflush_r+0x64>
 800344e:	6829      	ldr	r1, [r5, #0]
 8003450:	291d      	cmp	r1, #29
 8003452:	d82b      	bhi.n	80034ac <__sflush_r+0xb4>
 8003454:	4a28      	ldr	r2, [pc, #160]	; (80034f8 <__sflush_r+0x100>)
 8003456:	410a      	asrs	r2, r1
 8003458:	07d6      	lsls	r6, r2, #31
 800345a:	d427      	bmi.n	80034ac <__sflush_r+0xb4>
 800345c:	2200      	movs	r2, #0
 800345e:	6062      	str	r2, [r4, #4]
 8003460:	6922      	ldr	r2, [r4, #16]
 8003462:	04d9      	lsls	r1, r3, #19
 8003464:	6022      	str	r2, [r4, #0]
 8003466:	d504      	bpl.n	8003472 <__sflush_r+0x7a>
 8003468:	1c42      	adds	r2, r0, #1
 800346a:	d101      	bne.n	8003470 <__sflush_r+0x78>
 800346c:	682b      	ldr	r3, [r5, #0]
 800346e:	b903      	cbnz	r3, 8003472 <__sflush_r+0x7a>
 8003470:	6560      	str	r0, [r4, #84]	; 0x54
 8003472:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003474:	602f      	str	r7, [r5, #0]
 8003476:	2900      	cmp	r1, #0
 8003478:	d0ca      	beq.n	8003410 <__sflush_r+0x18>
 800347a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800347e:	4299      	cmp	r1, r3
 8003480:	d002      	beq.n	8003488 <__sflush_r+0x90>
 8003482:	4628      	mov	r0, r5
 8003484:	f7ff fa96 	bl	80029b4 <_free_r>
 8003488:	2000      	movs	r0, #0
 800348a:	6360      	str	r0, [r4, #52]	; 0x34
 800348c:	e7c1      	b.n	8003412 <__sflush_r+0x1a>
 800348e:	2301      	movs	r3, #1
 8003490:	4628      	mov	r0, r5
 8003492:	47b0      	blx	r6
 8003494:	1c41      	adds	r1, r0, #1
 8003496:	d1c8      	bne.n	800342a <__sflush_r+0x32>
 8003498:	682b      	ldr	r3, [r5, #0]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d0c5      	beq.n	800342a <__sflush_r+0x32>
 800349e:	2b1d      	cmp	r3, #29
 80034a0:	d001      	beq.n	80034a6 <__sflush_r+0xae>
 80034a2:	2b16      	cmp	r3, #22
 80034a4:	d101      	bne.n	80034aa <__sflush_r+0xb2>
 80034a6:	602f      	str	r7, [r5, #0]
 80034a8:	e7b2      	b.n	8003410 <__sflush_r+0x18>
 80034aa:	89a3      	ldrh	r3, [r4, #12]
 80034ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034b0:	81a3      	strh	r3, [r4, #12]
 80034b2:	e7ae      	b.n	8003412 <__sflush_r+0x1a>
 80034b4:	690f      	ldr	r7, [r1, #16]
 80034b6:	2f00      	cmp	r7, #0
 80034b8:	d0aa      	beq.n	8003410 <__sflush_r+0x18>
 80034ba:	0793      	lsls	r3, r2, #30
 80034bc:	bf18      	it	ne
 80034be:	2300      	movne	r3, #0
 80034c0:	680e      	ldr	r6, [r1, #0]
 80034c2:	bf08      	it	eq
 80034c4:	694b      	ldreq	r3, [r1, #20]
 80034c6:	1bf6      	subs	r6, r6, r7
 80034c8:	600f      	str	r7, [r1, #0]
 80034ca:	608b      	str	r3, [r1, #8]
 80034cc:	2e00      	cmp	r6, #0
 80034ce:	dd9f      	ble.n	8003410 <__sflush_r+0x18>
 80034d0:	4633      	mov	r3, r6
 80034d2:	463a      	mov	r2, r7
 80034d4:	4628      	mov	r0, r5
 80034d6:	6a21      	ldr	r1, [r4, #32]
 80034d8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80034dc:	47e0      	blx	ip
 80034de:	2800      	cmp	r0, #0
 80034e0:	dc06      	bgt.n	80034f0 <__sflush_r+0xf8>
 80034e2:	89a3      	ldrh	r3, [r4, #12]
 80034e4:	f04f 30ff 	mov.w	r0, #4294967295
 80034e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034ec:	81a3      	strh	r3, [r4, #12]
 80034ee:	e790      	b.n	8003412 <__sflush_r+0x1a>
 80034f0:	4407      	add	r7, r0
 80034f2:	1a36      	subs	r6, r6, r0
 80034f4:	e7ea      	b.n	80034cc <__sflush_r+0xd4>
 80034f6:	bf00      	nop
 80034f8:	dfbffffe 	.word	0xdfbffffe

080034fc <_fflush_r>:
 80034fc:	b538      	push	{r3, r4, r5, lr}
 80034fe:	690b      	ldr	r3, [r1, #16]
 8003500:	4605      	mov	r5, r0
 8003502:	460c      	mov	r4, r1
 8003504:	b913      	cbnz	r3, 800350c <_fflush_r+0x10>
 8003506:	2500      	movs	r5, #0
 8003508:	4628      	mov	r0, r5
 800350a:	bd38      	pop	{r3, r4, r5, pc}
 800350c:	b118      	cbz	r0, 8003516 <_fflush_r+0x1a>
 800350e:	6a03      	ldr	r3, [r0, #32]
 8003510:	b90b      	cbnz	r3, 8003516 <_fflush_r+0x1a>
 8003512:	f7ff f929 	bl	8002768 <__sinit>
 8003516:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d0f3      	beq.n	8003506 <_fflush_r+0xa>
 800351e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003520:	07d0      	lsls	r0, r2, #31
 8003522:	d404      	bmi.n	800352e <_fflush_r+0x32>
 8003524:	0599      	lsls	r1, r3, #22
 8003526:	d402      	bmi.n	800352e <_fflush_r+0x32>
 8003528:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800352a:	f7ff fa41 	bl	80029b0 <__retarget_lock_acquire_recursive>
 800352e:	4628      	mov	r0, r5
 8003530:	4621      	mov	r1, r4
 8003532:	f7ff ff61 	bl	80033f8 <__sflush_r>
 8003536:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003538:	4605      	mov	r5, r0
 800353a:	07da      	lsls	r2, r3, #31
 800353c:	d4e4      	bmi.n	8003508 <_fflush_r+0xc>
 800353e:	89a3      	ldrh	r3, [r4, #12]
 8003540:	059b      	lsls	r3, r3, #22
 8003542:	d4e1      	bmi.n	8003508 <_fflush_r+0xc>
 8003544:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003546:	f7ff fa34 	bl	80029b2 <__retarget_lock_release_recursive>
 800354a:	e7dd      	b.n	8003508 <_fflush_r+0xc>

0800354c <__swbuf_r>:
 800354c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800354e:	460e      	mov	r6, r1
 8003550:	4614      	mov	r4, r2
 8003552:	4605      	mov	r5, r0
 8003554:	b118      	cbz	r0, 800355e <__swbuf_r+0x12>
 8003556:	6a03      	ldr	r3, [r0, #32]
 8003558:	b90b      	cbnz	r3, 800355e <__swbuf_r+0x12>
 800355a:	f7ff f905 	bl	8002768 <__sinit>
 800355e:	69a3      	ldr	r3, [r4, #24]
 8003560:	60a3      	str	r3, [r4, #8]
 8003562:	89a3      	ldrh	r3, [r4, #12]
 8003564:	071a      	lsls	r2, r3, #28
 8003566:	d525      	bpl.n	80035b4 <__swbuf_r+0x68>
 8003568:	6923      	ldr	r3, [r4, #16]
 800356a:	b31b      	cbz	r3, 80035b4 <__swbuf_r+0x68>
 800356c:	6823      	ldr	r3, [r4, #0]
 800356e:	6922      	ldr	r2, [r4, #16]
 8003570:	b2f6      	uxtb	r6, r6
 8003572:	1a98      	subs	r0, r3, r2
 8003574:	6963      	ldr	r3, [r4, #20]
 8003576:	4637      	mov	r7, r6
 8003578:	4283      	cmp	r3, r0
 800357a:	dc04      	bgt.n	8003586 <__swbuf_r+0x3a>
 800357c:	4621      	mov	r1, r4
 800357e:	4628      	mov	r0, r5
 8003580:	f7ff ffbc 	bl	80034fc <_fflush_r>
 8003584:	b9e0      	cbnz	r0, 80035c0 <__swbuf_r+0x74>
 8003586:	68a3      	ldr	r3, [r4, #8]
 8003588:	3b01      	subs	r3, #1
 800358a:	60a3      	str	r3, [r4, #8]
 800358c:	6823      	ldr	r3, [r4, #0]
 800358e:	1c5a      	adds	r2, r3, #1
 8003590:	6022      	str	r2, [r4, #0]
 8003592:	701e      	strb	r6, [r3, #0]
 8003594:	6962      	ldr	r2, [r4, #20]
 8003596:	1c43      	adds	r3, r0, #1
 8003598:	429a      	cmp	r2, r3
 800359a:	d004      	beq.n	80035a6 <__swbuf_r+0x5a>
 800359c:	89a3      	ldrh	r3, [r4, #12]
 800359e:	07db      	lsls	r3, r3, #31
 80035a0:	d506      	bpl.n	80035b0 <__swbuf_r+0x64>
 80035a2:	2e0a      	cmp	r6, #10
 80035a4:	d104      	bne.n	80035b0 <__swbuf_r+0x64>
 80035a6:	4621      	mov	r1, r4
 80035a8:	4628      	mov	r0, r5
 80035aa:	f7ff ffa7 	bl	80034fc <_fflush_r>
 80035ae:	b938      	cbnz	r0, 80035c0 <__swbuf_r+0x74>
 80035b0:	4638      	mov	r0, r7
 80035b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035b4:	4621      	mov	r1, r4
 80035b6:	4628      	mov	r0, r5
 80035b8:	f000 f806 	bl	80035c8 <__swsetup_r>
 80035bc:	2800      	cmp	r0, #0
 80035be:	d0d5      	beq.n	800356c <__swbuf_r+0x20>
 80035c0:	f04f 37ff 	mov.w	r7, #4294967295
 80035c4:	e7f4      	b.n	80035b0 <__swbuf_r+0x64>
	...

080035c8 <__swsetup_r>:
 80035c8:	b538      	push	{r3, r4, r5, lr}
 80035ca:	4b2a      	ldr	r3, [pc, #168]	; (8003674 <__swsetup_r+0xac>)
 80035cc:	4605      	mov	r5, r0
 80035ce:	6818      	ldr	r0, [r3, #0]
 80035d0:	460c      	mov	r4, r1
 80035d2:	b118      	cbz	r0, 80035dc <__swsetup_r+0x14>
 80035d4:	6a03      	ldr	r3, [r0, #32]
 80035d6:	b90b      	cbnz	r3, 80035dc <__swsetup_r+0x14>
 80035d8:	f7ff f8c6 	bl	8002768 <__sinit>
 80035dc:	89a3      	ldrh	r3, [r4, #12]
 80035de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80035e2:	0718      	lsls	r0, r3, #28
 80035e4:	d422      	bmi.n	800362c <__swsetup_r+0x64>
 80035e6:	06d9      	lsls	r1, r3, #27
 80035e8:	d407      	bmi.n	80035fa <__swsetup_r+0x32>
 80035ea:	2309      	movs	r3, #9
 80035ec:	602b      	str	r3, [r5, #0]
 80035ee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80035f2:	f04f 30ff 	mov.w	r0, #4294967295
 80035f6:	81a3      	strh	r3, [r4, #12]
 80035f8:	e034      	b.n	8003664 <__swsetup_r+0x9c>
 80035fa:	0758      	lsls	r0, r3, #29
 80035fc:	d512      	bpl.n	8003624 <__swsetup_r+0x5c>
 80035fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003600:	b141      	cbz	r1, 8003614 <__swsetup_r+0x4c>
 8003602:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003606:	4299      	cmp	r1, r3
 8003608:	d002      	beq.n	8003610 <__swsetup_r+0x48>
 800360a:	4628      	mov	r0, r5
 800360c:	f7ff f9d2 	bl	80029b4 <_free_r>
 8003610:	2300      	movs	r3, #0
 8003612:	6363      	str	r3, [r4, #52]	; 0x34
 8003614:	89a3      	ldrh	r3, [r4, #12]
 8003616:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800361a:	81a3      	strh	r3, [r4, #12]
 800361c:	2300      	movs	r3, #0
 800361e:	6063      	str	r3, [r4, #4]
 8003620:	6923      	ldr	r3, [r4, #16]
 8003622:	6023      	str	r3, [r4, #0]
 8003624:	89a3      	ldrh	r3, [r4, #12]
 8003626:	f043 0308 	orr.w	r3, r3, #8
 800362a:	81a3      	strh	r3, [r4, #12]
 800362c:	6923      	ldr	r3, [r4, #16]
 800362e:	b94b      	cbnz	r3, 8003644 <__swsetup_r+0x7c>
 8003630:	89a3      	ldrh	r3, [r4, #12]
 8003632:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003636:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800363a:	d003      	beq.n	8003644 <__swsetup_r+0x7c>
 800363c:	4621      	mov	r1, r4
 800363e:	4628      	mov	r0, r5
 8003640:	f000 f8b4 	bl	80037ac <__smakebuf_r>
 8003644:	89a0      	ldrh	r0, [r4, #12]
 8003646:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800364a:	f010 0301 	ands.w	r3, r0, #1
 800364e:	d00a      	beq.n	8003666 <__swsetup_r+0x9e>
 8003650:	2300      	movs	r3, #0
 8003652:	60a3      	str	r3, [r4, #8]
 8003654:	6963      	ldr	r3, [r4, #20]
 8003656:	425b      	negs	r3, r3
 8003658:	61a3      	str	r3, [r4, #24]
 800365a:	6923      	ldr	r3, [r4, #16]
 800365c:	b943      	cbnz	r3, 8003670 <__swsetup_r+0xa8>
 800365e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003662:	d1c4      	bne.n	80035ee <__swsetup_r+0x26>
 8003664:	bd38      	pop	{r3, r4, r5, pc}
 8003666:	0781      	lsls	r1, r0, #30
 8003668:	bf58      	it	pl
 800366a:	6963      	ldrpl	r3, [r4, #20]
 800366c:	60a3      	str	r3, [r4, #8]
 800366e:	e7f4      	b.n	800365a <__swsetup_r+0x92>
 8003670:	2000      	movs	r0, #0
 8003672:	e7f7      	b.n	8003664 <__swsetup_r+0x9c>
 8003674:	20000064 	.word	0x20000064

08003678 <memmove>:
 8003678:	4288      	cmp	r0, r1
 800367a:	b510      	push	{r4, lr}
 800367c:	eb01 0402 	add.w	r4, r1, r2
 8003680:	d902      	bls.n	8003688 <memmove+0x10>
 8003682:	4284      	cmp	r4, r0
 8003684:	4623      	mov	r3, r4
 8003686:	d807      	bhi.n	8003698 <memmove+0x20>
 8003688:	1e43      	subs	r3, r0, #1
 800368a:	42a1      	cmp	r1, r4
 800368c:	d008      	beq.n	80036a0 <memmove+0x28>
 800368e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003692:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003696:	e7f8      	b.n	800368a <memmove+0x12>
 8003698:	4601      	mov	r1, r0
 800369a:	4402      	add	r2, r0
 800369c:	428a      	cmp	r2, r1
 800369e:	d100      	bne.n	80036a2 <memmove+0x2a>
 80036a0:	bd10      	pop	{r4, pc}
 80036a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80036a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80036aa:	e7f7      	b.n	800369c <memmove+0x24>

080036ac <_sbrk_r>:
 80036ac:	b538      	push	{r3, r4, r5, lr}
 80036ae:	2300      	movs	r3, #0
 80036b0:	4d05      	ldr	r5, [pc, #20]	; (80036c8 <_sbrk_r+0x1c>)
 80036b2:	4604      	mov	r4, r0
 80036b4:	4608      	mov	r0, r1
 80036b6:	602b      	str	r3, [r5, #0]
 80036b8:	f7fd f86c 	bl	8000794 <_sbrk>
 80036bc:	1c43      	adds	r3, r0, #1
 80036be:	d102      	bne.n	80036c6 <_sbrk_r+0x1a>
 80036c0:	682b      	ldr	r3, [r5, #0]
 80036c2:	b103      	cbz	r3, 80036c6 <_sbrk_r+0x1a>
 80036c4:	6023      	str	r3, [r4, #0]
 80036c6:	bd38      	pop	{r3, r4, r5, pc}
 80036c8:	20000258 	.word	0x20000258

080036cc <memchr>:
 80036cc:	4603      	mov	r3, r0
 80036ce:	b510      	push	{r4, lr}
 80036d0:	b2c9      	uxtb	r1, r1
 80036d2:	4402      	add	r2, r0
 80036d4:	4293      	cmp	r3, r2
 80036d6:	4618      	mov	r0, r3
 80036d8:	d101      	bne.n	80036de <memchr+0x12>
 80036da:	2000      	movs	r0, #0
 80036dc:	e003      	b.n	80036e6 <memchr+0x1a>
 80036de:	7804      	ldrb	r4, [r0, #0]
 80036e0:	3301      	adds	r3, #1
 80036e2:	428c      	cmp	r4, r1
 80036e4:	d1f6      	bne.n	80036d4 <memchr+0x8>
 80036e6:	bd10      	pop	{r4, pc}

080036e8 <memcpy>:
 80036e8:	440a      	add	r2, r1
 80036ea:	4291      	cmp	r1, r2
 80036ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80036f0:	d100      	bne.n	80036f4 <memcpy+0xc>
 80036f2:	4770      	bx	lr
 80036f4:	b510      	push	{r4, lr}
 80036f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80036fa:	4291      	cmp	r1, r2
 80036fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003700:	d1f9      	bne.n	80036f6 <memcpy+0xe>
 8003702:	bd10      	pop	{r4, pc}

08003704 <_realloc_r>:
 8003704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003708:	4680      	mov	r8, r0
 800370a:	4614      	mov	r4, r2
 800370c:	460e      	mov	r6, r1
 800370e:	b921      	cbnz	r1, 800371a <_realloc_r+0x16>
 8003710:	4611      	mov	r1, r2
 8003712:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003716:	f7ff b9b5 	b.w	8002a84 <_malloc_r>
 800371a:	b92a      	cbnz	r2, 8003728 <_realloc_r+0x24>
 800371c:	f7ff f94a 	bl	80029b4 <_free_r>
 8003720:	4625      	mov	r5, r4
 8003722:	4628      	mov	r0, r5
 8003724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003728:	f000 f89e 	bl	8003868 <_malloc_usable_size_r>
 800372c:	4284      	cmp	r4, r0
 800372e:	4607      	mov	r7, r0
 8003730:	d802      	bhi.n	8003738 <_realloc_r+0x34>
 8003732:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003736:	d812      	bhi.n	800375e <_realloc_r+0x5a>
 8003738:	4621      	mov	r1, r4
 800373a:	4640      	mov	r0, r8
 800373c:	f7ff f9a2 	bl	8002a84 <_malloc_r>
 8003740:	4605      	mov	r5, r0
 8003742:	2800      	cmp	r0, #0
 8003744:	d0ed      	beq.n	8003722 <_realloc_r+0x1e>
 8003746:	42bc      	cmp	r4, r7
 8003748:	4622      	mov	r2, r4
 800374a:	4631      	mov	r1, r6
 800374c:	bf28      	it	cs
 800374e:	463a      	movcs	r2, r7
 8003750:	f7ff ffca 	bl	80036e8 <memcpy>
 8003754:	4631      	mov	r1, r6
 8003756:	4640      	mov	r0, r8
 8003758:	f7ff f92c 	bl	80029b4 <_free_r>
 800375c:	e7e1      	b.n	8003722 <_realloc_r+0x1e>
 800375e:	4635      	mov	r5, r6
 8003760:	e7df      	b.n	8003722 <_realloc_r+0x1e>

08003762 <__swhatbuf_r>:
 8003762:	b570      	push	{r4, r5, r6, lr}
 8003764:	460c      	mov	r4, r1
 8003766:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800376a:	4615      	mov	r5, r2
 800376c:	2900      	cmp	r1, #0
 800376e:	461e      	mov	r6, r3
 8003770:	b096      	sub	sp, #88	; 0x58
 8003772:	da0c      	bge.n	800378e <__swhatbuf_r+0x2c>
 8003774:	89a3      	ldrh	r3, [r4, #12]
 8003776:	2100      	movs	r1, #0
 8003778:	f013 0f80 	tst.w	r3, #128	; 0x80
 800377c:	bf0c      	ite	eq
 800377e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003782:	2340      	movne	r3, #64	; 0x40
 8003784:	2000      	movs	r0, #0
 8003786:	6031      	str	r1, [r6, #0]
 8003788:	602b      	str	r3, [r5, #0]
 800378a:	b016      	add	sp, #88	; 0x58
 800378c:	bd70      	pop	{r4, r5, r6, pc}
 800378e:	466a      	mov	r2, sp
 8003790:	f000 f848 	bl	8003824 <_fstat_r>
 8003794:	2800      	cmp	r0, #0
 8003796:	dbed      	blt.n	8003774 <__swhatbuf_r+0x12>
 8003798:	9901      	ldr	r1, [sp, #4]
 800379a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800379e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80037a2:	4259      	negs	r1, r3
 80037a4:	4159      	adcs	r1, r3
 80037a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037aa:	e7eb      	b.n	8003784 <__swhatbuf_r+0x22>

080037ac <__smakebuf_r>:
 80037ac:	898b      	ldrh	r3, [r1, #12]
 80037ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80037b0:	079d      	lsls	r5, r3, #30
 80037b2:	4606      	mov	r6, r0
 80037b4:	460c      	mov	r4, r1
 80037b6:	d507      	bpl.n	80037c8 <__smakebuf_r+0x1c>
 80037b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80037bc:	6023      	str	r3, [r4, #0]
 80037be:	6123      	str	r3, [r4, #16]
 80037c0:	2301      	movs	r3, #1
 80037c2:	6163      	str	r3, [r4, #20]
 80037c4:	b002      	add	sp, #8
 80037c6:	bd70      	pop	{r4, r5, r6, pc}
 80037c8:	466a      	mov	r2, sp
 80037ca:	ab01      	add	r3, sp, #4
 80037cc:	f7ff ffc9 	bl	8003762 <__swhatbuf_r>
 80037d0:	9900      	ldr	r1, [sp, #0]
 80037d2:	4605      	mov	r5, r0
 80037d4:	4630      	mov	r0, r6
 80037d6:	f7ff f955 	bl	8002a84 <_malloc_r>
 80037da:	b948      	cbnz	r0, 80037f0 <__smakebuf_r+0x44>
 80037dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037e0:	059a      	lsls	r2, r3, #22
 80037e2:	d4ef      	bmi.n	80037c4 <__smakebuf_r+0x18>
 80037e4:	f023 0303 	bic.w	r3, r3, #3
 80037e8:	f043 0302 	orr.w	r3, r3, #2
 80037ec:	81a3      	strh	r3, [r4, #12]
 80037ee:	e7e3      	b.n	80037b8 <__smakebuf_r+0xc>
 80037f0:	89a3      	ldrh	r3, [r4, #12]
 80037f2:	6020      	str	r0, [r4, #0]
 80037f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037f8:	81a3      	strh	r3, [r4, #12]
 80037fa:	9b00      	ldr	r3, [sp, #0]
 80037fc:	6120      	str	r0, [r4, #16]
 80037fe:	6163      	str	r3, [r4, #20]
 8003800:	9b01      	ldr	r3, [sp, #4]
 8003802:	b15b      	cbz	r3, 800381c <__smakebuf_r+0x70>
 8003804:	4630      	mov	r0, r6
 8003806:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800380a:	f000 f81d 	bl	8003848 <_isatty_r>
 800380e:	b128      	cbz	r0, 800381c <__smakebuf_r+0x70>
 8003810:	89a3      	ldrh	r3, [r4, #12]
 8003812:	f023 0303 	bic.w	r3, r3, #3
 8003816:	f043 0301 	orr.w	r3, r3, #1
 800381a:	81a3      	strh	r3, [r4, #12]
 800381c:	89a3      	ldrh	r3, [r4, #12]
 800381e:	431d      	orrs	r5, r3
 8003820:	81a5      	strh	r5, [r4, #12]
 8003822:	e7cf      	b.n	80037c4 <__smakebuf_r+0x18>

08003824 <_fstat_r>:
 8003824:	b538      	push	{r3, r4, r5, lr}
 8003826:	2300      	movs	r3, #0
 8003828:	4d06      	ldr	r5, [pc, #24]	; (8003844 <_fstat_r+0x20>)
 800382a:	4604      	mov	r4, r0
 800382c:	4608      	mov	r0, r1
 800382e:	4611      	mov	r1, r2
 8003830:	602b      	str	r3, [r5, #0]
 8003832:	f7fc ff8a 	bl	800074a <_fstat>
 8003836:	1c43      	adds	r3, r0, #1
 8003838:	d102      	bne.n	8003840 <_fstat_r+0x1c>
 800383a:	682b      	ldr	r3, [r5, #0]
 800383c:	b103      	cbz	r3, 8003840 <_fstat_r+0x1c>
 800383e:	6023      	str	r3, [r4, #0]
 8003840:	bd38      	pop	{r3, r4, r5, pc}
 8003842:	bf00      	nop
 8003844:	20000258 	.word	0x20000258

08003848 <_isatty_r>:
 8003848:	b538      	push	{r3, r4, r5, lr}
 800384a:	2300      	movs	r3, #0
 800384c:	4d05      	ldr	r5, [pc, #20]	; (8003864 <_isatty_r+0x1c>)
 800384e:	4604      	mov	r4, r0
 8003850:	4608      	mov	r0, r1
 8003852:	602b      	str	r3, [r5, #0]
 8003854:	f7fc ff88 	bl	8000768 <_isatty>
 8003858:	1c43      	adds	r3, r0, #1
 800385a:	d102      	bne.n	8003862 <_isatty_r+0x1a>
 800385c:	682b      	ldr	r3, [r5, #0]
 800385e:	b103      	cbz	r3, 8003862 <_isatty_r+0x1a>
 8003860:	6023      	str	r3, [r4, #0]
 8003862:	bd38      	pop	{r3, r4, r5, pc}
 8003864:	20000258 	.word	0x20000258

08003868 <_malloc_usable_size_r>:
 8003868:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800386c:	1f18      	subs	r0, r3, #4
 800386e:	2b00      	cmp	r3, #0
 8003870:	bfbc      	itt	lt
 8003872:	580b      	ldrlt	r3, [r1, r0]
 8003874:	18c0      	addlt	r0, r0, r3
 8003876:	4770      	bx	lr

08003878 <_init>:
 8003878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800387a:	bf00      	nop
 800387c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800387e:	bc08      	pop	{r3}
 8003880:	469e      	mov	lr, r3
 8003882:	4770      	bx	lr

08003884 <_fini>:
 8003884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003886:	bf00      	nop
 8003888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800388a:	bc08      	pop	{r3}
 800388c:	469e      	mov	lr, r3
 800388e:	4770      	bx	lr
